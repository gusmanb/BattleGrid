	.zxbasic
	org 32768
.core.__START_PROGRAM:
	ld hl, END
	di
	push ix
	push iy
	exx
	push hl
	exx
	ld hl, 0
	add hl, sp
	ld (.core.__CALL_BACK__), hl
	ei
	call .core.__MEM_INIT
	call .core.__PRINT_INIT
	jp .core.__MAIN_PROGRAM__
.core.__CALL_BACK__:
	DEFW 0
.core.ZXBASIC_USER_DATA:
	; Defines HEAP SIZE
.core.ZXBASIC_HEAP_SIZE EQU 256
.core.ZXBASIC_MEM_HEAP:
	DEFS 256
	; Defines USER DATA Length in bytes
.core.ZXBASIC_USER_DATA_LEN EQU .core.ZXBASIC_USER_DATA_END - .core.ZXBASIC_USER_DATA
	.core.__LABEL__.ZXBASIC_USER_DATA_LEN EQU .core.ZXBASIC_USER_DATA_LEN
	.core.__LABEL__.ZXBASIC_USER_DATA EQU .core.ZXBASIC_USER_DATA
	_intHandlerAddress EQU 65279
_frameCounter:
	DEFB 00, 00
_playerX:
	DEFB 14h
_playerSprite:
	DEFB 00h
_score:
	DEFB 00, 00
_updateScore:
	DEFB 00h
_lifes:
	DEFB 04h
_dir:
	DEFB 00h
_dead:
	DEFB 00h
_activeShots:
	DEFB 00
_cursorX:
	DEFB 00h
_cursorY:
	DEFB 00h
_cursorVisible:
	DEFB 00h
_cursorFrames:
	DEFB 0Ah
_cursorMoved:
	DEFB 00h
_cursorTool:
	DEFB 00h
_activeAliens:
	DEFB 00
_alienFrame:
	DEFB 05h
_activeTanks:
	DEFB 00
_tankFrame:
	DEFB 03h
_tankProbability:
	DEFB 00
_activeTowers:
	DEFB 00
_availableMines:
	DEFB 00h
_availableBombs:
	DEFB 00h
_availableBlockers:
	DEFB 00h
_availableChargedShots:
	DEFB 00h
_availableFireShots:
	DEFB 00h
_availableClearShots:
	DEFB 00h
_activeShips:
	DEFB 00
_freezingShip:
	DEFB 01h
_activeHangars:
	DEFB 00
_freezingHangar:
	DEFB 01h
_buc:
	DEFB 00
_tileSet:
	DEFW .LABEL.__LABEL758
_tileSet.__DATA__.__PTR__:
	DEFW _tileSet.__DATA__
_tileSet.__DATA__:
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 0Fh
	DEFB 07h
	DEFB 07h
	DEFB 07h
	DEFB 07h
	DEFB 07h
	DEFB 07h
	DEFB 07h
	DEFB 07h
	DEFB 07h
	DEFB 07h
	DEFB 0Fh
	DEFB 00h
	DEFB 00h
	DEFB 0FCh
	DEFB 0FCh
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 0Ch
	DEFB 0Ch
	DEFB 1Eh
	DEFB 7Fh
	DEFB 1Eh
	DEFB 3Fh
	DEFB 33h
	DEFB 40h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 78h
	DEFB 1Ch
	DEFB 1Ch
	DEFB 1Ch
	DEFB 18h
	DEFB 70h
	DEFB 38h
	DEFB 1Ch
	DEFB 1Ch
	DEFB 1Dh
	DEFB 1Dh
	DEFB 7Bh
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 03h
	DEFB 0Ch
	DEFB 1Ch
	DEFB 1Ch
	DEFB 3Ch
	DEFB 3Ch
	DEFB 3Ch
	DEFB 3Dh
	DEFB 0BDh
	DEFB 3Ch
	DEFB 3Ch
	DEFB 1Ch
	DEFB 9Ch
	DEFB 0Ch
	DEFB 03h
	DEFB 00h
	DEFB 00h
	DEFB 78h
	DEFB 78h
	DEFB 0B8h
	DEFB 0B8h
	DEFB 0B8h
	DEFB 0BCh
	DEFB 0BCh
	DEFB 0BCh
	DEFB 0FCh
	DEFB 1Eh
	DEFB 1Eh
	DEFB 9Fh
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 0D3h
	DEFB 71h
	DEFB 31h
	DEFB 31h
	DEFB 11h
	DEFB 11h
	DEFB 01h
	DEFB 0F9h
	DEFB 0F1h
	DEFB 0F1h
	DEFB 0F1h
	DEFB 0F1h
	DEFB 0F1h
	DEFB 0E1h
	DEFB 83h
	DEFB 00h
	DEFB 00h
	DEFB 0DDh
	DEFB 0DDh
	DEFB 9Ch
	DEFB 9Ch
	DEFB 1Ch
	DEFB 1Ch
	DEFB 1Ch
	DEFB 1Ch
	DEFB 1Ch
	DEFB 1Ch
	DEFB 1Ch
	DEFB 3Eh
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 0EEh
	DEFB 0E7h
	DEFB 0E7h
	DEFB 0E7h
	DEFB 0E7h
	DEFB 0E7h
	DEFB 0EEh
	DEFB 0EEh
	DEFB 0E7h
	DEFB 0E7h
	DEFB 0E7h
	DEFB 0E7h
	DEFB 0E7h
	DEFB 0E7h
	DEFB 0F3h
	DEFB 00h
	DEFB 00h
	DEFB 0EEh
	DEFB 0EEh
	DEFB 0CEh
	DEFB 0CEh
	DEFB 0Eh
	DEFB 0Eh
	DEFB 0Eh
	DEFB 0Eh
	DEFB 0Eh
	DEFB 0Eh
	DEFB 1Eh
	DEFB 1Fh
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 1Fh
	DEFB 0Fh
	DEFB 8Fh
	DEFB 8Fh
	DEFB 8Fh
	DEFB 0Fh
	DEFB 0Fh
	DEFB 0Fh
	DEFB 0Fh
	DEFB 8Fh
	DEFB 8Fh
	DEFB 8Fh
	DEFB 0CFh
	DEFB 0CFh
	DEFB 9Fh
	DEFB 00h
	DEFB 00h
	DEFB 0CFh
	DEFB 0C7h
	DEFB 47h
	DEFB 47h
	DEFB 07h
	DEFB 07h
	DEFB 07h
	DEFB 07h
	DEFB 07h
	DEFB 07h
	DEFB 07h
	DEFB 0Fh
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 0BFh
	DEFB 1Fh
	DEFB 0Fh
	DEFB 0Fh
	DEFB 0Fh
	DEFB 0Fh
	DEFB 0Fh
	DEFB 0Fh
	DEFB 0Fh
	DEFB 0Fh
	DEFB 0Fh
	DEFB 0Fh
	DEFB 0Fh
	DEFB 0Fh
	DEFB 9Fh
	DEFB 00h
	DEFB 00h
	DEFB 0Fh
	DEFB 07h
	DEFB 07h
	DEFB 07h
	DEFB 07h
	DEFB 07h
	DEFB 07h
	DEFB 07h
	DEFB 27h
	DEFB 27h
	DEFB 67h
	DEFB 6Fh
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 60h
	DEFB 30h
	DEFB 38h
	DEFB 38h
	DEFB 3Ch
	DEFB 3Ch
	DEFB 3Ch
	DEFB 3Ch
	DEFB 3Dh
	DEFB 3Ch
	DEFB 3Ch
	DEFB 38h
	DEFB 39h
	DEFB 30h
	DEFB 40h
	DEFB 00h
	DEFB 00h
	DEFB 60h
	DEFB 60h
	DEFB 20h
	DEFB 00h
	DEFB 40h
	DEFB 40h
	DEFB 40h
	DEFB 40h
	DEFB 00h
	DEFB 20h
	DEFB 60h
	DEFB 60h
	DEFB 00h
	DEFB 00h
	DEFB 3Fh
	DEFB 3Fh
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 30h
	DEFB 30h
	DEFB 78h
	DEFB 0FEh
	DEFB 78h
	DEFB 0FCh
	DEFB 0CCh
	DEFB 02h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 3Fh
	DEFB 40h
	DEFB 0AFh
	DEFB 98h
	DEFB 0B3h
	DEFB 0A4h
	DEFB 0A9h
	DEFB 0AAh
	DEFB 0AAh
	DEFB 0A2h
	DEFB 0A2h
	DEFB 0AAh
	DEFB 0AAh
	DEFB 0A2h
	DEFB 0A2h
	DEFB 0AAh
	DEFB 0AAh
	DEFB 0A9h
	DEFB 0A4h
	DEFB 0B3h
	DEFB 98h
	DEFB 0AFh
	DEFB 40h
	DEFB 3Fh
	DEFB 0FFh
	DEFB 00h
	DEFB 0FFh
	DEFB 00h
	DEFB 99h
	DEFB 00h
	DEFB 0FFh
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 18h
	DEFB 18h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 0FFh
	DEFB 00h
	DEFB 99h
	DEFB 00h
	DEFB 0FFh
	DEFB 00h
	DEFB 0FFh
	DEFB 0FCh
	DEFB 02h
	DEFB 0F5h
	DEFB 19h
	DEFB 0CDh
	DEFB 25h
	DEFB 95h
	DEFB 55h
	DEFB 55h
	DEFB 45h
	DEFB 45h
	DEFB 55h
	DEFB 55h
	DEFB 45h
	DEFB 45h
	DEFB 55h
	DEFB 55h
	DEFB 95h
	DEFB 25h
	DEFB 0CDh
	DEFB 19h
	DEFB 0F5h
	DEFB 02h
	DEFB 0FCh
	DEFB 80h
	DEFB 0C0h
	DEFB 0E0h
	DEFB 0B0h
	DEFB 0B8h
	DEFB 0BCh
	DEFB 0C6h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 0C6h
	DEFB 0BCh
	DEFB 0B8h
	DEFB 0B0h
	DEFB 0E0h
	DEFB 0C0h
	DEFB 80h
	DEFB 01h
	DEFB 03h
	DEFB 07h
	DEFB 0Dh
	DEFB 1Dh
	DEFB 3Dh
	DEFB 63h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 63h
	DEFB 3Dh
	DEFB 1Dh
	DEFB 0Dh
	DEFB 07h
	DEFB 03h
	DEFB 01h
	DEFB 42h
	DEFB 0A5h
	DEFB 7Eh
	DEFB 2Fh
	DEFB 37h
	DEFB 7Eh
	DEFB 0A5h
	DEFB 42h
	DEFB 00h
	DEFB 99h
	DEFB 66h
	DEFB 0DBh
	DEFB 0BDh
	DEFB 66h
	DEFB 99h
	DEFB 00h
	DEFB 42h
	DEFB 0A5h
	DEFB 7Eh
	DEFB 0F4h
	DEFB 0ECh
	DEFB 7Eh
	DEFB 0A5h
	DEFB 42h
	DEFB 42h
	DEFB 0A5h
	DEFB 7Eh
	DEFB 34h
	DEFB 2Ch
	DEFB 7Eh
	DEFB 0BDh
	DEFB 5Ah
	DEFB 5Ah
	DEFB 24h
	DEFB 34h
	DEFB 5Ah
	DEFB 5Ah
	DEFB 34h
	DEFB 24h
	DEFB 5Ah
	DEFB 5Ah
	DEFB 0BDh
	DEFB 7Eh
	DEFB 2Ch
	DEFB 34h
	DEFB 7Eh
	DEFB 0A5h
	DEFB 42h
	DEFB 00h
	DEFB 02h
	DEFB 03h
	DEFB 07h
	DEFB 09h
	DEFB 09h
	DEFB 1Fh
	DEFB 09h
	DEFB 00h
	DEFB 7Eh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 24h
	DEFB 24h
	DEFB 0FFh
	DEFB 24h
	DEFB 00h
	DEFB 40h
	DEFB 0C0h
	DEFB 0F0h
	DEFB 90h
	DEFB 90h
	DEFB 0FCh
	DEFB 92h
	DEFB 09h
	DEFB 3Fh
	DEFB 61h
	DEFB 7Fh
	DEFB 09h
	DEFB 09h
	DEFB 3Fh
	DEFB 49h
	DEFB 24h
	DEFB 0FFh
	DEFB 00h
	DEFB 0FFh
	DEFB 24h
	DEFB 24h
	DEFB 0FFh
	DEFB 24h
	DEFB 92h
	DEFB 0FEh
	DEFB 82h
	DEFB 0FEh
	DEFB 92h
	DEFB 92h
	DEFB 0FCh
	DEFB 90h
	DEFB 49h
	DEFB 7Fh
	DEFB 41h
	DEFB 7Fh
	DEFB 7Fh
	DEFB 67h
	DEFB 67h
	DEFB 27h
	DEFB 24h
	DEFB 0FFh
	DEFB 3Ch
	DEFB 0E7h
	DEFB 0DBh
	DEFB 0A5h
	DEFB 0A5h
	DEFB 0A5h
	DEFB 90h
	DEFB 0FEh
	DEFB 82h
	DEFB 0FEh
	DEFB 0FEh
	DEFB 0E6h
	DEFB 0E4h
	DEFB 0E0h
	DEFB 00h
	DEFB 00h
	DEFB 03h
	DEFB 03h
	DEFB 06h
	DEFB 05h
	DEFB 27h
	DEFB 36h
	DEFB 3Ch
	DEFB 3Ch
	DEFB 0E7h
	DEFB 0A5h
	DEFB 0BDh
	DEFB 0E7h
	DEFB 0A5h
	DEFB 0BDh
	DEFB 00h
	DEFB 7Ch
	DEFB 82h
	DEFB 0CAh
	DEFB 6Ah
	DEFB 0A2h
	DEFB 0FAh
	DEFB 6Ah
	DEFB 76h
	DEFB 5Eh
	DEFB 5Ah
	DEFB 7Fh
	DEFB 27h
	DEFB 2Fh
	DEFB 0D8h
	DEFB 3Fh
	DEFB 0E7h
	DEFB 0A5h
	DEFB 0BDh
	DEFB 0E7h
	DEFB 0FFh
	DEFB 0E7h
	DEFB 0C3h
	DEFB 0C3h
	DEFB 6Eh
	DEFB 7Eh
	DEFB 5Eh
	DEFB 0FEh
	DEFB 0E6h
	DEFB 0F6h
	DEFB 1Eh
	DEFB 0FEh
	DEFB 60h
	DEFB 0F0h
	DEFB 0A0h
	DEFB 0B8h
	DEFB 0A4h
	DEFB 0BCh
	DEFB 0A6h
	DEFB 0BDh
	DEFB 0A5h
	DEFB 0BDh
	DEFB 0A5h
	DEFB 0BDh
	DEFB 0A5h
	DEFB 0FDh
	DEFB 0E7h
	DEFB 0E7h
	DEFB 28h
	DEFB 3Eh
	DEFB 26h
	DEFB 0E7h
	DEFB 0BEh
	DEFB 0E7h
	DEFB 0A6h
	DEFB 0FEh
	DEFB 06h
	DEFB 1Fh
	DEFB 05h
	DEFB 0C7h
	DEFB 7Dh
	DEFB 0E7h
	DEFB 65h
	DEFB 7Fh
	DEFB 16h
	DEFB 1Fh
	DEFB 85h
	DEFB 0DFh
	DEFB 0A5h
	DEFB 0FFh
	DEFB 0A5h
	DEFB 0E7h
	DEFB 18h
	DEFB 3Ch
	DEFB 18h
	DEFB 18h
	DEFB 24h
	DEFB 5Ah
	DEFB 5Ah
	DEFB 0FFh
	DEFB 4Eh
	DEFB 9Ah
	DEFB 9Ch
	DEFB 0A1h
	DEFB 08h
	DEFB 9Ah
	DEFB 73h
	DEFB 26h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 0FCh
	DEFB 0F6h
	DEFB 0D6h
	DEFB 0E7h
	DEFB 0C5h
	DEFB 0FFh
	DEFB 0FBh
	DEFB 3Bh
	DEFB 57h
	DEFB 0EBh
	DEFB 83h
	DEFB 00h
	DEFB 00h
	DEFB 0FFh
	DEFB 0FBh
	DEFB 0BFh
	DEFB 0FFh
	DEFB 0BFh
	DEFB 53h
	DEFB 0BFh
	DEFB 0BFh
	DEFB 0EAh
	DEFB 0B8h
	DEFB 0B8h
	DEFB 80h
	DEFB 0B0h
	DEFB 0F4h
	DEFB 0C8h
	DEFB 0BCh
	DEFB 34h
	DEFB 7Ah
	DEFB 0FBh
	DEFB 0EDh
	DEFB 0F7h
	DEFB 0CDh
	DEFB 7Ah
	DEFB 24h
	DEFB 7Bh
	DEFB 77h
	DEFB 2Fh
	DEFB 1Fh
	DEFB 1Fh
	DEFB 3Fh
	DEFB 3Fh
	DEFB 1Fh
	DEFB 0BCh
	DEFB 0DAh
	DEFB 0D8h
	DEFB 0F7h
	DEFB 0E3h
	DEFB 0FBh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 00h
	DEFB 80h
	DEFB 0CFh
	DEFB 0CEh
	DEFB 92h
	DEFB 74h
	DEFB 77h
	DEFB 0DFh
	DEFB 67h
	DEFB 0FFh
	DEFB 1Dh
	DEFB 0DFh
	DEFB 0F5h
	DEFB 0EBh
	DEFB 5Fh
	DEFB 0FFh
	DEFB 80h
	DEFB 24h
	DEFB 7Eh
	DEFB 3Ch
	DEFB 11h
	DEFB 04h
	DEFB 4Ah
	DEFB 24h
	DEFB 40h
	DEFB 01h
	DEFB 38h
	DEFB 0CEh
	DEFB 0E7h
	DEFB 77h
	DEFB 1Eh
	DEFB 80h
	DEFB 11h
	DEFB 43h
	DEFB 01h
	DEFB 0ACh
	DEFB 1Eh
	DEFB 36h
	DEFB 66h
	DEFB 3Ch
	DEFB 0FFh
	DEFB 00h
	DEFB 0FFh
	DEFB 55h
	DEFB 0AAh
	DEFB 0FFh
	DEFB 00h
	DEFB 0FFh
	DEFB 3Fh
	DEFB 47h
	DEFB 82h
	DEFB 80h
	DEFB 8Eh
	DEFB 96h
	DEFB 90h
	DEFB 90h
	DEFB 00h
	DEFB 00h
	DEFB 3Ch
	DEFB 76h
	DEFB 0DAh
	DEFB 0FBh
	DEFB 0D5h
	DEFB 0ABh
	DEFB 04h
	DEFB 0Ah
	DEFB 55h
	DEFB 0AAh
	DEFB 0FFh
	DEFB 0A4h
	DEFB 44h
	DEFB 44h
	DEFB 24h
	DEFB 3Ch
	DEFB 0DBh
	DEFB 7Eh
	DEFB 7Eh
	DEFB 0DBh
	DEFB 3Ch
	DEFB 24h
	DEFB 42h
	DEFB 0EDh
	DEFB 0DBh
	DEFB 0B7h
	DEFB 42h
	DEFB 7Eh
	DEFB 42h
	DEFB 42h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 3Ch
	DEFB 7Eh
	DEFB 00h
	DEFB 00h
	DEFB 24h
	DEFB 18h
	DEFB 3Ch
	DEFB 5Ah
	DEFB 42h
	DEFB 5Ah
	DEFB 3Ch
	DEFB 18h
	DEFB 19h
	DEFB 22h
	DEFB 98h
	DEFB 44h
	DEFB 19h
	DEFB 22h
	DEFB 98h
	DEFB 44h
	DEFB 24h
	DEFB 71h
	DEFB 24h
	DEFB 8Eh
	DEFB 24h
	DEFB 71h
	DEFB 24h
	DEFB 8Eh
	DEFB 28h
	DEFB 20h
	DEFB 14h
	DEFB 04h
	DEFB 28h
	DEFB 20h
	DEFB 14h
	DEFB 04h
	DEFB 0E7h
	DEFB 81h
	DEFB 81h
	DEFB 18h
	DEFB 3Ch
	DEFB 81h
	DEFB 81h
	DEFB 0E7h
	DEFB 0E7h
	DEFB 81h
	DEFB 0BDh
	DEFB 3Ch
	DEFB 24h
	DEFB 0A5h
	DEFB 81h
	DEFB 0E7h
	DEFB 0E7h
	DEFB 81h
	DEFB 0A5h
	DEFB 18h
	DEFB 3Ch
	DEFB 99h
	DEFB 81h
	DEFB 0E7h
	DEFB 0E7h
	DEFB 81h
	DEFB 91h
	DEFB 48h
	DEFB 12h
	DEFB 89h
	DEFB 81h
	DEFB 0E7h
	DEFB 0E7h
	DEFB 81h
	DEFB 89h
	DEFB 10h
	DEFB 08h
	DEFB 91h
	DEFB 81h
	DEFB 0E7h
	DEFB 0E7h
	DEFB 81h
	DEFB 91h
	DEFB 0Ah
	DEFB 50h
	DEFB 89h
	DEFB 81h
	DEFB 0E7h
	DEFB 5Ah
	DEFB 24h
	DEFB 5Ah
	DEFB 18h
	DEFB 24h
	DEFB 3Ch
	DEFB 66h
	DEFB 0DBh
	DEFB 3Ch
	DEFB 42h
	DEFB 0FFh
	DEFB 3Ch
	DEFB 00h
	DEFB 18h
	DEFB 00h
	DEFB 7Eh
	DEFB 18h
	DEFB 0FFh
	DEFB 00h
	DEFB 99h
	DEFB 99h
	DEFB 00h
	DEFB 0FFh
	DEFB 18h
	DEFB 00h
	DEFB 3Ch
	DEFB 72h
	DEFB 72h
	DEFB 42h
	DEFB 42h
	DEFB 3Ch
	DEFB 00h
	DEFB 00h
	DEFB 18h
	DEFB 38h
	DEFB 08h
	DEFB 08h
	DEFB 08h
	DEFB 08h
	DEFB 00h
	DEFB 00h
	DEFB 7Eh
	DEFB 62h
	DEFB 02h
	DEFB 7Eh
	DEFB 40h
	DEFB 7Eh
	DEFB 00h
	DEFB 00h
	DEFB 7Eh
	DEFB 62h
	DEFB 02h
	DEFB 1Eh
	DEFB 42h
	DEFB 7Eh
	DEFB 00h
	DEFB 00h
	DEFB 1Ch
	DEFB 2Ch
	DEFB 44h
	DEFB 7Ch
	DEFB 04h
	DEFB 04h
	DEFB 00h
	DEFB 00h
	DEFB 7Eh
	DEFB 46h
	DEFB 40h
	DEFB 7Eh
	DEFB 02h
	DEFB 7Eh
	DEFB 00h
	DEFB 00h
	DEFB 7Eh
	DEFB 40h
	DEFB 7Eh
	DEFB 72h
	DEFB 62h
	DEFB 7Eh
	DEFB 00h
	DEFB 00h
	DEFB 7Eh
	DEFB 62h
	DEFB 04h
	DEFB 08h
	DEFB 18h
	DEFB 18h
	DEFB 00h
	DEFB 00h
	DEFB 3Ch
	DEFB 2Ch
	DEFB 24h
	DEFB 7Eh
	DEFB 62h
	DEFB 7Eh
	DEFB 00h
	DEFB 00h
	DEFB 7Eh
	DEFB 62h
	DEFB 7Eh
	DEFB 02h
	DEFB 06h
	DEFB 7Eh
	DEFB 00h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 00h
	DEFB 1Fh
	DEFB 38h
	DEFB 67h
	DEFB 7Eh
	DEFB 73h
	DEFB 61h
	DEFB 71h
	DEFB 00h
	DEFB 0F8h
	DEFB 1Ch
	DEFB 0E6h
	DEFB 7Eh
	DEFB 0CEh
	DEFB 86h
	DEFB 8Eh
	DEFB 79h
	DEFB 3Fh
	DEFB 37h
	DEFB 32h
	DEFB 30h
	DEFB 35h
	DEFB 1Fh
	DEFB 0Fh
	DEFB 9Eh
	DEFB 0FCh
	DEFB 0ECh
	DEFB 4Ch
	DEFB 0Ch
	DEFB 0ACh
	DEFB 0F8h
	DEFB 0F0h
	DEFB 00h
	DEFB 1Fh
	DEFB 39h
	DEFB 7Eh
	DEFB 67h
	DEFB 61h
	DEFB 61h
	DEFB 61h
	DEFB 00h
	DEFB 0F8h
	DEFB 9Ch
	DEFB 7Eh
	DEFB 0E6h
	DEFB 86h
	DEFB 86h
	DEFB 86h
	DEFB 71h
	DEFB 3Fh
	DEFB 27h
	DEFB 22h
	DEFB 20h
	DEFB 20h
	DEFB 15h
	DEFB 0Fh
	DEFB 8Eh
	DEFB 0FCh
	DEFB 0E4h
	DEFB 44h
	DEFB 04h
	DEFB 04h
	DEFB 0A8h
	DEFB 0F0h
	DEFB 09h
	DEFB 1Dh
	DEFB 0Fh
	DEFB 06h
	DEFB 04h
	DEFB 07h
	DEFB 07h
	DEFB 0Eh
	DEFB 90h
	DEFB 0B8h
	DEFB 0F0h
	DEFB 60h
	DEFB 20h
	DEFB 0E0h
	DEFB 0E0h
	DEFB 70h
	DEFB 1Ch
	DEFB 1Fh
	DEFB 1Eh
	DEFB 1Ch
	DEFB 19h
	DEFB 1Bh
	DEFB 66h
	DEFB 22h
	DEFB 38h
	DEFB 0F8h
	DEFB 78h
	DEFB 38h
	DEFB 98h
	DEFB 0D8h
	DEFB 66h
	DEFB 44h
	DEFB 09h
	DEFB 1Dh
	DEFB 0Fh
	DEFB 06h
	DEFB 04h
	DEFB 07h
	DEFB 07h
	DEFB 0Eh
	DEFB 90h
	DEFB 0BAh
	DEFB 0F0h
	DEFB 63h
	DEFB 26h
	DEFB 0ECh
	DEFB 0E2h
	DEFB 70h
	DEFB 1Ch
	DEFB 1Fh
	DEFB 1Eh
	DEFB 1Ch
	DEFB 19h
	DEFB 1Bh
	DEFB 66h
	DEFB 22h
	DEFB 38h
	DEFB 0F8h
	DEFB 78h
	DEFB 38h
	DEFB 98h
	DEFB 0D8h
	DEFB 66h
	DEFB 44h
	DEFB 09h
	DEFB 1Dh
	DEFB 0Fh
	DEFB 06h
	DEFB 04h
	DEFB 07h
	DEFB 07h
	DEFB 0Eh
	DEFB 90h
	DEFB 0B8h
	DEFB 0F0h
	DEFB 60h
	DEFB 3Ch
	DEFB 0C2h
	DEFB 0DAh
	DEFB 5Ah
	DEFB 1Ch
	DEFB 1Fh
	DEFB 1Eh
	DEFB 1Ch
	DEFB 19h
	DEFB 1Bh
	DEFB 66h
	DEFB 22h
	DEFB 42h
	DEFB 0BCh
	DEFB 78h
	DEFB 38h
	DEFB 98h
	DEFB 0D8h
	DEFB 66h
	DEFB 44h
	DEFB 09h
	DEFB 1Dh
	DEFB 0Fh
	DEFB 07h
	DEFB 04h
	DEFB 04h
	DEFB 06h
	DEFB 0Eh
	DEFB 88h
	DEFB 99h
	DEFB 80h
	DEFB 3Ch
	DEFB 42h
	DEFB 99h
	DEFB 0A5h
	DEFB 0A5h
	DEFB 1Ch
	DEFB 1Eh
	DEFB 1Eh
	DEFB 1Ch
	DEFB 19h
	DEFB 1Bh
	DEFB 66h
	DEFB 22h
	DEFB 99h
	DEFB 42h
	DEFB 3Ch
	DEFB 01h
	DEFB 98h
	DEFB 0C8h
	DEFB 66h
	DEFB 44h
	DEFB 08h
	DEFB 18h
	DEFB 09h
	DEFB 02h
	DEFB 02h
	DEFB 00h
	DEFB 00h
	DEFB 08h
	DEFB 0Ch
	DEFB 82h
	DEFB 39h
	DEFB 45h
	DEFB 3Ch
	DEFB 7Eh
	DEFB 0F7h
	DEFB 6Fh
	DEFB 1Ah
	DEFB 12h
	DEFB 12h
	DEFB 10h
	DEFB 19h
	DEFB 18h
	DEFB 66h
	DEFB 22h
	DEFB 7Eh
	DEFB 0BCh
	DEFB 99h
	DEFB 4Eh
	DEFB 30h
	DEFB 82h
	DEFB 6Ch
	DEFB 00h
	DEFB 21h
	DEFB 47h
	DEFB 06h
	DEFB 10h
	DEFB 19h
	DEFB 1Ah
	DEFB 20h
	DEFB 28h
	DEFB 0Ch
	DEFB 4Eh
	DEFB 25h
	DEFB 43h
	DEFB 05h
	DEFB 00h
	DEFB 98h
	DEFB 19h
	DEFB 02h
	DEFB 32h
	DEFB 18h
	DEFB 19h
	DEFB 08h
	DEFB 42h
	DEFB 27h
	DEFB 01h
	DEFB 82h
	DEFB 30h
	DEFB 01h
	DEFB 41h
	DEFB 17h
	DEFB 80h
	DEFB 69h
	DEFB 0C2h
	DEFB 00h
	DEFB 08h
	DEFB 00h
	DEFB 00h
	DEFB 20h
	DEFB 04h
	DEFB 00h
	DEFB 40h
	DEFB 00h
	DEFB 40h
	DEFB 04h
	DEFB 00h
	DEFB 02h
	DEFB 00h
	DEFB 00h
	DEFB 80h
	DEFB 00h
	DEFB 20h
	DEFB 04h
	DEFB 00h
	DEFB 40h
	DEFB 00h
	DEFB 08h
	DEFB 00h
	DEFB 00h
	DEFB 08h
	DEFB 00h
	DEFB 22h
	DEFB 00h
	DEFB 40h
	DEFB 08h
	DEFB 00h
	DEFB 4Eh
	DEFB 4Ch
	DEFB 78h
	DEFB 49h
	DEFB 4Ch
	DEFB 76h
	DEFB 4Bh
	DEFB 3Fh
	DEFB 72h
	DEFB 32h
	DEFB 1Eh
	DEFB 92h
	DEFB 32h
	DEFB 6Eh
	DEFB 0D2h
	DEFB 7Ch
	DEFB 02h
	DEFB 03h
	DEFB 02h
	DEFB 03h
	DEFB 02h
	DEFB 03h
	DEFB 01h
	DEFB 00h
	DEFB 0C0h
	DEFB 40h
	DEFB 0C0h
	DEFB 40h
	DEFB 0C0h
	DEFB 40h
	DEFB 80h
	DEFB 00h
	DEFB 76h
	DEFB 4Bh
	DEFB 3Fh
	DEFB 02h
	DEFB 03h
	DEFB 02h
	DEFB 03h
	DEFB 02h
	DEFB 6Eh
	DEFB 0D2h
	DEFB 7Ch
	DEFB 0C0h
	DEFB 40h
	DEFB 0C0h
	DEFB 40h
	DEFB 0C0h
	DEFB 03h
	DEFB 01h
	DEFB 04h
	DEFB 01h
	DEFB 11h
	DEFB 01h
	DEFB 45h
	DEFB 11h
	DEFB 40h
	DEFB 80h
	DEFB 20h
	DEFB 80h
	DEFB 88h
	DEFB 0A0h
	DEFB 82h
	DEFB 90h
	DEFB 00h
	DEFB 66h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 7Eh
	DEFB 3Ch
	DEFB 18h
	DEFB 00h
.LABEL.__LABEL758:
	DEFW 0001h
	DEFW 0008h
	DEFB 01h
_tileColors:
	DEFW .LABEL.__LABEL759
_tileColors.__DATA__.__PTR__:
	DEFW _tileColors.__DATA__
_tileColors.__DATA__:
	DEFB 00h
	DEFB 42h
	DEFB 42h
	DEFB 46h
	DEFB 46h
	DEFB 42h
	DEFB 42h
	DEFB 46h
	DEFB 46h
	DEFB 42h
	DEFB 42h
	DEFB 46h
	DEFB 46h
	DEFB 42h
	DEFB 42h
	DEFB 46h
	DEFB 46h
	DEFB 42h
	DEFB 42h
	DEFB 46h
	DEFB 46h
	DEFB 42h
	DEFB 42h
	DEFB 46h
	DEFB 46h
	DEFB 42h
	DEFB 42h
	DEFB 46h
	DEFB 46h
	DEFB 42h
	DEFB 42h
	DEFB 46h
	DEFB 46h
	DEFB 41h
	DEFB 41h
	DEFB 41h
	DEFB 41h
	DEFB 47h
	DEFB 41h
	DEFB 41h
	DEFB 41h
	DEFB 41h
	DEFB 45h
	DEFB 45h
	DEFB 45h
	DEFB 45h
	DEFB 07h
	DEFB 47h
	DEFB 07h
	DEFB 07h
	DEFB 47h
	DEFB 07h
	DEFB 03h
	DEFB 03h
	DEFB 02h
	DEFB 03h
	DEFB 02h
	DEFB 02h
	DEFB 02h
	DEFB 02h
	DEFB 02h
	DEFB 03h
	DEFB 03h
	DEFB 02h
	DEFB 03h
	DEFB 02h
	DEFB 02h
	DEFB 03h
	DEFB 02h
	DEFB 03h
	DEFB 02h
	DEFB 02h
	DEFB 05h
	DEFB 07h
	DEFB 10h
	DEFB 10h
	DEFB 10h
	DEFB 10h
	DEFB 16h
	DEFB 10h
	DEFB 10h
	DEFB 10h
	DEFB 10h
	DEFB 06h
	DEFB 45h
	DEFB 0F2h
	DEFB 0C6h
	DEFB 05h
	DEFB 04h
	DEFB 04h
	DEFB 44h
	DEFB 03h
	DEFB 06h
	DEFB 42h
	DEFB 44h
	DEFB 46h
	DEFB 45h
	DEFB 06h
	DEFB 03h
	DEFB 42h
	DEFB 44h
	DEFB 46h
	DEFB 45h
	DEFB 05h
	DEFB 46h
	DEFB 47h
	DEFB 47h
	DEFB 47h
	DEFB 47h
	DEFB 47h
	DEFB 47h
	DEFB 47h
	DEFB 47h
	DEFB 47h
	DEFB 47h
	DEFB 47h
	DEFB 38h
	DEFB 04h
	DEFB 04h
	DEFB 04h
	DEFB 04h
	DEFB 04h
	DEFB 04h
	DEFB 04h
	DEFB 04h
	DEFB 06h
	DEFB 06h
	DEFB 06h
	DEFB 06h
	DEFB 46h
	DEFB 46h
	DEFB 46h
	DEFB 46h
	DEFB 72h
	DEFB 72h
	DEFB 72h
	DEFB 72h
	DEFB 56h
	DEFB 56h
	DEFB 56h
	DEFB 56h
	DEFB 56h
	DEFB 56h
	DEFB 56h
	DEFB 56h
	DEFB 56h
	DEFB 56h
	DEFB 56h
	DEFB 56h
	DEFB 56h
	DEFB 56h
	DEFB 56h
	DEFB 56h
	DEFB 07h
	DEFB 07h
	DEFB 07h
	DEFB 07h
	DEFB 72h
	DEFB 72h
	DEFB 72h
	DEFB 72h
	DEFB 42h
.LABEL.__LABEL759:
	DEFW 0000h
	DEFB 01h
_borderColors:
	DEFW .LABEL.__LABEL760
_borderColors.__DATA__.__PTR__:
	DEFW _borderColors.__DATA__
_borderColors.__DATA__:
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
.LABEL.__LABEL760:
	DEFW 0000h
	DEFB 01h
_shots:
	DEFW .LABEL.__LABEL761
_shots.__DATA__.__PTR__:
	DEFW _shots.__DATA__
_shots.__DATA__:
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
.LABEL.__LABEL761:
	DEFW 0001h
	DEFW 0004h
	DEFB 01h
_activeMap:
	DEFW .LABEL.__LABEL762
_activeMap.__DATA__.__PTR__:
	DEFW _activeMap.__DATA__
_activeMap.__DATA__:
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
.LABEL.__LABEL762:
	DEFW 0001h
	DEFW 0014h
	DEFB 01h
_reflectDirsA:
	DEFW .LABEL.__LABEL763
_reflectDirsA.__DATA__.__PTR__:
	DEFW _reflectDirsA.__DATA__
_reflectDirsA.__DATA__:
	DEFB 02h
	DEFB 04h
	DEFB 01h
	DEFB 03h
.LABEL.__LABEL763:
	DEFW 0000h
	DEFB 01h
_reflectDirsB:
	DEFW .LABEL.__LABEL764
_reflectDirsB.__DATA__.__PTR__:
	DEFW _reflectDirsB.__DATA__
_reflectDirsB.__DATA__:
	DEFB 04h
	DEFB 01h
	DEFB 02h
	DEFB 03h
.LABEL.__LABEL764:
	DEFW 0000h
	DEFB 01h
_reflectDirsC:
	DEFW .LABEL.__LABEL765
_reflectDirsC.__DATA__.__PTR__:
	DEFW _reflectDirsC.__DATA__
_reflectDirsC.__DATA__:
	DEFB 02h
	DEFB 03h
	DEFB 04h
	DEFB 01h
.LABEL.__LABEL765:
	DEFW 0000h
	DEFB 01h
_reflectDirsD:
	DEFW .LABEL.__LABEL766
_reflectDirsD.__DATA__.__PTR__:
	DEFW _reflectDirsD.__DATA__
_reflectDirsD.__DATA__:
	DEFB 03h
	DEFB 01h
	DEFB 04h
	DEFB 02h
.LABEL.__LABEL766:
	DEFW 0000h
	DEFB 01h
_maskTable:
	DEFW .LABEL.__LABEL767
_maskTable.__DATA__.__PTR__:
	DEFW _maskTable.__DATA__
_maskTable.__DATA__:
	DEFB 01h
	DEFB 02h
	DEFB 04h
	DEFB 08h
	DEFB 10h
	DEFB 20h
	DEFB 40h
	DEFB 80h
.LABEL.__LABEL767:
	DEFW 0000h
	DEFB 01h
_bitTable:
	DEFW .LABEL.__LABEL768
_bitTable.__DATA__.__PTR__:
	DEFW _bitTable.__DATA__
_bitTable.__DATA__:
	DEFB 01h
	DEFB 03h
	DEFB 07h
	DEFB 0Fh
	DEFB 1Fh
	DEFB 3Fh
	DEFB 7Fh
	DEFB 00h
.LABEL.__LABEL768:
	DEFW 0000h
	DEFB 01h
_aliens:
	DEFW .LABEL.__LABEL769
_aliens.__DATA__.__PTR__:
	DEFW _aliens.__DATA__
_aliens.__DATA__:
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
.LABEL.__LABEL769:
	DEFW 0001h
	DEFW 0004h
	DEFB 01h
_tanks:
	DEFW .LABEL.__LABEL770
_tanks.__DATA__.__PTR__:
	DEFW _tanks.__DATA__
_tanks.__DATA__:
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
.LABEL.__LABEL770:
	DEFW 0001h
	DEFW 0004h
	DEFB 01h
_ships:
	DEFW .LABEL.__LABEL771
_ships.__DATA__.__PTR__:
	DEFW _ships.__DATA__
_ships.__DATA__:
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
.LABEL.__LABEL771:
	DEFW 0001h
	DEFW 0004h
	DEFB 01h
_hangars:
	DEFW .LABEL.__LABEL772
_hangars.__DATA__.__PTR__:
	DEFW _hangars.__DATA__
_hangars.__DATA__:
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
.LABEL.__LABEL772:
	DEFW 0001h
	DEFW 0004h
	DEFB 01h
_attribsAlienA:
	DEFW .LABEL.__LABEL773
_attribsAlienA.__DATA__.__PTR__:
	DEFW _attribsAlienA.__DATA__
_attribsAlienA.__DATA__:
	DEFB 00h
	DEFB 01h
	DEFB 41h
	DEFB 03h
	DEFB 04h
	DEFB 44h
.LABEL.__LABEL773:
	DEFW 0000h
	DEFB 01h
_attribsAlienB:
	DEFW .LABEL.__LABEL774
_attribsAlienB.__DATA__.__PTR__:
	DEFW _attribsAlienB.__DATA__
_attribsAlienB.__DATA__:
	DEFB 42h
	DEFB 02h
	DEFB 01h
	DEFB 00h
.LABEL.__LABEL774:
	DEFW 0000h
	DEFB 01h
_colorsExp:
	DEFW .LABEL.__LABEL775
_colorsExp.__DATA__.__PTR__:
	DEFW _colorsExp.__DATA__
_colorsExp.__DATA__:
	DEFB 42h
	DEFB 02h
	DEFB 01h
	DEFB 00h
.LABEL.__LABEL775:
	DEFW 0000h
	DEFB 01h
.core.ZXBASIC_USER_DATA_END:
.core.__MAIN_PROGRAM__:
#line 37 "C:/Users/geniw/source/repos/BattleGrid/BattleGrid/ZxBasicFiles/GuSprites.zxbas"
#line 41 "C:/Users/geniw/source/repos/BattleGrid/BattleGrid/ZxBasicFiles/GuSprites.zxbas"
#line 48 "C:/Users/geniw/source/repos/BattleGrid/BattleGrid/ZxBasicFiles/GuSprites.zxbas"
#line 55 "C:/Users/geniw/source/repos/BattleGrid/BattleGrid/ZxBasicFiles/GuSprites.zxbas"
#line 60 "C:/Users/geniw/source/repos/BattleGrid/BattleGrid/ZxBasicFiles/GuSprites.zxbas"
#line 69 "C:/Users/geniw/source/repos/BattleGrid/BattleGrid/ZxBasicFiles/GuSprites.zxbas"
#line 73 "C:/Users/geniw/source/repos/BattleGrid/BattleGrid/ZxBasicFiles/GuSprites.zxbas"
#line 83 "C:/Users/geniw/source/repos/BattleGrid/BattleGrid/ZxBasicFiles/GuSprites.zxbas"
#line 98 "C:/Users/geniw/source/repos/BattleGrid/BattleGrid/ZxBasicFiles/GuSprites.zxbas"
#line 139 "C:/Users/geniw/source/repos/BattleGrid/BattleGrid/ZxBasicFiles/GuSprites.zxbas"
#line 144 "C:/Users/geniw/source/repos/BattleGrid/BattleGrid/ZxBasicFiles/GuSprites.zxbas"
#line 150 "C:/Users/geniw/source/repos/BattleGrid/BattleGrid/ZxBasicFiles/GuSprites.zxbas"
#line 157 "C:/Users/geniw/source/repos/BattleGrid/BattleGrid/ZxBasicFiles/GuSprites.zxbas"
#line 165 "C:/Users/geniw/source/repos/BattleGrid/BattleGrid/ZxBasicFiles/GuSprites.zxbas"
#line 175 "C:/Users/geniw/source/repos/BattleGrid/BattleGrid/ZxBasicFiles/GuSprites.zxbas"
#line 181 "C:/Users/geniw/source/repos/BattleGrid/BattleGrid/ZxBasicFiles/GuSprites.zxbas"
#line 185 "C:/Users/geniw/source/repos/BattleGrid/BattleGrid/ZxBasicFiles/GuSprites.zxbas"
#line 186 "C:/Users/geniw/source/repos/BattleGrid/BattleGrid/ZxBasicFiles/GuSprites.zxbas"
#line 188 "C:/Users/geniw/source/repos/BattleGrid/BattleGrid/ZxBasicFiles/GuSprites.zxbas"
#line 192 "C:/Users/geniw/source/repos/BattleGrid/BattleGrid/ZxBasicFiles/GuSprites.zxbas"
#line 193 "C:/Users/geniw/source/repos/BattleGrid/BattleGrid/ZxBasicFiles/GuSprites.zxbas"
#line 195 "C:/Users/geniw/source/repos/BattleGrid/BattleGrid/ZxBasicFiles/GuSprites.zxbas"
		SPRITE_1x1_BUFFER_SIZE equ (6 * 8)
		SPRITE_1x2_BUFFER_SIZE equ (9 * 8)
		SPRITE_2x2_BUFFER_SIZE equ (15 * 8)
		SPRITE_1x1_SHIFTED_SIZE equ 4
		SPRITE_1x2_SHIFTED_SIZE equ 6
		SPRITE_2x2_SHIFTED_SIZE equ 9
		TOTAL_1x1_OPS equ (10 * SPRITE_1x1_SHIFTED_SIZE)
		TOTAL_1x2_OPS equ (0 * SPRITE_1x2_SHIFTED_SIZE)
		TOTAL_2x2_OPS equ (0 * SPRITE_2x2_SHIFTED_SIZE)
		TOTAL_DRAW_OPS equ ((TOTAL_1x1_OPS + TOTAL_1x2_OPS + TOTAL_2x2_OPS) * 2)
		DRAW_OP_SIZE equ 5
#line 216 "C:/Users/geniw/source/repos/BattleGrid/BattleGrid/ZxBasicFiles/GuSprites.zxbas"
		DRAW_OPS_SIZE equ (TOTAL_DRAW_OPS * DRAW_OP_SIZE)
		DRAW_OPS_DATA_SIZE equ (TOTAL_DRAW_OPS * 8)
		SPRITE_BUFFER_SIZE equ ((16 * SPRITE_1x1_BUFFER_SIZE)+(0 * SPRITE_1x2_BUFFER_SIZE)+(0 * SPRITE_2x2_BUFFER_SIZE))
		SPRITE_INDEX_SIZE equ ((16 + 0 + 0 + 1) * 2)
		jp GSPRITES_LIB_END
DRAW_OPS_A:
		defs DRAW_OPS_SIZE
DRAW_OPS_B:
		defs DRAW_OPS_SIZE
DRAW_OPS_DATA:
		defs DRAW_OPS_DATA_SIZE
CURRENT_DRAW_OPS:
		defw 0
CURRENT_CLEAR_OPS:
		defw 0
CURRENT_DRAW_COUNT:
		defb 0
CURRENT_CLEAR_COUNT:
		defb 0
DRAW_OPS_DATA_INDEX:
		defw 0
CELL_MAP_A:
		defs (32 * 24)
CELL_MAP_B:
		defs (32 * 24)
CURRENT_DRAW_MAP:
		defw 0
CURRENT_CLEAR_MAP:
		defw 0
#line 282 "C:/Users/geniw/source/repos/BattleGrid/BattleGrid/ZxBasicFiles/GuSprites.zxbas"
#line 158 "C:/Users/geniw/source/repos/BattleGrid/BattleGrid/ZxBasicFiles/GuSprites.zxbas"
#line 4 "C:/Users/geniw/source/repos/BattleGrid/BattleGrid/ZxBasicFiles/Sprites.zxbas"
SPRITE_BUFFER:
PLAYER_ADDRESS:
		DEFB 000h, 000h, 000h, 000h, 018h, 05Ah, 0A5h, 0BDh
		DEFB 07Eh, 066h, 05Ah, 0A5h, 000h, 000h, 000h, 000h
		DEFB 000h, 000h, 000h, 000h, 001h, 005h, 00Ah, 00Bh
		DEFB 007h, 006h, 005h, 00Ah, 000h, 000h, 000h, 000h
		DEFB 000h, 000h, 000h, 000h, 080h, 0A0h, 050h, 0D0h
		DEFB 0E0h, 060h, 0A0h, 050h, 000h, 000h, 000h, 000h
PLAYERRIGHT_ADDRESS:
		DEFB 000h, 000h, 000h, 000h, 008h, 02Ah, 014h, 01Ch
		DEFB 03Eh, 036h, 02Ah, 055h, 000h, 000h, 000h, 000h
		DEFB 000h, 000h, 000h, 000h, 000h, 002h, 001h, 001h
		DEFB 003h, 003h, 002h, 005h, 000h, 000h, 000h, 000h
		DEFB 000h, 000h, 000h, 000h, 080h, 0A0h, 040h, 0C0h
		DEFB 0E0h, 060h, 0A0h, 050h, 000h, 000h, 000h, 000h
PLAYERLEFT_ADDRESS:
		DEFB 000h, 000h, 000h, 000h, 010h, 054h, 028h, 038h
		DEFB 07Ch, 06Ch, 054h, 0AAh, 000h, 000h, 000h, 000h
		DEFB 000h, 000h, 000h, 000h, 001h, 005h, 002h, 003h
		DEFB 007h, 006h, 005h, 00Ah, 000h, 000h, 000h, 000h
		DEFB 000h, 000h, 000h, 000h, 000h, 040h, 080h, 080h
		DEFB 0C0h, 0C0h, 040h, 0A0h, 000h, 000h, 000h, 000h
VFIREA_ADDRESS:
		DEFB 000h, 000h, 000h, 000h, 021h, 018h, 085h, 018h
		DEFB 021h, 018h, 084h, 018h, 000h, 000h, 000h, 000h
		DEFB 000h, 000h, 000h, 000h, 002h, 001h, 008h, 001h
		DEFB 002h, 001h, 008h, 001h, 000h, 000h, 000h, 000h
		DEFB 000h, 000h, 000h, 000h, 010h, 080h, 050h, 080h
		DEFB 010h, 080h, 040h, 080h, 000h, 000h, 000h, 000h
VFIREB_ADDRESS:
		DEFB 000h, 000h, 000h, 000h, 018h, 084h, 018h, 0A1h
		DEFB 018h, 084h, 018h, 021h, 000h, 000h, 000h, 000h
		DEFB 000h, 000h, 000h, 000h, 001h, 008h, 001h, 00Ah
		DEFB 001h, 008h, 001h, 002h, 000h, 000h, 000h, 000h
		DEFB 000h, 000h, 000h, 000h, 080h, 040h, 080h, 010h
		DEFB 080h, 040h, 080h, 010h, 000h, 000h, 000h, 000h
HFIREA_ADDRESS:
		DEFB 000h, 000h, 000h, 000h, 015h, 000h, 044h, 0AAh
		DEFB 0AAh, 011h, 000h, 044h, 000h, 000h, 000h, 000h
		DEFB 000h, 000h, 000h, 000h, 001h, 000h, 004h, 00Ah
		DEFB 00Ah, 001h, 000h, 004h, 000h, 000h, 000h, 000h
		DEFB 000h, 000h, 000h, 000h, 050h, 000h, 040h, 0A0h
		DEFB 0A0h, 010h, 000h, 040h, 000h, 000h, 000h, 000h
HFIREB_ADDRESS:
		DEFB 000h, 000h, 000h, 000h, 088h, 000h, 022h, 055h
		DEFB 055h, 088h, 000h, 02Ah, 000h, 000h, 000h, 000h
		DEFB 000h, 000h, 000h, 000h, 008h, 000h, 002h, 005h
		DEFB 005h, 008h, 000h, 002h, 000h, 000h, 000h, 000h
		DEFB 000h, 000h, 000h, 000h, 080h, 000h, 020h, 050h
		DEFB 050h, 080h, 000h, 0A0h, 000h, 000h, 000h, 000h
EXPLODEA_ADDRESS:
		DEFB 000h, 000h, 000h, 000h, 000h, 000h, 018h, 03Ch
		DEFB 03Ch, 018h, 000h, 000h, 000h, 000h, 000h, 000h
		DEFB 000h, 000h, 000h, 000h, 000h, 000h, 001h, 003h
		DEFB 003h, 001h, 000h, 000h, 000h, 000h, 000h, 000h
		DEFB 000h, 000h, 000h, 000h, 000h, 000h, 080h, 0C0h
		DEFB 0C0h, 080h, 000h, 000h, 000h, 000h, 000h, 000h
EXPLODEB_ADDRESS:
		DEFB 000h, 000h, 000h, 000h, 000h, 018h, 024h, 05Ah
		DEFB 05Ah, 024h, 018h, 000h, 000h, 000h, 000h, 000h
		DEFB 000h, 000h, 000h, 000h, 000h, 001h, 002h, 005h
		DEFB 005h, 002h, 001h, 000h, 000h, 000h, 000h, 000h
		DEFB 000h, 000h, 000h, 000h, 000h, 080h, 040h, 0A0h
		DEFB 0A0h, 040h, 080h, 000h, 000h, 000h, 000h, 000h
EXPLODEC_ADDRESS:
		DEFB 000h, 000h, 000h, 000h, 03Ch, 042h, 099h, 0A5h
		DEFB 0A5h, 099h, 042h, 03Ch, 000h, 000h, 000h, 000h
		DEFB 000h, 000h, 000h, 000h, 003h, 004h, 009h, 00Ah
		DEFB 00Ah, 009h, 004h, 003h, 000h, 000h, 000h, 000h
		DEFB 000h, 000h, 000h, 000h, 0C0h, 020h, 090h, 050h
		DEFB 050h, 090h, 020h, 0C0h, 000h, 000h, 000h, 000h
EXPLODED_ADDRESS:
		DEFB 000h, 000h, 000h, 000h, 042h, 081h, 024h, 000h
		DEFB 000h, 024h, 081h, 042h, 000h, 000h, 000h, 000h
		DEFB 000h, 000h, 000h, 000h, 004h, 008h, 002h, 000h
		DEFB 000h, 002h, 008h, 004h, 000h, 000h, 000h, 000h
		DEFB 000h, 000h, 000h, 000h, 020h, 010h, 040h, 000h
		DEFB 000h, 040h, 010h, 020h, 000h, 000h, 000h, 000h
CURSOR_ADDRESS:
		DEFB 000h, 000h, 000h, 000h, 0E7h, 081h, 081h, 000h
		DEFB 000h, 081h, 081h, 0E7h, 000h, 000h, 000h, 000h
		DEFB 000h, 000h, 000h, 000h, 00Eh, 008h, 008h, 000h
		DEFB 000h, 008h, 008h, 00Eh, 000h, 000h, 000h, 000h
		DEFB 000h, 000h, 000h, 000h, 070h, 010h, 010h, 000h
		DEFB 000h, 010h, 010h, 070h, 000h, 000h, 000h, 000h
ENEMA_ADDRESS:
		DEFB 000h, 000h, 000h, 000h, 024h, 07Eh, 0FFh, 099h
		DEFB 0DBh, 0FFh, 066h, 024h, 000h, 000h, 000h, 000h
		DEFB 000h, 000h, 000h, 000h, 002h, 007h, 00Fh, 009h
		DEFB 00Dh, 00Fh, 006h, 002h, 000h, 000h, 000h, 000h
		DEFB 000h, 000h, 000h, 000h, 040h, 0E0h, 0F0h, 090h
		DEFB 0B0h, 0F0h, 060h, 040h, 000h, 000h, 000h, 000h
ENEMB_ADDRESS:
		DEFB 000h, 000h, 000h, 000h, 024h, 07Eh, 0FFh, 0BDh
		DEFB 0DBh, 07Eh, 07Eh, 018h, 000h, 000h, 000h, 000h
		DEFB 000h, 000h, 000h, 000h, 002h, 007h, 00Fh, 00Bh
		DEFB 00Dh, 007h, 007h, 001h, 000h, 000h, 000h, 000h
		DEFB 000h, 000h, 000h, 000h, 040h, 0E0h, 0F0h, 0D0h
		DEFB 0B0h, 0E0h, 0E0h, 080h, 000h, 000h, 000h, 000h
TANKV_ADDRESS:
		DEFB 000h, 000h, 000h, 000h, 05Ah, 07Eh, 066h, 05Ah
		DEFB 05Ah, 066h, 05Ah, 018h, 000h, 000h, 000h, 000h
		DEFB 000h, 000h, 000h, 000h, 005h, 007h, 006h, 005h
		DEFB 005h, 006h, 005h, 001h, 000h, 000h, 000h, 000h
		DEFB 000h, 000h, 000h, 000h, 0A0h, 0E0h, 060h, 0A0h
		DEFB 0A0h, 060h, 0A0h, 080h, 000h, 000h, 000h, 000h
TANKH_ADDRESS:
		DEFB 000h, 000h, 000h, 000h, 0FFh, 066h, 0DBh, 0DBh
		DEFB 066h, 0FFh, 018h, 018h, 000h, 000h, 000h, 000h
		DEFB 000h, 000h, 000h, 000h, 00Fh, 006h, 00Dh, 00Dh
		DEFB 006h, 00Fh, 001h, 001h, 000h, 000h, 000h, 000h
		DEFB 000h, 000h, 000h, 000h, 0F0h, 060h, 0B0h, 0B0h
		DEFB 060h, 0F0h, 080h, 080h, 000h, 000h, 000h, 000h
SPRITE_INDEX:
		DEFW (SPRITE_BUFFER + 0)
		DEFW (SPRITE_BUFFER + 48)
		DEFW (SPRITE_BUFFER + 96)
		DEFW (SPRITE_BUFFER + 144)
		DEFW (SPRITE_BUFFER + 192)
		DEFW (SPRITE_BUFFER + 240)
		DEFW (SPRITE_BUFFER + 288)
		DEFW (SPRITE_BUFFER + 336)
		DEFW (SPRITE_BUFFER + 384)
		DEFW (SPRITE_BUFFER + 432)
		DEFW (SPRITE_BUFFER + 480)
		DEFW (SPRITE_BUFFER + 528)
		DEFW (SPRITE_BUFFER + 576)
		DEFW (SPRITE_BUFFER + 624)
		DEFW (SPRITE_BUFFER + 672)
		DEFW (SPRITE_BUFFER + 720)
		DEFW (SPRITE_BUFFER + 768)
SPRITE_COUNT:
		DEFB 16
#line 157 "C:/Users/geniw/source/repos/BattleGrid/BattleGrid/ZxBasicFiles/Sprites.zxbas"
#line 288 "C:/Users/geniw/source/repos/BattleGrid/BattleGrid/ZxBasicFiles/GuSprites.zxbas"
#line 290 "C:/Users/geniw/source/repos/BattleGrid/BattleGrid/ZxBasicFiles/GuSprites.zxbas"
#line 295 "C:/Users/geniw/source/repos/BattleGrid/BattleGrid/ZxBasicFiles/GuSprites.zxbas"
TILE_SET:
		defw 0
TILE_MAP:
		defs 768
#line 302 "C:/Users/geniw/source/repos/BattleGrid/BattleGrid/ZxBasicFiles/GuSprites.zxbas"
		PROC
INIT_GFX_LIB:
#line 312 "C:/Users/geniw/source/repos/BattleGrid/BattleGrid/ZxBasicFiles/GuSprites.zxbas"
		ld hl, DRAW_OPS_A
		ld (CURRENT_DRAW_OPS), hl
#line 314
		ld hl, DRAW_OPS_B
		ld (CURRENT_CLEAR_OPS), hl
#line 315
		ld hl, DRAW_OPS_DATA
		ld (DRAW_OPS_DATA_INDEX), hl
#line 317
		ld hl, CELL_MAP_A
		ld (CURRENT_DRAW_MAP), hl
#line 319
		ld hl, CELL_MAP_B
		ld (CURRENT_CLEAR_MAP), hl
#line 320
		ld hl, SPRITE_BUFFER
		ld (SPRITE_INDEX), hl
#line 322
		ret
		ENDP
		PROC
RESET_GFX_LIB:
		ld hl, DRAW_OPS_A
		ld (CURRENT_DRAW_OPS), hl
#line 330
		ld hl, DRAW_OPS_B
		ld (CURRENT_CLEAR_OPS), hl
#line 331
		ld hl, CELL_MAP_A
		ld (CURRENT_DRAW_MAP), hl
#line 333
		ld hl, CELL_MAP_B
		ld (CURRENT_CLEAR_MAP), hl
#line 334
		ld hl, DRAW_OPS_DATA
		ld (DRAW_OPS_DATA_INDEX), hl
#line 336
#line 343 "C:/Users/geniw/source/repos/BattleGrid/BattleGrid/ZxBasicFiles/GuSprites.zxbas"
		xor a
		ld (CURRENT_DRAW_COUNT), a
		ld (CURRENT_CLEAR_COUNT), a
		xor a
		ld de, CELL_MAP_A
		ld (de), a
		inc de
		ld hl, CELL_MAP_A
		ld bc, 768 - 1
		ldir
#line 349
		xor a
		ld de, CELL_MAP_B
		ld (de), a
		inc de
		ld hl, CELL_MAP_B
		ld bc, 768 - 1
		ldir
#line 350
		xor a
		ld de, TILE_MAP
		ld (de), a
		inc de
		ld hl, TILE_MAP
		ld bc, 768 - 1
		ldir
#line 353
#line 354 "C:/Users/geniw/source/repos/BattleGrid/BattleGrid/ZxBasicFiles/GuSprites.zxbas"
		ret
		ENDP
		PROC
CLEAR_SCREEN:
		ld hl, DRAW_OPS_A
		ld (CURRENT_DRAW_OPS), hl
#line 362
		ld hl, DRAW_OPS_B
		ld (CURRENT_CLEAR_OPS), hl
#line 363
		ld hl, CELL_MAP_A
		ld (CURRENT_DRAW_MAP), hl
#line 365
		ld hl, CELL_MAP_B
		ld (CURRENT_CLEAR_MAP), hl
#line 366
		ld hl, DRAW_OPS_DATA
		ld (DRAW_OPS_DATA_INDEX), hl
#line 368
		xor a
		ld (CURRENT_DRAW_COUNT), a
		ld (CURRENT_CLEAR_COUNT), a
		xor a
		ld de, CELL_MAP_A
		ld (de), a
		inc de
		ld hl, CELL_MAP_A
		ld bc, 768 - 1
		ldir
#line 374
		xor a
		ld de, CELL_MAP_B
		ld (de), a
		inc de
		ld hl, CELL_MAP_B
		ld bc, 768 - 1
		ldir
#line 375
		xor a
		ld de, TILE_MAP
		ld (de), a
		inc de
		ld hl, TILE_MAP
		ld bc, 768 - 1
		ldir
#line 378
#line 379 "C:/Users/geniw/source/repos/BattleGrid/BattleGrid/ZxBasicFiles/GuSprites.zxbas"
		ret
		ENDP
		PROC
		LOCAL RENDER_LOOP, END_RENDER, RESTORE_STACK
RENDER_FRAME:
#line 390 "C:/Users/geniw/source/repos/BattleGrid/BattleGrid/ZxBasicFiles/GuSprites.zxbas"
		halt
#line 394 "C:/Users/geniw/source/repos/BattleGrid/BattleGrid/ZxBasicFiles/GuSprites.zxbas"
		ld a, (CURRENT_DRAW_COUNT)
		cp 0
		jp z, END_RENDER
		ld hl, (CURRENT_DRAW_OPS)
		push hl
RENDER_LOOP:
		pop hl
		ld e, (hl)
		inc hl
		ld d, (hl)
		inc hl
#line 408
		ld c, (hl)
		inc hl
		ld b, (hl)
		inc hl
#line 409
		inc hl
#line 413 "C:/Users/geniw/source/repos/BattleGrid/BattleGrid/ZxBasicFiles/GuSprites.zxbas"
		push hl
		ld h, b
		ld l, c
#line 417
		ld (RESTORE_STACK + 1), sp
		ld sp, hl
		ex de, hl
		pop de
		ld (hl), e
		inc h
		ld (hl), d
		inc h
		pop de
		ld (hl), e
		inc h
		ld (hl), d
		inc h
		pop de
		ld (hl), e
		inc h
		ld (hl), d
		inc h
		pop de
		ld (hl), e
		inc h
		ld (hl), d
RESTORE_STACK:
		ld sp, 0
		ld hl, CURRENT_DRAW_COUNT
		dec (hl)
		jp nz, RENDER_LOOP
		pop bc
END_RENDER:
		ld bc, (CURRENT_DRAW_OPS)
		ld de, (CURRENT_CLEAR_OPS)
		ld (CURRENT_DRAW_OPS), de
		ld (CURRENT_CLEAR_OPS), bc
		ld de, (CURRENT_DRAW_MAP)
		ld bc, (CURRENT_CLEAR_MAP)
		ld (CURRENT_DRAW_MAP), bc
		ld (CURRENT_CLEAR_MAP), de
		xor a
		push de
		ld (de), a
		inc de
		pop hl
		ld bc, 767
		ldir
		ld a, (CURRENT_CLEAR_COUNT)
		ld (CURRENT_DRAW_COUNT), a
		xor a
		ld (CURRENT_CLEAR_COUNT), a
		ld hl, DRAW_OPS_DATA
		ld (DRAW_OPS_DATA_INDEX), hl
#line 481
		ret
		ENDP
#line 698 "C:/Users/geniw/source/repos/BattleGrid/BattleGrid/ZxBasicFiles/GuSprites.zxbas"
		PROC
		LOCAL EXISTING_OP, REAL_EXISTING_OP
CREATE_DRAW_OP:
		push hl
		push bc
		ld l, c
		ld h, 0
		add hl, hl
		add hl, hl
		add hl, hl
		add hl, hl
		add hl, hl
#line 712
		ld c, b
		ld b, 0
		add hl, bc
		ld de, (CURRENT_DRAW_MAP)
		push hl
		add hl, de
		ld a, (hl)
		and a
		jp nz, EXISTING_OP
		ld a, (CURRENT_DRAW_COUNT)
		inc a
		ld (CURRENT_DRAW_COUNT), a
		ld (hl), a
		dec a
		ld l, a
		ld h, 0
		ld d, h
		ld e, l
#line 740
		add hl, hl
		add hl, hl
#line 741
		add hl, de
#line 746 "C:/Users/geniw/source/repos/BattleGrid/BattleGrid/ZxBasicFiles/GuSprites.zxbas"
		ld bc, (CURRENT_DRAW_OPS)
		add hl, bc
		pop de
		pop bc
		push de
		ld a, c
		and %00011000
		or  %01000000
		ld d, a
		ld a, c
		and %00000111
		rla
		rla
		rla
		rla
		rla
		or b
		ld e, a
		ld ixh, d
		ld ixl, e
		ld (hl), e
		inc hl
		ld (hl), d
		inc hl
#line 772
		ld de, (DRAW_OPS_DATA_INDEX)
		ld iyh, d
		ld iyl, e
		ld (hl), e
		inc hl
		ld (hl), d
		inc hl
#line 779
		ld (hl), 1
#line 785 "C:/Users/geniw/source/repos/BattleGrid/BattleGrid/ZxBasicFiles/GuSprites.zxbas"
		ld l, 8
		ld h, 0
		add hl, de
		ld (DRAW_OPS_DATA_INDEX), hl
		pop bc
		ld hl, (CURRENT_CLEAR_MAP)
		add hl, bc
		ld a, (CURRENT_CLEAR_COUNT)
		inc a
		ld (CURRENT_CLEAR_COUNT), a
		ld (hl), a
		dec a
		ld l, a
		ld h, 0
		ld d, h
		ld e, l
#line 811
		add hl, hl
		add hl, hl
#line 812
		add hl, de
#line 819 "C:/Users/geniw/source/repos/BattleGrid/BattleGrid/ZxBasicFiles/GuSprites.zxbas"
		ld de, (CURRENT_CLEAR_OPS)
		add hl, de
		ld d, ixh
		ld e, ixl
		ld (hl), e
		inc hl
		ld (hl), d
		inc hl
#line 827
		ex de, hl
		ld hl, TILE_MAP
		add hl, bc
		ld a, (hl)
		ld l, a
		ld h, 0
		add hl, hl
		add hl, hl
		add hl, hl
#line 839
		ld bc, (TILE_SET)
		add hl, bc
		ex de, hl
		ld (hl), e
		inc hl
		ld (hl), d
		inc hl
#line 845
		ld (hl), 2
#line 856 "C:/Users/geniw/source/repos/BattleGrid/BattleGrid/ZxBasicFiles/GuSprites.zxbas"
		pop hl
		ld b, iyh
		ld c, iyl
		ld a, (de)
		or (hl)
		ld (bc), a
		inc bc
		inc de
		inc hl
		ld a, (de)
		or (hl)
		ld (bc), a
		inc bc
		inc de
		inc hl
		ld a, (de)
		or (hl)
		ld (bc), a
		inc bc
		inc de
		inc hl
		ld a, (de)
		or (hl)
		ld (bc), a
		inc bc
		inc de
		inc hl
		ld a, (de)
		or (hl)
		ld (bc), a
		inc bc
		inc de
		inc hl
		ld a, (de)
		or (hl)
		ld (bc), a
		inc bc
		inc de
		inc hl
		ld a, (de)
		or (hl)
		ld (bc), a
		inc bc
		inc de
		inc hl
		ld a, (de)
		or (hl)
		ld (bc), a
#line 925 "C:/Users/geniw/source/repos/BattleGrid/BattleGrid/ZxBasicFiles/GuSprites.zxbas"
		ret
EXISTING_OP:
		dec a
		ld l, a
		ld h, 0
		ld d, h
		ld e, l
#line 938
		add hl, hl
		add hl, hl
#line 939
		add hl, de
#line 944 "C:/Users/geniw/source/repos/BattleGrid/BattleGrid/ZxBasicFiles/GuSprites.zxbas"
		ld bc, (CURRENT_DRAW_OPS)
		add hl, bc
		ld c, (hl)
		inc hl
		ld b, (hl)
		inc hl
#line 950
		push hl
		push bc
		ld e, (hl)
		inc hl
		ld d, (hl)
		inc hl
#line 955
		push de
		ld a, (hl)
		and 2
		jp z, REAL_EXISTING_OP
		ld (hl), 1
#line 972 "C:/Users/geniw/source/repos/BattleGrid/BattleGrid/ZxBasicFiles/GuSprites.zxbas"
		pop af
#line 986 "C:/Users/geniw/source/repos/BattleGrid/BattleGrid/ZxBasicFiles/GuSprites.zxbas"
		pop bc
		pop de
		pop hl
		push de
		push af
#line 995 "C:/Users/geniw/source/repos/BattleGrid/BattleGrid/ZxBasicFiles/GuSprites.zxbas"
		ld de, (CURRENT_CLEAR_MAP)
		add hl, de
		ld a, (CURRENT_CLEAR_COUNT)
		inc a
		ld (hl), a
		ld (CURRENT_CLEAR_COUNT), a
		dec a
		ld l, a
		ld h, 0
		ld d, h
		ld e, l
#line 1017
		add hl, hl
		add hl, hl
#line 1018
		add hl, de
#line 1023 "C:/Users/geniw/source/repos/BattleGrid/BattleGrid/ZxBasicFiles/GuSprites.zxbas"
		ld de, (CURRENT_CLEAR_OPS)
		add hl, de
		ld (hl), c
		inc hl
		ld (hl), b
		inc hl
#line 1028
		pop de
		ld (hl), e
		inc hl
		ld (hl), d
		inc hl
#line 1033
		ld (hl), 2
#line 1044 "C:/Users/geniw/source/repos/BattleGrid/BattleGrid/ZxBasicFiles/GuSprites.zxbas"
		pop hl
		push de
#line 1050 "C:/Users/geniw/source/repos/BattleGrid/BattleGrid/ZxBasicFiles/GuSprites.zxbas"
		ld de, (DRAW_OPS_DATA_INDEX)
		ld (hl), e
		inc hl
		ld (hl), d
		inc hl
#line 1056
		ld hl, 8
		add hl, de
		ld (DRAW_OPS_DATA_INDEX), hl
		pop bc
#line 1065 "C:/Users/geniw/source/repos/BattleGrid/BattleGrid/ZxBasicFiles/GuSprites.zxbas"
		pop hl
		pop hl
		ld a, (bc)
		or (hl)
		ld (de), a
		inc bc
		inc de
		inc hl
		ld a, (bc)
		or (hl)
		ld (de), a
		inc bc
		inc de
		inc hl
		ld a, (bc)
		or (hl)
		ld (de), a
		inc bc
		inc de
		inc hl
		ld a, (bc)
		or (hl)
		ld (de), a
		inc bc
		inc de
		inc hl
		ld a, (bc)
		or (hl)
		ld (de), a
		inc bc
		inc de
		inc hl
		ld a, (bc)
		or (hl)
		ld (de), a
		inc bc
		inc de
		inc hl
		ld a, (bc)
		or (hl)
		ld (de), a
		inc bc
		inc de
		inc hl
		ld a, (bc)
		or (hl)
		ld (de), a
#line 1125 "C:/Users/geniw/source/repos/BattleGrid/BattleGrid/ZxBasicFiles/GuSprites.zxbas"
		ret
REAL_EXISTING_OP:
		pop hl
		pop hl
		pop hl
		pop hl
		pop hl
#line 1138 "C:/Users/geniw/source/repos/BattleGrid/BattleGrid/ZxBasicFiles/GuSprites.zxbas"
		pop hl
		ex de, hl
		ld a, (de)
		or (hl)
		ld (hl),  a
		inc de
		inc hl
		ld a, (de)
		or (hl)
		ld (hl),  a
		inc de
		inc hl
		ld a, (de)
		or (hl)
		ld (hl),  a
		inc de
		inc hl
		ld a, (de)
		or (hl)
		ld (hl),  a
		inc de
		inc hl
		ld a, (de)
		or (hl)
		ld (hl),  a
		inc de
		inc hl
		ld a, (de)
		or (hl)
		ld (hl),  a
		inc de
		inc hl
		ld a, (de)
		or (hl)
		ld (hl),  a
		inc de
		inc hl
		ld a, (de)
		or (hl)
		ld (hl),  a
#line 1144
		ret
		ENDP
		PROC
		LOCAL LOOP
DRAW_SPRITE_COLUMN:
		LOOP
		push hl
		push bc
		ex af, af'
		call CREATE_DRAW_OP
		pop bc
		pop hl
		inc c
		ld de, 8
		add hl, de
		ex af, af'
		dec a
		jr nz, LOOP
		ret
		ENDP
		PROC
		LOCAL TEST_SHIFTS, HORIZONTAL_SHIFT, VERTICAL_SHIFT
DRAW_1x1_SPRITE:
		dec a
		add a, a
		ld l, a
		ld h, 0
		ld de, SPRITE_INDEX
		add hl, de
		ld e, (hl)
		inc hl
		ld d, (hl)
		inc hl
#line 1191
		ld a, b
		or c
		and 1
		jp nz, TEST_SHIFTS
		srl b
		srl c
		ld hl, 4
		add hl, de
		call CREATE_DRAW_OP
		ret
TEST_SHIFTS:
		ld a, c
		and 1
		jp z, HORIZONTAL_SHIFT
		ld a, b
		and 1
		jp z, VERTICAL_SHIFT
		srl b
		srl c
		ld hl, 16
		add hl, de
		push bc
		ld a, 2
		call DRAW_SPRITE_COLUMN
		ld a,2
		pop bc
		inc b
		call DRAW_SPRITE_COLUMN
		ret
HORIZONTAL_SHIFT:
		srl b
		srl c
		ld hl, 20
		add hl, de
		push bc
		push hl
		call CREATE_DRAW_OP
		pop hl
		pop bc
		inc b
		ld de, 16
		add hl, de
		call CREATE_DRAW_OP
		ret
VERTICAL_SHIFT:
		srl b
		srl c
		ex de, hl
		ld a, 2
		call DRAW_SPRITE_COLUMN
		ret
		ENDP
#line 1276 "C:/Users/geniw/source/repos/BattleGrid/BattleGrid/ZxBasicFiles/GuSprites.zxbas"
#line 1371 "C:/Users/geniw/source/repos/BattleGrid/BattleGrid/ZxBasicFiles/GuSprites.zxbas"
#line 1494 "C:/Users/geniw/source/repos/BattleGrid/BattleGrid/ZxBasicFiles/GuSprites.zxbas"
		PROC
SET_TILEMAP:
		ld de, TILE_SET
		ex de, hl
		ld (hl), e
		inc hl
		ld (hl), d
		inc hl
#line 1502
		ret
		ENDP
		PROC
SET_TILE:
		add hl, hl
		add hl, hl
		add hl, hl
		add hl, hl
		add hl, hl
#line 1511
		add hl, de
		ex de, hl
		ld hl, TILE_MAP
		add hl, de
		ld (hl), a
		ld hl, $5800
		add hl, de
		ld (hl), c
		ld l, a
		ld h, 0
		add hl, hl
		add hl, hl
		add hl, hl
#line 1530
		ld bc, (TILE_SET)
		add hl, bc
		ld a, d
		rla
		rla
		rla
		or %01000000
		ld d, a
		ld a, (hl)
		ld (de), a
		inc hl
		inc d
		ld a, (hl)
		ld (de), a
		inc hl
		inc d
		ld a, (hl)
		ld (de), a
		inc hl
		inc d
		ld a, (hl)
		ld (de), a
		inc hl
		inc d
		ld a, (hl)
		ld (de), a
		inc hl
		inc d
		ld a, (hl)
		ld (de), a
		inc hl
		inc d
		ld a, (hl)
		ld (de), a
		inc hl
		inc d
		ld a, (hl)
		ld (de), a
		ret
		ENDP
		PROC
SET_TILE_COLOR:
		add hl, hl
		add hl, hl
		add hl, hl
		add hl, hl
		add hl, hl
#line 1582
		add hl, de
		ex de, hl
		ld hl, $5800
		add hl, de
		ld (hl), c
		ret
		ENDP
		PROC
GET_TILE_COLOR:
		add hl, hl
		add hl, hl
		add hl, hl
		add hl, hl
		add hl, hl
#line 1598
		add hl, de
		ex de, hl
		ld hl, $5800
		add hl, de
		ld a, (hl)
		ret
		ENDP
		PROC
		LOCAL REAL_OP, NO_OP, END_SET
SET_TILE_CHECKED:
		add hl, hl
		add hl, hl
		add hl, hl
		add hl, hl
		add hl, hl
#line 1615
		add hl, de
		push hl
		ex de, hl
		ld hl, TILE_MAP
		add hl, de
		ld (hl), a
		ld hl, $5800
		add hl, de
		ld (hl), c
		ld l, a
		ld h, 0
		add hl, hl
		add hl, hl
		add hl, hl
#line 1636
		ld bc, (TILE_SET)
		add hl, bc
		push hl
		pop bc
		pop hl
		push hl
		push de
		push bc
		ld de, (CURRENT_DRAW_MAP)
		add hl, de
		ld a, (hl)
		and a
		jp z, NO_OP
REAL_OP:
		dec a
		ld l, a
		ld h, 0
		ld d, h
		ld e, l
#line 1665
		add hl, hl
		add hl, hl
#line 1666
		add hl, de
		ld bc, (CURRENT_DRAW_OPS)
		add hl, bc
		inc hl
		inc hl
		pop de
		ld (hl), e
		inc hl
		ld (hl), d
		inc hl
#line 1678
		ld a, 2
		ld (hl), a
		pop de
		pop de
		jp END_SET
NO_OP:
		pop hl
		pop de
		pop bc
		ld a, d
		rla
		rla
		rla
		or %01000000
		ld d, a
		ld a, (hl)
		ld (de), a
		inc hl
		inc d
		ld a, (hl)
		ld (de), a
		inc hl
		inc d
		ld a, (hl)
		ld (de), a
		inc hl
		inc d
		ld a, (hl)
		ld (de), a
		inc hl
		inc d
		ld a, (hl)
		ld (de), a
		inc hl
		inc d
		ld a, (hl)
		ld (de), a
		inc hl
		inc d
		ld a, (hl)
		ld (de), a
		inc hl
		inc d
		ld a, (hl)
		ld (de), a
END_SET:
		ret
		ENDP
		PROC
GET_TILE:
		add hl, hl
		add hl, hl
		add hl, hl
		add hl, hl
		add hl, hl
#line 1741
		add hl, de
		ex de, hl
		ld hl, TILE_MAP
		add hl, de
		ld a, (hl)
		ret
		ENDP
#line 1755 "C:/Users/geniw/source/repos/BattleGrid/BattleGrid/ZxBasicFiles/GuSprites.zxbas"
GSPRITES_LIB_END:
#line 1627 "C:/Users/geniw/source/repos/BattleGrid/BattleGrid/ZxBasicFiles/GuSprites.zxbas"
.LABEL._defines:
.LABEL._macros:
.LABEL._vars:
.LABEL._init:
	call _InstallHandler
	call _InitFastRnd
	ld a, 7
	call .core.INK
	xor a
	call .core.PAPER
	call .core.COPY_ATTR
	xor a
	call .core.BORDER
	ld a, 1
	call .core.BRIGHT
	call .core.COPY_ATTR
	call .core.CLS
.LABEL._funcs:
.LABEL._main:
	call _InitGraphics
	call _InitInterface
	call _DrawGrid
	call _InitLevel
.LABEL.__LABEL0:
	ld hl, 0
	ld (_frameCounter), hl
	call _UpdateCursor
	call _UpdateAliens
	call _UpdateTanks
	call _UpdateShips
	call _UpdateHangars
	call _UpdatePlayer
	call _UpdateFire
	call _TestCollisions
	ld a, 42
	push af
	ld a, (_playerX)
	push af
	ld a, (_playerSprite)
	call _Draw1x1Sprite
	ld a, (_activeShots)
	or a
	jp z, .LABEL.__LABEL3
	ld a, 1
	ld (_buc), a
	jp .LABEL.__LABEL4
.LABEL.__LABEL7:
	ld a, (_buc)
	ld l, a
	ld h, 0
	ex de, hl
	ld hl, _maskTable.__DATA__
	add hl, de
	dec hl
	ld a, (_activeShots)
	and (hl)
	jp z, .LABEL.__LABEL8
	ld hl, 3
	push hl
	ld a, (_buc)
	ld l, a
	dec hl
	push hl
	ld hl, _shots
	call .core.__ARRAY
	ld a, (hl)
	sub 255
	jp z, .LABEL.__LABEL11
	ld hl, 1
	push hl
	ld a, (_buc)
	ld l, a
	dec hl
	push hl
	ld hl, _shots
	call .core.__ARRAY
	ld a, (hl)
	push af
	ld hl, 0
	push hl
	ld a, (_buc)
	ld l, a
	dec hl
	push hl
	ld hl, _shots
	call .core.__ARRAY
	ld a, (hl)
	push af
	ld hl, 3
	push hl
	ld a, (_buc)
	ld l, a
	dec hl
	push hl
	ld hl, _shots
	call .core.__ARRAY
	ld a, (hl)
	add a, 8
	call _Draw1x1Sprite
	jp .LABEL.__LABEL8
.LABEL.__LABEL11:
	ld hl, 2
	push hl
	ld a, (_buc)
	ld l, a
	dec hl
	push hl
	ld hl, _shots
	call .core.__ARRAY
	ld a, (hl)
	ld h, 3
	call .core.__LTI8
	or a
	jp z, .LABEL.__LABEL13
	ld hl, 1
	push hl
	ld a, (_buc)
	ld l, a
	dec hl
	push hl
	ld hl, _shots
	call .core.__ARRAY
	ld a, (hl)
	and 1
	jp z, .LABEL.__LABEL15
	ld hl, 1
	push hl
	ld a, (_buc)
	ld l, a
	dec hl
	push hl
	ld hl, _shots
	call .core.__ARRAY
	ld a, (hl)
	push af
	ld hl, 0
	push hl
	ld a, (_buc)
	ld l, a
	dec hl
	push hl
	ld hl, _shots
	call .core.__ARRAY
	ld a, (hl)
	push af
	ld a, 4
	call _Draw1x1Sprite
	jp .LABEL.__LABEL8
.LABEL.__LABEL15:
	ld hl, 1
	push hl
	ld a, (_buc)
	ld l, a
	dec hl
	push hl
	ld hl, _shots
	call .core.__ARRAY
	ld a, (hl)
	push af
	ld hl, 0
	push hl
	ld a, (_buc)
	ld l, a
	dec hl
	push hl
	ld hl, _shots
	call .core.__ARRAY
	ld a, (hl)
	push af
	ld a, 5
	call _Draw1x1Sprite
.LABEL.__LABEL16:
	jp .LABEL.__LABEL8
.LABEL.__LABEL13:
	ld hl, 0
	push hl
	ld a, (_buc)
	ld l, a
	dec hl
	push hl
	ld hl, _shots
	call .core.__ARRAY
	ld a, (hl)
	and 1
	jp z, .LABEL.__LABEL17
	ld hl, 1
	push hl
	ld a, (_buc)
	ld l, a
	dec hl
	push hl
	ld hl, _shots
	call .core.__ARRAY
	ld a, (hl)
	push af
	ld hl, 0
	push hl
	ld a, (_buc)
	ld l, a
	dec hl
	push hl
	ld hl, _shots
	call .core.__ARRAY
	ld a, (hl)
	push af
	ld a, 6
	call _Draw1x1Sprite
	jp .LABEL.__LABEL8
.LABEL.__LABEL17:
	ld hl, 1
	push hl
	ld a, (_buc)
	ld l, a
	dec hl
	push hl
	ld hl, _shots
	call .core.__ARRAY
	ld a, (hl)
	push af
	ld hl, 0
	push hl
	ld a, (_buc)
	ld l, a
	dec hl
	push hl
	ld hl, _shots
	call .core.__ARRAY
	ld a, (hl)
	push af
	ld a, 7
	call _Draw1x1Sprite
.LABEL.__LABEL8:
	ld hl, _buc
	inc (hl)
.LABEL.__LABEL4:
	ld a, 3
	ld hl, (_buc - 1)
	cp h
	jp nc, .LABEL.__LABEL7
.LABEL.__LABEL3:
	ld a, (_cursorVisible)
	or a
	jp z, .LABEL.__LABEL20
	ld a, (_cursorY)
	add a, a
	add a, 4
	push af
	ld a, (_cursorX)
	add a, a
	add a, 2
	push af
	ld a, 12
	call _Draw1x1Sprite
.LABEL.__LABEL20:
	ld a, (_activeAliens)
	or a
	jp z, .LABEL.__LABEL22
	ld a, 1
	ld (_buc), a
	jp .LABEL.__LABEL23
.LABEL.__LABEL26:
	ld a, (_buc)
	ld l, a
	ld h, 0
	ex de, hl
	ld hl, _maskTable.__DATA__
	add hl, de
	dec hl
	ld a, (_activeAliens)
	and (hl)
	jp z, .LABEL.__LABEL27
	ld hl, 3
	push hl
	ld a, (_buc)
	ld l, a
	dec hl
	push hl
	ld hl, _aliens
	call .core.__ARRAY
	ld a, (hl)
	sub 255
	jp z, .LABEL.__LABEL30
	ld hl, 1
	push hl
	ld a, (_buc)
	ld l, a
	dec hl
	push hl
	ld hl, _aliens
	call .core.__ARRAY
	ld a, (hl)
	push af
	ld hl, 0
	push hl
	ld a, (_buc)
	ld l, a
	dec hl
	push hl
	ld hl, _aliens
	call .core.__ARRAY
	ld a, (hl)
	push af
	ld hl, 3
	push hl
	ld a, (_buc)
	ld l, a
	dec hl
	push hl
	ld hl, _aliens
	call .core.__ARRAY
	ld a, (hl)
	add a, 8
	call _Draw1x1Sprite
	jp .LABEL.__LABEL27
.LABEL.__LABEL30:
	ld hl, 0
	push hl
	ld a, (_buc)
	ld l, a
	dec hl
	push hl
	ld hl, _aliens
	call .core.__ARRAY
	ld a, (hl)
	and 1
	jp z, .LABEL.__LABEL32
	ld hl, 1
	push hl
	ld a, (_buc)
	ld l, a
	dec hl
	push hl
	ld hl, _aliens
	call .core.__ARRAY
	ld a, (hl)
	push af
	ld hl, 0
	push hl
	ld a, (_buc)
	ld l, a
	dec hl
	push hl
	ld hl, _aliens
	call .core.__ARRAY
	ld a, (hl)
	push af
	ld a, 14
	call _Draw1x1Sprite
	jp .LABEL.__LABEL27
.LABEL.__LABEL32:
	ld hl, 1
	push hl
	ld a, (_buc)
	ld l, a
	dec hl
	push hl
	ld hl, _aliens
	call .core.__ARRAY
	ld a, (hl)
	push af
	ld hl, 0
	push hl
	ld a, (_buc)
	ld l, a
	dec hl
	push hl
	ld hl, _aliens
	call .core.__ARRAY
	ld a, (hl)
	push af
	ld a, 13
	call _Draw1x1Sprite
.LABEL.__LABEL27:
	ld hl, _buc
	inc (hl)
.LABEL.__LABEL23:
	ld a, 4
	ld hl, (_buc - 1)
	cp h
	jp nc, .LABEL.__LABEL26
.LABEL.__LABEL22:
	ld a, (_activeTanks)
	or a
	jp z, .LABEL.__LABEL35
	ld a, 1
	ld (_buc), a
	jp .LABEL.__LABEL36
.LABEL.__LABEL39:
	ld a, (_buc)
	ld l, a
	ld h, 0
	ex de, hl
	ld hl, _maskTable.__DATA__
	add hl, de
	dec hl
	ld a, (_activeTanks)
	and (hl)
	jp z, .LABEL.__LABEL40
	ld hl, 3
	push hl
	ld a, (_buc)
	ld l, a
	dec hl
	push hl
	ld hl, _tanks
	call .core.__ARRAY
	ld a, (hl)
	sub 255
	jp z, .LABEL.__LABEL43
	ld hl, 1
	push hl
	ld a, (_buc)
	ld l, a
	dec hl
	push hl
	ld hl, _tanks
	call .core.__ARRAY
	ld a, (hl)
	push af
	ld hl, 0
	push hl
	ld a, (_buc)
	ld l, a
	dec hl
	push hl
	ld hl, _tanks
	call .core.__ARRAY
	ld a, (hl)
	push af
	ld hl, 3
	push hl
	ld a, (_buc)
	ld l, a
	dec hl
	push hl
	ld hl, _tanks
	call .core.__ARRAY
	ld a, (hl)
	add a, 8
	call _Draw1x1Sprite
	jp .LABEL.__LABEL40
.LABEL.__LABEL43:
	ld hl, 2
	push hl
	ld a, (_buc)
	ld l, a
	dec hl
	push hl
	ld hl, _tanks
	call .core.__ARRAY
	ld a, (hl)
	and 1
	jp z, .LABEL.__LABEL45
	ld hl, 1
	push hl
	ld a, (_buc)
	ld l, a
	dec hl
	push hl
	ld hl, _tanks
	call .core.__ARRAY
	ld a, (hl)
	push af
	ld hl, 0
	push hl
	ld a, (_buc)
	ld l, a
	dec hl
	push hl
	ld hl, _tanks
	call .core.__ARRAY
	ld a, (hl)
	push af
	ld a, 16
	call _Draw1x1Sprite
	jp .LABEL.__LABEL40
.LABEL.__LABEL45:
	ld hl, 1
	push hl
	ld a, (_buc)
	ld l, a
	dec hl
	push hl
	ld hl, _tanks
	call .core.__ARRAY
	ld a, (hl)
	push af
	ld hl, 0
	push hl
	ld a, (_buc)
	ld l, a
	dec hl
	push hl
	ld hl, _tanks
	call .core.__ARRAY
	ld a, (hl)
	push af
	ld a, 15
	call _Draw1x1Sprite
.LABEL.__LABEL40:
	ld hl, _buc
	inc (hl)
.LABEL.__LABEL36:
	ld a, 2
	ld hl, (_buc - 1)
	cp h
	jp nc, .LABEL.__LABEL39
.LABEL.__LABEL35:
	call _RenderFrame
	ld a, (_updateScore)
	or a
	jp z, .LABEL.__LABEL48
	xor a
	ld (_updateScore), a
	ld a, 6
	push af
	ld hl, (_score)
	push hl
	ld a, 13
	push af
	ld a, 24
	push af
	call _PrintPaddedNumber
.LABEL.__LABEL48:
	ld a, (_dead)
	or a
	jp z, .LABEL.__LABEL55
	ld a, (_dead)
	dec a
	jp nz, .LABEL.__LABEL51
	call _PlayDeathAlien
	jp .LABEL.__LABEL52
.LABEL.__LABEL51:
	ld a, (_dead)
	sub 2
	jp nz, .LABEL.__LABEL53
	call _PlayDeathTank
	jp .LABEL.__LABEL52
.LABEL.__LABEL53:
	call _PlayDeathShot
.LABEL.__LABEL52:
	ld hl, _lifes
	dec (hl)
	call _ShowLifes
	call _DrawGrid
	call _InitLevel
.LABEL.__LABEL55:
	ld de, 2
	ld hl, (_frameCounter)
	or a
	sbc hl, de
	jp c, .LABEL.__LABEL55
	jp .LABEL.__LABEL0
.core.__END_PROGRAM:
	di
	ld hl, (.core.__CALL_BACK__)
	ld sp, hl
	exx
	pop hl
	pop iy
	pop ix
	exx
	ei
	ret
_InitGFXLib:
#line 1764 "C:/Users/geniw/source/repos/BattleGrid/BattleGrid/ZxBasicFiles/GuSprites.zxbas"
		call INIT_GFX_LIB
#line 1768 "C:/Users/geniw/source/repos/BattleGrid/BattleGrid/ZxBasicFiles/GuSprites.zxbas"
_InitGFXLib__leave:
	ret
_RenderFrame:
#line 1784 "C:/Users/geniw/source/repos/BattleGrid/BattleGrid/ZxBasicFiles/GuSprites.zxbas"
		call RENDER_FRAME
#line 1788 "C:/Users/geniw/source/repos/BattleGrid/BattleGrid/ZxBasicFiles/GuSprites.zxbas"
_RenderFrame__leave:
	ret
_Draw1x1Sprite:
#line 1814 "C:/Users/geniw/source/repos/BattleGrid/BattleGrid/ZxBasicFiles/GuSprites.zxbas"
		exx
		pop hl
		exx
		pop bc
		pop de
		exx
		push hl
		exx
		push ix
		push iy
		ld c, d
		call DRAW_1x1_SPRITE
		pop iy
		pop ix
#line 1832 "C:/Users/geniw/source/repos/BattleGrid/BattleGrid/ZxBasicFiles/GuSprites.zxbas"
_Draw1x1Sprite__leave:
	ret
_SetTileset:
#line 1955 "C:/Users/geniw/source/repos/BattleGrid/BattleGrid/ZxBasicFiles/GuSprites.zxbas"
		call SET_TILEMAP
#line 1957 "C:/Users/geniw/source/repos/BattleGrid/BattleGrid/ZxBasicFiles/GuSprites.zxbas"
_SetTileset__leave:
	ret
_SetTile:
#line 1963 "C:/Users/geniw/source/repos/BattleGrid/BattleGrid/ZxBasicFiles/GuSprites.zxbas"
		exx
		pop hl
		exx
		pop bc
		pop de
		pop hl
		exx
		push hl
		exx
		call SET_TILE
#line 1974 "C:/Users/geniw/source/repos/BattleGrid/BattleGrid/ZxBasicFiles/GuSprites.zxbas"
_SetTile__leave:
	ret
_SetTileColor:
#line 1980 "C:/Users/geniw/source/repos/BattleGrid/BattleGrid/ZxBasicFiles/GuSprites.zxbas"
		exx
		pop hl
		exx
		pop de
		pop bc
		ex de, hl
		exx
		push hl
		exx
		call SET_TILE_COLOR
#line 1991 "C:/Users/geniw/source/repos/BattleGrid/BattleGrid/ZxBasicFiles/GuSprites.zxbas"
_SetTileColor__leave:
	ret
_SetTileChecked:
#line 1997 "C:/Users/geniw/source/repos/BattleGrid/BattleGrid/ZxBasicFiles/GuSprites.zxbas"
		exx
		pop hl
		exx
		pop bc
		pop de
		pop hl
		exx
		push hl
		exx
		call SET_TILE_CHECKED
#line 2008 "C:/Users/geniw/source/repos/BattleGrid/BattleGrid/ZxBasicFiles/GuSprites.zxbas"
_SetTileChecked__leave:
	ret
_GetTileColor:
#line 2027 "C:/Users/geniw/source/repos/BattleGrid/BattleGrid/ZxBasicFiles/GuSprites.zxbas"
		pop bc
		pop de
		push bc
		ex de, hl
		call GET_TILE_COLOR
#line 2033 "C:/Users/geniw/source/repos/BattleGrid/BattleGrid/ZxBasicFiles/GuSprites.zxbas"
_GetTileColor__leave:
	ret
_MultiKeys:
#line 43 "C:/zxbasic/src/arch/zx48k/library/keys.bas"
		ld a, h
		in a, (0FEh)
		cpl
		and l
#line 48 "C:/zxbasic/src/arch/zx48k/library/keys.bas"
_MultiKeys__leave:
	ret
_InitFastRnd:
#line 5 "C:/Users/geniw/source/repos/BattleGrid/BattleGrid/ZxBasicFiles/FastRND.zxbas"
		PROC
		LOCAL NOT_EMPTY_L, TEST_H, NOT_EMPTY_H, LOAD_SEED
		ld hl, ($5C78)
		ld a, l
		and $FF
		jp nz, NOT_EMPTY_L
		ld a, r
		ld l, a
		jp TEST_H
NOT_EMPTY_L:
		ld a, r
		xor l
		ld l, a
TEST_H:
		ld h, a
		and $FF
		jp nz, NOT_EMPTY_H
		ld a, r
		ld h, a
		jp LOAD_SEED
NOT_EMPTY_H:
		ld a, r
		xor h
		ld h, a
LOAD_SEED:
		ld      (FAST_RAND + 1),hl
		ENDP
#line 33 "C:/Users/geniw/source/repos/BattleGrid/BattleGrid/ZxBasicFiles/FastRND.zxbas"
_InitFastRnd__leave:
	ret
_FastRnd:
#line 39 "C:/Users/geniw/source/repos/BattleGrid/BattleGrid/ZxBasicFiles/FastRND.zxbas"
FAST_RAND:
		ld hl,$FFFF
		ld a,r
		ld d,a
		ld e,(hl)
		add hl,de
		add a,l
		xor h
		ld (FAST_RAND + 1),hl
#line 52 "C:/Users/geniw/source/repos/BattleGrid/BattleGrid/ZxBasicFiles/FastRND.zxbas"
_FastRnd__leave:
	ret
_PlayFX:
#line 6 "C:/Users/geniw/source/repos/BattleGrid/BattleGrid/ZxBasicFiles/BeepFX.zxbas"
play:
		ld hl,sfxData
		di
		push ix
		push iy
		ld b,0
		ld c,a
		add hl,bc
		add hl,bc
		ld e,(hl)
		inc hl
		ld d,(hl)
		push de
		pop ix
		ld a,(23624)
		rra
		rra
		rra
		and 7
readData:
		ld a,(ix+0)
		ld c,(ix+1)
		ld b,(ix+2)
		ld e,(ix+3)
		ld d,(ix+4)
		push de
		pop iy
		dec a
		jr z,sfxRoutineTone
		dec a
		jr z,sfxRoutineNoise
		dec a
		jr z,sfxRoutineSample
		pop iy
		pop ix
		ei
		ret
sfxRoutineSample:
		ex de,hl
sfxRS0:
		ld e,8
		ld d,(hl)
		inc hl
sfxRS1:
		ld a,(ix+5)
sfxRS2:
		dec a
		jr nz,sfxRS2
		rl d
		sbc a,a
		and 16
sfxRoutineSampleBorder:
		or 0
		out (254),a
		dec e
		jr nz,sfxRS1
		dec bc
		ld a,b
		or c
		jr nz,sfxRS0
		ld c,6
nextData:
		add ix,bc
		jr readData
sfxRoutineTone:
		ld e,(ix+5)
		ld d,(ix+6)
		ld a,(ix+9)
		ld (sfxRoutineToneDuty+1),a
		ld hl,0
sfxRT0:
		push bc
		push iy
		pop bc
sfxRT1:
		add hl,de
		ld a,h
sfxRoutineToneDuty:
		cp 0
		sbc a,a
		and 16
sfxRoutineToneBorder:
		push de
		push hl
		push af
		ld a, r
		and 3
		ld de, _borderColors.__DATA__
		ld l, a
		ld h, 0
		add hl, de
		ld l, (hl)
		pop af
		or l
		pop hl
		pop de
		out (254),a
		dec bc
		ld a,b
		or c
		jr nz,sfxRT1
		ld a,(sfxRoutineToneDuty+1)
		add a,(ix+10)
		ld (sfxRoutineToneDuty+1),a
		ld c,(ix+7)
		ld b,(ix+8)
		ex de,hl
		add hl,bc
		ex de,hl
		pop bc
		dec bc
		ld a,b
		or c
		jr nz,sfxRT0
		ld c,11
		jp nextData
sfxRoutineNoise:
		ld e,(ix+5)
		ld d,1
		ld h,d
		ld l,d
sfxRN0:
		push bc
		push iy
		pop bc
sfxRN1:
		ld a,(hl)
		and 16
sfxRoutineNoiseBorder:
		push de
		push hl
		push af
		ld a, r
		and 3
		ld de, _borderColors.__DATA__
		ld l, a
		ld h, 0
		add hl, de
		ld l, (hl)
		pop af
		or l
		pop hl
		pop de
		out (254),a
		dec d
		jr nz,sfxRN2
		ld d,e
		inc hl
		ld a,h
		and 31
		ld h,a
sfxRN2:
		dec bc
		ld a,b
		or c
		jr nz,sfxRN1
		ld a,e
		add a,(ix+6)
		ld e,a
		pop bc
		dec bc
		ld a,b
		or c
		jr nz,sfxRN0
		ld c,7
		jp nextData
sfxData:
SoundEffectsData:
		defw SoundEffect0Data
		defw SoundEffect1Data
		defw SoundEffect2Data
		defw SoundEffect3Data
		defw SoundEffect4Data
		defw SoundEffect5Data
		defw SoundEffect6Data
		defw SoundEffect7Data
		defw SoundEffect8Data
		defw SoundEffect9Data
SoundEffect0Data:
		defb 2
		defw 10,1000,3074
		defb 0
SoundEffect1Data:
		defb 1
		defw 10,150,3000,220,32576
		defb 0
SoundEffect2Data:
		defb 2
		defw 5,350,100
		defb 0
SoundEffect3Data:
		defb 1
		defw 10,250,5500,65486,128
		defb 2
		defw 5,500,25
		defb 0
SoundEffect4Data:
		defb 1
		defw 10,1000,8000,0,1664
		defb 2
		defw 2,1000,100
		defb 0
SoundEffect5Data:
		defb 2
		defw 10,400,261
		defb 0
SoundEffect6Data:
		defb 2
		defw 2,2000,64262
		defb 0
SoundEffect7Data:
		defb 2
		defw 1,2000,1
		defb 0
SoundEffect8Data:
		defb 1
		defw 10,750,6500,0,128
		defb 0
SoundEffect9Data:
		defb 1
		defw 10,200,6500,24,7388
		defb 2
		defw 5,500,6
		defb 0
#line 281 "C:/Users/geniw/source/repos/BattleGrid/BattleGrid/ZxBasicFiles/BeepFX.zxbas"
	ld a, (_borderColors.__DATA__ + -1)
	ld hl, (_borderColors.__DATA__ + 0 - 1)
	add a, h
_PlayFX__leave:
	ret
_BombEffect:
	ld a, 2
	ld (_borderColors.__DATA__ + 0), a
	xor a
	ld (_borderColors.__DATA__ + 1), a
	ld a, 2
	ld (_borderColors.__DATA__ + 2), a
	xor a
	ld (_borderColors.__DATA__ + 3), a
	call _PlayFX
	xor a
	call .core.BORDER
_BombEffect__leave:
	ret
_DeflectorEffect:
	ld a, 1
	ld (_borderColors.__DATA__ + 0), a
	ld a, 5
	ld (_borderColors.__DATA__ + 1), a
	ld a, 1
	ld (_borderColors.__DATA__ + 2), a
	ld a, 5
	ld (_borderColors.__DATA__ + 3), a
	ld a, 1
	call _PlayFX
	xor a
	call .core.BORDER
_DeflectorEffect__leave:
	ret
_ExplodeAnimEffect:
	ld a, 2
	ld (_borderColors.__DATA__ + 0), a
	ld a, 6
	ld (_borderColors.__DATA__ + 1), a
	ld a, 2
	ld (_borderColors.__DATA__ + 2), a
	ld a, 6
	ld (_borderColors.__DATA__ + 3), a
	ld a, 2
	call _PlayFX
	xor a
	call .core.BORDER
_ExplodeAnimEffect__leave:
	ret
_KilledAlienEffect:
	ld a, 4
	ld (_borderColors.__DATA__ + 0), a
	ld (_borderColors.__DATA__ + 1), a
	ld a, 2
	ld (_borderColors.__DATA__ + 2), a
	ld (_borderColors.__DATA__ + 3), a
	ld a, 3
	call _PlayFX
	xor a
	call .core.BORDER
_KilledAlienEffect__leave:
	ret
_AlienDeathEffect:
	ld a, 4
	ld (_borderColors.__DATA__ + 0), a
	ld (_borderColors.__DATA__ + 1), a
	ld a, 5
	ld (_borderColors.__DATA__ + 2), a
	ld (_borderColors.__DATA__ + 3), a
	ld a, 4
	call _PlayFX
	xor a
	call .core.BORDER
_AlienDeathEffect__leave:
	ret
_BuildTankDestroyedEffect:
	xor a
	ld (_borderColors.__DATA__ + 0), a
	ld (_borderColors.__DATA__ + 1), a
	ld a, 7
	ld (_borderColors.__DATA__ + 2), a
	ld (_borderColors.__DATA__ + 3), a
	ld a, 5
	call _PlayFX
	xor a
	call .core.BORDER
_BuildTankDestroyedEffect__leave:
	ret
_CrateDestroyedEffect:
	ld a, 3
	ld (_borderColors.__DATA__ + 0), a
	ld a, 6
	ld (_borderColors.__DATA__ + 1), a
	ld (_borderColors.__DATA__ + 2), a
	ld a, 2
	ld (_borderColors.__DATA__ + 3), a
	ld a, 6
	call _PlayFX
	xor a
	call .core.BORDER
_CrateDestroyedEffect__leave:
	ret
_MinePlacedEffect:
	ld a, 5
	ld (_borderColors.__DATA__ + 0), a
	ld a, 6
	ld (_borderColors.__DATA__ + 1), a
	ld (_borderColors.__DATA__ + 2), a
	ld a, 5
	ld (_borderColors.__DATA__ + 3), a
	ld a, 7
	call _PlayFX
	xor a
	call .core.BORDER
_MinePlacedEffect__leave:
	ret
_SATShotEffect:
	ld a, 4
	ld (_borderColors.__DATA__ + 0), a
	xor a
	ld (_borderColors.__DATA__ + 1), a
	ld (_borderColors.__DATA__ + 2), a
	ld a, 4
	ld (_borderColors.__DATA__ + 3), a
	ld a, 8
	call _PlayFX
	xor a
	call .core.BORDER
_SATShotEffect__leave:
	ret
_BrokenDeflectorEffect:
	ld a, 3
	ld (_borderColors.__DATA__ + 0), a
	ld a, 5
	ld (_borderColors.__DATA__ + 1), a
	ld (_borderColors.__DATA__ + 2), a
	ld a, 3
	ld (_borderColors.__DATA__ + 3), a
	ld a, 9
	call _PlayFX
	xor a
	call .core.BORDER
_BrokenDeflectorEffect__leave:
	ret
_DoPause:
	push ix
	ld ix, 0
	add ix, sp
	ld hl, 1
	dec hl
	ld (_frameCounter), hl
.LABEL.__LABEL57:
	ld l, (ix+4)
	ld h, (ix+5)
	ex de, hl
	ld hl, (_frameCounter)
	or a
	sbc hl, de
	jp c, .LABEL.__LABEL57
_DoPause__leave:
	ld sp, ix
	pop ix
	exx
	pop hl
	ex (sp), hl
	exx
	ret
_InstallHandler:
#line 16 "C:/Users/geniw/source/repos/BattleGrid/BattleGrid/ZxBasicFiles/InterruptInstaller.zxbas"
		ld hl, INT_HANDLER
		ld (_intHandlerAddress), hl
		di
		ld a, $fe
		ld i, a
		im 2
		ei
		ret
INT_HANDLER:
		push hl
		ld hl, (_frameCounter)
		inc hl
		ld (_frameCounter), hl
		pop hl
		ei
		ret
#line 37 "C:/Users/geniw/source/repos/BattleGrid/BattleGrid/ZxBasicFiles/InterruptInstaller.zxbas"
_InstallHandler__leave:
	ret
_AnyKey:
#line 43 "C:/Users/geniw/source/repos/BattleGrid/BattleGrid/ZxBasicFiles/InterruptInstaller.zxbas"
		ld a, $FE
		in a, (0FEh)
		ld b,a
		ld a, $F7
		in a, (0FEh)
		and b
		ld b,a
		ld a, $DF
		in a, (0FEh)
		and b
		ld b,a
		ld a, $BF
		in a, (0FEh)
		and b
		ld b,a
		ld a, $7F
		in a, (0FEh)
		and b
		cpl
#line 68 "C:/Users/geniw/source/repos/BattleGrid/BattleGrid/ZxBasicFiles/InterruptInstaller.zxbas"
_AnyKey__leave:
	ret
_printZoomedTile:
	push ix
	ld ix, 0
	add ix, sp
	ld hl, 0
	push hl
	push hl
	push hl
	inc sp
	ld l, (ix+8)
	ld h, (ix+9)
	add hl, hl
	add hl, hl
	add hl, hl
	ld de, _tileSet.__DATA__
	add hl, de
	ld (ix-5), l
	ld (ix-4), h
	ld a, (ix+7)
	ld (ix-3), a
	jp .LABEL.__LABEL59
.LABEL.__LABEL62:
	ld l, (ix-5)
	ld h, (ix-4)
	ld a, (hl)
	ld (ix-1), a
	ld a, (ix+5)
	ld (ix-2), a
	ld a, (ix-1)
	and 128
	jp z, .LABEL.__LABEL64
	ld a, (ix-3)
	ld l, a
	ld h, 0
	push hl
	ld a, (ix-2)
	ld l, a
	push hl
	ld a, (ix+11)
	ld l, a
	push hl
	ld a, 116
	call _SetTile
	jp .LABEL.__LABEL65
.LABEL.__LABEL64:
	ld a, (ix-3)
	ld l, a
	ld h, 0
	push hl
	ld a, (ix-2)
	ld l, a
	push hl
	ld a, (ix+11)
	ld l, a
	push hl
	xor a
	call _SetTile
.LABEL.__LABEL65:
	inc (ix-2)
	ld a, (ix-1)
	and 64
	jp z, .LABEL.__LABEL66
	ld a, (ix-3)
	ld l, a
	ld h, 0
	push hl
	ld a, (ix-2)
	ld l, a
	push hl
	ld a, (ix+11)
	ld l, a
	push hl
	ld a, 116
	call _SetTile
	jp .LABEL.__LABEL67
.LABEL.__LABEL66:
	ld a, (ix-3)
	ld l, a
	ld h, 0
	push hl
	ld a, (ix-2)
	ld l, a
	push hl
	ld a, (ix+11)
	ld l, a
	push hl
	xor a
	call _SetTile
.LABEL.__LABEL67:
	inc (ix-2)
	ld a, (ix-1)
	and 32
	jp z, .LABEL.__LABEL68
	ld a, (ix-3)
	ld l, a
	ld h, 0
	push hl
	ld a, (ix-2)
	ld l, a
	push hl
	ld a, (ix+11)
	ld l, a
	push hl
	ld a, 116
	call _SetTile
	jp .LABEL.__LABEL69
.LABEL.__LABEL68:
	ld a, (ix-3)
	ld l, a
	ld h, 0
	push hl
	ld a, (ix-2)
	ld l, a
	push hl
	ld a, (ix+11)
	ld l, a
	push hl
	xor a
	call _SetTile
.LABEL.__LABEL69:
	inc (ix-2)
	ld a, (ix-1)
	and 16
	jp z, .LABEL.__LABEL70
	ld a, (ix-3)
	ld l, a
	ld h, 0
	push hl
	ld a, (ix-2)
	ld l, a
	push hl
	ld a, (ix+11)
	ld l, a
	push hl
	ld a, 116
	call _SetTile
	jp .LABEL.__LABEL71
.LABEL.__LABEL70:
	ld a, (ix-3)
	ld l, a
	ld h, 0
	push hl
	ld a, (ix-2)
	ld l, a
	push hl
	ld a, (ix+11)
	ld l, a
	push hl
	xor a
	call _SetTile
.LABEL.__LABEL71:
	inc (ix-2)
	ld a, (ix-1)
	and 8
	jp z, .LABEL.__LABEL72
	ld a, (ix-3)
	ld l, a
	ld h, 0
	push hl
	ld a, (ix-2)
	ld l, a
	push hl
	ld a, (ix+11)
	ld l, a
	push hl
	ld a, 116
	call _SetTile
	jp .LABEL.__LABEL73
.LABEL.__LABEL72:
	ld a, (ix-3)
	ld l, a
	ld h, 0
	push hl
	ld a, (ix-2)
	ld l, a
	push hl
	ld a, (ix+11)
	ld l, a
	push hl
	xor a
	call _SetTile
.LABEL.__LABEL73:
	inc (ix-2)
	ld a, (ix-1)
	and 4
	jp z, .LABEL.__LABEL74
	ld a, (ix-3)
	ld l, a
	ld h, 0
	push hl
	ld a, (ix-2)
	ld l, a
	push hl
	ld a, (ix+11)
	ld l, a
	push hl
	ld a, 116
	call _SetTile
	jp .LABEL.__LABEL75
.LABEL.__LABEL74:
	ld a, (ix-3)
	ld l, a
	ld h, 0
	push hl
	ld a, (ix-2)
	ld l, a
	push hl
	ld a, (ix+11)
	ld l, a
	push hl
	xor a
	call _SetTile
.LABEL.__LABEL75:
	inc (ix-2)
	ld a, (ix-1)
	and 2
	jp z, .LABEL.__LABEL76
	ld a, (ix-3)
	ld l, a
	ld h, 0
	push hl
	ld a, (ix-2)
	ld l, a
	push hl
	ld a, (ix+11)
	ld l, a
	push hl
	ld a, 116
	call _SetTile
	jp .LABEL.__LABEL77
.LABEL.__LABEL76:
	ld a, (ix-3)
	ld l, a
	ld h, 0
	push hl
	ld a, (ix-2)
	ld l, a
	push hl
	ld a, (ix+11)
	ld l, a
	push hl
	xor a
	call _SetTile
.LABEL.__LABEL77:
	inc (ix-2)
	ld a, (ix-1)
	and 1
	jp z, .LABEL.__LABEL78
	ld a, (ix-3)
	ld l, a
	ld h, 0
	push hl
	ld a, (ix-2)
	ld l, a
	push hl
	ld a, (ix+11)
	ld l, a
	push hl
	ld a, 116
	call _SetTile
	jp .LABEL.__LABEL79
.LABEL.__LABEL78:
	ld a, (ix-3)
	ld l, a
	ld h, 0
	push hl
	ld a, (ix-2)
	ld l, a
	push hl
	ld a, (ix+11)
	ld l, a
	push hl
	xor a
	call _SetTile
.LABEL.__LABEL79:
	ld l, (ix-5)
	ld h, (ix-4)
	inc hl
	ld (ix-5), l
	ld (ix-4), h
	inc (ix-3)
.LABEL.__LABEL59:
	ld h, (ix-3)
	ld a, (ix+7)
	add a, 7
	cp h
	jp nc, .LABEL.__LABEL62
_printZoomedTile__leave:
	ld sp, ix
	pop ix
	exx
	pop hl
	pop bc
	pop bc
	pop bc
	ex (sp), hl
	exx
	ret
_ShowZoomedFrame:
	push ix
	ld ix, 0
	add ix, sp
	ld a, (ix+7)
	push af
	ld a, (ix+5)
	ld l, a
	ld h, 0
	push hl
	ld a, 4
	push af
	ld a, 3
	push af
	call _printZoomedTile
	ld a, (ix+7)
	push af
	ld a, (ix+5)
	inc a
	ld l, a
	ld h, 0
	push hl
	ld a, 4
	push af
	ld a, 11
	push af
	call _printZoomedTile
	ld a, (ix+7)
	push af
	ld a, (ix+5)
	add a, 2
	ld l, a
	ld h, 0
	push hl
	ld a, 12
	push af
	ld a, 3
	push af
	call _printZoomedTile
	ld a, (ix+7)
	push af
	ld a, (ix+5)
	add a, 3
	ld l, a
	ld h, 0
	push hl
	ld a, 12
	push af
	ld a, 11
	push af
	call _printZoomedTile
_ShowZoomedFrame__leave:
	ld sp, ix
	pop ix
	exx
	pop hl
	pop bc
	ex (sp), hl
	exx
	ret
_PlayDeathAlien:
	push ix
	ld ix, 0
	add ix, sp
	ld hl, 0
	push hl
	inc sp
	ld (ix-1), 1
	jp .LABEL.__LABEL80
.LABEL.__LABEL83:
	ld a, (ix-1)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld hl, _attribsAlienA
	call .core.__ARRAY
	ld a, (hl)
	push af
	ld a, 117
	push af
	call _ShowZoomedFrame
	inc (ix-1)
.LABEL.__LABEL80:
	ld a, 6
	cp (ix-1)
	jp nc, .LABEL.__LABEL83
	ld hl, 50
	push hl
	call _DoPause
	ld a, 68
	push af
	ld a, 121
	push af
	call _ShowZoomedFrame
	call _AlienDeathEffect
	ld hl, 5
	push hl
	call _DoPause
	ld (ix-1), 1
	jp .LABEL.__LABEL85
.LABEL.__LABEL88:
	ld a, (ix-1)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld hl, _attribsAlienB
	call .core.__ARRAY
	ld a, (hl)
	push af
	ld a, 121
	push af
	call _ShowZoomedFrame
	inc (ix-1)
.LABEL.__LABEL85:
	ld a, 4
	cp (ix-1)
	jp nc, .LABEL.__LABEL88
.LABEL.__LABEL90:
	ld de, 150
	ld hl, (_frameCounter)
	or a
	sbc hl, de
	jp c, .LABEL.__LABEL90
_PlayDeathAlien__leave:
	ld sp, ix
	pop ix
	ret
_PlayDeathShot:
	push ix
	ld ix, 0
	add ix, sp
	ld hl, 0
	push hl
	ld (ix-1), 125
	ld a, 6
	push af
	ld a, 125
	push af
	call _ShowZoomedFrame
	ld hl, 30
	push hl
	call _DoPause
	ld (ix-2), 1
	jp .LABEL.__LABEL92
.LABEL.__LABEL95:
	ld a, (ix-1)
	inc a
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld hl, _tileColors
	call .core.__ARRAY
	ld a, (hl)
	push af
	ld a, (ix-1)
	push af
	call _ShowZoomedFrame
	ld a, (ix-2)
	cp 3
	jp nc, .LABEL.__LABEL97
	ld hl, 7
	push hl
	call _DoPause
	jp .LABEL.__LABEL98
.LABEL.__LABEL97:
	call _ExplodeAnimEffect
.LABEL.__LABEL98:
	ld a, (ix-1)
	add a, 4
	ld (ix-1), a
	inc (ix-2)
.LABEL.__LABEL92:
	ld a, 7
	cp (ix-2)
	jp nc, .LABEL.__LABEL95
	ld (ix-2), 1
	jp .LABEL.__LABEL99
.LABEL.__LABEL102:
	ld a, (ix-2)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld hl, _colorsExp
	call .core.__ARRAY
	ld a, (hl)
	push af
	ld a, 149
	push af
	call _ShowZoomedFrame
	ld hl, 10
	push hl
	call _DoPause
	inc (ix-2)
.LABEL.__LABEL99:
	ld a, 4
	cp (ix-2)
	jp nc, .LABEL.__LABEL102
	ld hl, 100
	push hl
	call _DoPause
_PlayDeathShot__leave:
	ld sp, ix
	pop ix
	ret
_PlayDeathTank:
	ld a, 1
	push af
	ld a, 153
	push af
	call _ShowZoomedFrame
	ld hl, 10
	push hl
	call _DoPause
	ld a, 7
	push af
	ld a, 153
	push af
	call _ShowZoomedFrame
	ld hl, 10
	push hl
	call _DoPause
	ld a, 71
	push af
	ld a, 153
	push af
	call _ShowZoomedFrame
	ld hl, 30
	push hl
	call _DoPause
	ld a, 114
	push af
	ld a, 157
	push af
	call _ShowZoomedFrame
	call _ExplodeAnimEffect
	ld a, 71
	push af
	ld a, 153
	push af
	call _ShowZoomedFrame
	ld hl, 30
	push hl
	call _DoPause
	xor a
	push af
	ld a, 153
	push af
	call _ShowZoomedFrame
	ld hl, 10
	push hl
	call _DoPause
	call _PlayDeathShot
_PlayDeathTank__leave:
	ret
_GridObject:
	push ix
	ld ix, 0
	add ix, sp
	ld a, (ix+5)
	push af
	ld a, (ix+9)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld a, (ix+7)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld hl, _activeMap
	call .core.__ARRAY
	pop af
	ld (hl), a
	ld a, (ix+9)
	inc a
	ld l, a
	ld h, 0
	push hl
	ld a, (ix+7)
	ld l, a
	push hl
	ld a, (ix+5)
	inc a
	ld l, a
	dec hl
	push hl
	ld hl, _tileColors
	call .core.__ARRAY
	ld a, (hl)
	ld l, a
	ld h, 0
	push hl
	ld a, (ix+5)
	call _SetTileChecked
_GridObject__leave:
	ld sp, ix
	pop ix
	exx
	pop hl
	pop bc
	pop bc
	ex (sp), hl
	exx
	ret
_ClearGridCell:
	push ix
	ld ix, 0
	add ix, sp
	ld a, (ix+7)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld a, (ix+5)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld hl, _activeMap
	call .core.__ARRAY
	ld (hl), 0
	ld a, (ix+7)
	inc a
	ld l, a
	ld h, 0
	push hl
	ld a, (ix+5)
	ld l, a
	push hl
	ld hl, 71
	push hl
	ld a, 37
	call _SetTileChecked
_ClearGridCell__leave:
	ld sp, ix
	pop ix
	exx
	pop hl
	pop bc
	ex (sp), hl
	exx
	ret
_FindEmptyBit:
#line 246 "C:\Users\geniw\source\repos\BattleGrid\BattleGrid\ZxBasicFiles\BattleGrid.zxbas"
		ld b, 0
febloop:
		inc b
		srl a
		jp c, febloop
		ld a, b
#line 255 "C:\Users\geniw\source\repos\BattleGrid\BattleGrid\ZxBasicFiles\BattleGrid.zxbas"
_FindEmptyBit__leave:
	ret
_AddScore:
	push ix
	ld ix, 0
	add ix, sp
	ld l, (ix+4)
	ld h, (ix+5)
	ex de, hl
	ld hl, (_score)
	add hl, de
	ld (_score), hl
	ld a, 1
	ld (_updateScore), a
_AddScore__leave:
	ld sp, ix
	pop ix
	exx
	pop hl
	ex (sp), hl
	exx
	ret
_ShowLifes:
	push ix
	ld ix, 0
	add ix, sp
	ld hl, 0
	push hl
	inc sp
	ld (ix-1), 1
	jp .LABEL.__LABEL104
.LABEL.__LABEL107:
	ld a, (_lifes)
	sub (ix-1)
	ccf
	jp nc, .LABEL.__LABEL109
	ld hl, 22
	push hl
	ld a, (ix-1)
	add a, a
	add a, 22
	ld l, a
	push hl
	ld a, (_tileColors.__DATA__ + 161)
	ld l, a
	push hl
	ld a, 161
	call _SetTile
	jp .LABEL.__LABEL108
.LABEL.__LABEL109:
	ld hl, 22
	push hl
	ld a, (ix-1)
	add a, a
	add a, 22
	ld l, a
	push hl
	ld hl, 0
	push hl
	xor a
	call _SetTile
.LABEL.__LABEL108:
	inc (ix-1)
.LABEL.__LABEL104:
	ld a, 4
	cp (ix-1)
	jp nc, .LABEL.__LABEL107
_ShowLifes__leave:
	ld sp, ix
	pop ix
	ret
_InitGraphics:
	call _InitGFXLib
	ld hl, _tileSet.__DATA__
	call _SetTileset
_InitGraphics__leave:
	ret
_PrintPaddedNumber:
	push ix
	ld ix, 0
	add ix, sp
	ld hl, 0
	push hl
	push hl
	ld l, (ix+8)
	ld h, (ix+9)
	ld de, 0
	call .core.__U32TOFREG
	call .core.__STR_FAST
	ld d, h
	ld e, l
	ld bc, -4
	call .core.__PSTORE_STR2
	ld l, (ix-4)
	ld h, (ix-3)
	call .core.__STRLEN
	ld a, l
	ld (ix-1), a
	sub (ix+11)
	ccf
	jp nc, .LABEL.__LABEL111
	ld l, (ix-4)
	ld h, (ix-3)
	push hl
	ld hl, 0
	push hl
	ld a, (ix+11)
	ld l, a
	dec hl
	push hl
	xor a
	call .core.__STRSLICE
	ld d, h
	ld e, l
	ld bc, -4
	call .core.__PSTORE_STR2
	jp .LABEL.__LABEL112
.LABEL.__LABEL111:
	ld (ix-2), 1
	jp .LABEL.__LABEL113
.LABEL.__LABEL116:
	ld l, (ix-4)
	ld h, (ix-3)
	ex de, hl
	ld hl, .LABEL.__LABEL118
	call .core.__ADDSTR
	ld d, h
	ld e, l
	ld bc, -4
	call .core.__PSTORE_STR2
	inc (ix-2)
.LABEL.__LABEL113:
	ld h, (ix-2)
	ld a, (ix+11)
	sub (ix-1)
	cp h
	jp nc, .LABEL.__LABEL116
.LABEL.__LABEL112:
	ld (ix-1), 1
	jp .LABEL.__LABEL119
.LABEL.__LABEL122:
	ld a, (ix+7)
	ld l, a
	ld h, 0
	push hl
	ld a, (ix+5)
	add a, (ix-1)
	dec a
	ld l, a
	push hl
	ld l, (ix-4)
	ld h, (ix-3)
	push hl
	ld a, (ix-1)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld l, a
	ld h, 0
	dec hl
	push hl
	xor a
	call .core.__STRSLICE
	ld a, 1
	call .core.__ASC
	add a, 106
	sub 48
	inc a
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld hl, _tileColors
	call .core.__ARRAY
	ld a, (hl)
	ld l, a
	ld h, 0
	push hl
	ld l, (ix-4)
	ld h, (ix-3)
	push hl
	ld a, (ix-1)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld l, a
	ld h, 0
	dec hl
	push hl
	xor a
	call .core.__STRSLICE
	ld a, 1
	call .core.__ASC
	add a, 106
	sub 48
	call _SetTile
	inc (ix-1)
.LABEL.__LABEL119:
	ld a, (ix+11)
	cp (ix-1)
	jp nc, .LABEL.__LABEL122
_PrintPaddedNumber__leave:
	ex af, af'
	exx
	ld l, (ix-4)
	ld h, (ix-3)
	call .core.__MEM_FREE
	ex af, af'
	exx
	ld sp, ix
	pop ix
	exx
	pop hl
	pop bc
	pop bc
	pop bc
	ex (sp), hl
	exx
	ret
_InitInterface:
	push ix
	ld ix, 0
	add ix, sp
	ld hl, 0
	push hl
	inc sp
	ld (ix-1), 0
	jp .LABEL.__LABEL124
.LABEL.__LABEL127:
	ld hl, 2
	push hl
	ld a, (ix-1)
	srl a
	srl a
	add a, 23
	ld l, a
	ld h, 0
	push hl
	ld a, (ix-1)
	inc a
	inc a
	ld l, a
	dec hl
	push hl
	ld hl, _tileColors
	call .core.__ARRAY
	ld a, (hl)
	ld l, a
	ld h, 0
	push hl
	ld a, (ix-1)
	inc a
	call _SetTile
	ld hl, 3
	push hl
	ld a, (ix-1)
	srl a
	srl a
	add a, 23
	ld l, a
	ld h, 0
	push hl
	ld a, (ix-1)
	inc a
	add a, 2
	ld l, a
	dec hl
	push hl
	ld hl, _tileColors
	call .core.__ARRAY
	ld a, (hl)
	ld l, a
	ld h, 0
	push hl
	ld a, (ix-1)
	inc a
	inc a
	call _SetTile
	ld hl, 4
	push hl
	ld a, (ix-1)
	srl a
	srl a
	add a, 23
	ld l, a
	ld h, 0
	push hl
	ld a, (ix-1)
	inc a
	add a, 3
	ld l, a
	dec hl
	push hl
	ld hl, _tileColors
	call .core.__ARRAY
	ld a, (hl)
	ld l, a
	ld h, 0
	push hl
	ld a, (ix-1)
	inc a
	add a, 2
	call _SetTile
	ld hl, 5
	push hl
	ld a, (ix-1)
	srl a
	srl a
	add a, 23
	ld l, a
	ld h, 0
	push hl
	ld a, (ix-1)
	inc a
	add a, 4
	ld l, a
	dec hl
	push hl
	ld hl, _tileColors
	call .core.__ARRAY
	ld a, (hl)
	ld l, a
	ld h, 0
	push hl
	ld a, (ix-1)
	inc a
	add a, 3
	call _SetTile
	ld a, (ix-1)
	add a, 4
	ld (ix-1), a
.LABEL.__LABEL124:
	ld a, 31
	cp (ix-1)
	jp nc, .LABEL.__LABEL127
	ld hl, 16
	push hl
	ld hl, 24
	push hl
	ld a, (_tileColors.__DATA__ + 91)
	ld l, a
	push hl
	ld a, 91
	call _SetTile
	ld hl, 16
	push hl
	ld hl, 28
	push hl
	ld a, (_tileColors.__DATA__ + 92)
	ld l, a
	push hl
	ld a, 92
	call _SetTile
	ld hl, 18
	push hl
	ld hl, 24
	push hl
	ld a, (_tileColors.__DATA__ + 93)
	ld l, a
	push hl
	ld a, 93
	call _SetTile
	ld hl, 18
	push hl
	ld hl, 28
	push hl
	ld a, (_tileColors.__DATA__ + 94)
	ld l, a
	push hl
	ld a, 94
	call _SetTile
	ld hl, 20
	push hl
	ld hl, 24
	push hl
	ld a, (_tileColors.__DATA__ + 95)
	ld l, a
	push hl
	ld a, 95
	call _SetTile
	ld hl, 20
	push hl
	ld hl, 28
	push hl
	ld a, (_tileColors.__DATA__ + 96)
	ld l, a
	push hl
	ld a, 96
	call _SetTile
	ld a, 16
	push af
	ld a, 25
	call .core.PRINT_AT
	ld hl, .LABEL.__LABEL129
	xor a
	call .core.__PRINTSTR
	call .core.PRINT_EOL
	ld a, 16
	push af
	ld a, 29
	call .core.PRINT_AT
	ld hl, .LABEL.__LABEL129
	xor a
	call .core.__PRINTSTR
	call .core.PRINT_EOL
	ld a, 18
	push af
	ld a, 25
	call .core.PRINT_AT
	ld hl, .LABEL.__LABEL129
	xor a
	call .core.__PRINTSTR
	call .core.PRINT_EOL
	ld a, 18
	push af
	ld a, 29
	call .core.PRINT_AT
	ld hl, .LABEL.__LABEL129
	xor a
	call .core.__PRINTSTR
	call .core.PRINT_EOL
	ld a, 20
	push af
	ld a, 25
	call .core.PRINT_AT
	ld hl, .LABEL.__LABEL129
	xor a
	call .core.__PRINTSTR
	call .core.PRINT_EOL
	ld a, 20
	push af
	ld a, 29
	call .core.PRINT_AT
	ld hl, .LABEL.__LABEL129
	xor a
	call .core.__PRINTSTR
	call .core.PRINT_EOL
	ld a, 7
	push af
	ld a, 24
	call .core.PRINT_AT
	ld hl, .LABEL.__LABEL130
	xor a
	call .core.__PRINTSTR
	call .core.PRINT_EOL
	ld a, 10
	push af
	ld a, 24
	call .core.PRINT_AT
	ld hl, .LABEL.__LABEL131
	xor a
	call .core.__PRINTSTR
	call .core.PRINT_EOL
	ld a, 13
	push af
	ld a, 24
	call .core.PRINT_AT
	ld hl, .LABEL.__LABEL132
	xor a
	call .core.__PRINTSTR
	call .core.PRINT_EOL
_InitInterface__leave:
	ld sp, ix
	pop ix
	ret
_DrawGrid:
	push ix
	ld ix, 0
	add ix, sp
	ld hl, 0
	push hl
	push hl
	inc sp
	ld (ix-1), 1
	jp .LABEL.__LABEL133
.LABEL.__LABEL136:
	ld (ix-2), 1
	jp .LABEL.__LABEL138
.LABEL.__LABEL141:
	ld a, (ix-2)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld a, (ix-1)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld hl, _activeMap
	call .core.__ARRAY
	ld (hl), 0
	inc (ix-2)
.LABEL.__LABEL138:
	ld a, 20
	cp (ix-2)
	jp nc, .LABEL.__LABEL141
	inc (ix-1)
.LABEL.__LABEL133:
	ld a, 20
	cp (ix-1)
	jp nc, .LABEL.__LABEL136
	ld hl, 1
	push hl
	dec hl
	push hl
	ld a, (_tileColors.__DATA__ + 33)
	ld l, a
	push hl
	ld a, 33
	call _SetTile
	ld hl, 1
	push hl
	ld hl, 21
	push hl
	ld a, (_tileColors.__DATA__ + 39)
	ld l, a
	push hl
	ld a, 39
	call _SetTile
	ld hl, 22
	push hl
	ld hl, 0
	push hl
	ld a, (_tileColors.__DATA__ + 35)
	ld l, a
	push hl
	ld a, 35
	call _SetTile
	ld hl, 22
	push hl
	dec hl
	push hl
	ld a, (_tileColors.__DATA__ + 41)
	ld l, a
	push hl
	ld a, 41
	call _SetTile
	ld (ix-1), 1
	jp .LABEL.__LABEL143
.LABEL.__LABEL146:
	ld hl, 1
	push hl
	ld a, (ix-1)
	ld l, a
	push hl
	ld a, (_tileColors.__DATA__ + 36)
	ld l, a
	push hl
	ld a, 36
	call _SetTile
	ld hl, 22
	push hl
	ld a, (ix-1)
	ld l, a
	push hl
	ld a, (_tileColors.__DATA__ + 38)
	ld l, a
	push hl
	ld a, 38
	call _SetTile
	inc (ix-1)
.LABEL.__LABEL143:
	ld a, 20
	cp (ix-1)
	jp nc, .LABEL.__LABEL146
	ld (ix-2), 2
	jp .LABEL.__LABEL148
.LABEL.__LABEL151:
	ld a, (ix-2)
	ld l, a
	ld h, 0
	push hl
	ld hl, 0
	push hl
	ld a, (_tileColors.__DATA__ + 34)
	ld l, a
	push hl
	ld a, 34
	call _SetTile
	ld a, (ix-2)
	ld l, a
	ld h, 0
	push hl
	ld hl, 21
	push hl
	ld a, (_tileColors.__DATA__ + 39)
	ld l, a
	push hl
	ld a, 40
	call _SetTile
	ld a, (ix-2)
	sub 21
	jp nz, .LABEL.__LABEL153
	ld (ix-3), 70
	jp .LABEL.__LABEL154
.LABEL.__LABEL153:
	ld (ix-3), 71
.LABEL.__LABEL154:
	ld (ix-1), 1
	jp .LABEL.__LABEL155
.LABEL.__LABEL158:
	ld a, (ix-2)
	ld l, a
	ld h, 0
	push hl
	ld a, (ix-1)
	ld l, a
	push hl
	ld a, (ix-3)
	ld l, a
	push hl
	ld a, 37
	call _SetTile
	inc (ix-1)
.LABEL.__LABEL155:
	ld a, 20
	cp (ix-1)
	jp nc, .LABEL.__LABEL158
	inc (ix-2)
.LABEL.__LABEL148:
	ld a, 21
	cp (ix-2)
	jp nc, .LABEL.__LABEL151
_DrawGrid__leave:
	ld sp, ix
	pop ix
	ret
_InitLevel:
	push ix
	ld ix, 0
	add ix, sp
	ld hl, 0
	push hl
	inc sp
	xor a
	ld (_activeShots), a
	ld (_activeAliens), a
	ld (_activeTanks), a
	ld (_activeShips), a
	ld (_activeHangars), a
	ld (_activeTowers), a
	ld (_availableBlockers), a
	ld (_availableBombs), a
	ld (_availableMines), a
	ld (_availableChargedShots), a
	ld (_availableClearShots), a
	ld (_availableFireShots), a
	ld (_cursorTool), a
	ld hl, 16
	push hl
	ld hl, 26
	push hl
	ld a, (_tileColors.__DATA__ + 106)
	ld l, a
	push hl
	ld a, 106
	call _SetTile
	ld hl, 16
	push hl
	ld hl, 30
	push hl
	ld a, (_tileColors.__DATA__ + 106)
	ld l, a
	push hl
	ld a, 106
	call _SetTile
	ld hl, 18
	push hl
	ld hl, 26
	push hl
	ld a, (_tileColors.__DATA__ + 106)
	ld l, a
	push hl
	ld a, 106
	call _SetTile
	ld hl, 18
	push hl
	ld hl, 30
	push hl
	ld a, (_tileColors.__DATA__ + 106)
	ld l, a
	push hl
	ld a, 106
	call _SetTile
	ld hl, 20
	push hl
	ld hl, 26
	push hl
	ld a, (_tileColors.__DATA__ + 106)
	ld l, a
	push hl
	ld a, 106
	call _SetTile
	ld hl, 20
	push hl
	ld hl, 30
	push hl
	ld a, (_tileColors.__DATA__ + 106)
	ld l, a
	push hl
	ld a, 106
	call _SetTile
	ld a, 20
	ld (_playerX), a
	xor a
	ld (_dead), a
	ld a, 128
	ld (_tankProbability), a
	ld a, 2
	push af
	ld hl, 1
	push hl
	ld a, 8
	push af
	ld a, 24
	push af
	call _PrintPaddedNumber
	xor a
	ld (_updateScore), a
	ld a, 6
	push af
	ld hl, (_score)
	push hl
	ld a, 11
	push af
	ld a, 24
	push af
	call _PrintPaddedNumber
	ld a, 14
	push af
	ld a, 24
	call .core.PRINT_AT
	ld hl, .LABEL.__LABEL160
	xor a
	call .core.__PRINTSTR
	call .core.PRINT_EOL
	ld a, 255
	ld (_shots.__DATA__ + 3), a
	ld (_shots.__DATA__ + 7), a
	ld (_shots.__DATA__ + 11), a
	ld a, 3
	push af
	push af
	ld a, 90
	push af
	call _GridObject
	ld a, 3
	push af
	ld a, 17
	push af
	ld a, 90
	push af
	call _GridObject
	ld a, 10
	push af
	ld a, 5
	push af
	ld a, 42
	push af
	call _GridObject
	ld a, 1
	push af
	ld a, 5
	push af
	ld a, 43
	push af
	call _GridObject
	ld a, 1
	push af
	ld a, 3
	push af
	ld a, 44
	push af
	call _GridObject
	ld a, 10
	push af
	ld a, 15
	push af
	ld a, 45
	push af
	call _GridObject
	ld a, 3
	push af
	ld a, 1
	push af
	ld a, 42
	push af
	call _GridObject
	ld a, 10
	push af
	ld a, 1
	push af
	ld a, 43
	push af
	call _GridObject
	ld hl, 67
	push hl
	ld hl, 11
	push hl
	ld hl, 15
	call _SetTileColor
	ld hl, 67
	push hl
	ld hl, 4
	push hl
	ld hl, 1
	call _SetTileColor
	ld a, 11
	push af
	ld a, 9
	push af
	ld a, 46
	push af
	call _GridObject
	ld a, 11
	push af
	ld a, 10
	push af
	ld a, 47
	push af
	call _GridObject
	ld a, 11
	push af
	push af
	ld a, 47
	push af
	call _GridObject
	ld a, 11
	push af
	ld a, 12
	push af
	ld a, 48
	push af
	call _GridObject
	ld a, 13
	push af
	ld a, 9
	push af
	ld a, 52
	push af
	call _GridObject
	ld a, 13
	push af
	ld a, 10
	push af
	ld a, 53
	push af
	call _GridObject
	ld a, 13
	push af
	ld a, 11
	push af
	ld a, 53
	push af
	call _GridObject
	ld a, 13
	push af
	ld a, 12
	push af
	ld a, 54
	push af
	call _GridObject
	ld a, 14
	push af
	ld a, 9
	push af
	ld a, 55
	push af
	call _GridObject
	ld a, 14
	push af
	ld a, 10
	push af
	ld a, 56
	push af
	call _GridObject
	ld a, 14
	push af
	ld a, 11
	push af
	ld a, 56
	push af
	call _GridObject
	ld a, 14
	push af
	ld a, 12
	push af
	ld a, 57
	push af
	call _GridObject
	ld a, 15
	push af
	ld a, 9
	push af
	ld a, 58
	push af
	call _GridObject
	ld a, 15
	push af
	ld a, 10
	push af
	ld a, 59
	push af
	call _GridObject
	ld a, 15
	push af
	ld a, 11
	push af
	ld a, 59
	push af
	call _GridObject
	ld a, 15
	push af
	ld a, 12
	push af
	ld a, 60
	push af
	call _GridObject
	ld a, 14
	push af
	ld a, 1
	push af
	ld a, 61
	push af
	call _GridObject
	ld a, 14
	push af
	ld a, 2
	push af
	ld a, 62
	push af
	call _GridObject
	ld a, 14
	push af
	ld a, 3
	push af
	ld a, 63
	push af
	call _GridObject
	ld a, 15
	push af
	ld a, 1
	push af
	ld a, 64
	push af
	call _GridObject
	ld a, 15
	push af
	ld a, 2
	push af
	ld a, 65
	push af
	call _GridObject
	ld a, 15
	push af
	ld a, 3
	push af
	ld a, 66
	push af
	call _GridObject
	ld a, 17
	push af
	ld a, 1
	push af
	ld a, 69
	push af
	call _GridObject
	ld a, 17
	push af
	ld a, 2
	push af
	ld a, 70
	push af
	call _GridObject
	ld a, 17
	push af
	ld a, 6
	push af
	ld a, 67
	push af
	call _GridObject
	ld a, 18
	push af
	ld a, 6
	push af
	ld a, 68
	push af
	call _GridObject
	ld (ix-1), 13
	jp .LABEL.__LABEL161
.LABEL.__LABEL164:
	ld a, 14
	push af
	ld a, (ix-1)
	push af
	ld a, 86
	push af
	call _GridObject
	inc (ix-1)
.LABEL.__LABEL161:
	ld a, 19
	cp (ix-1)
	jp nc, .LABEL.__LABEL164
	ld a, 14
	push af
	ld a, 20
	push af
	ld a, 49
	push af
	call _GridObject
	ld a, 15
	push af
	ld a, 20
	push af
	ld a, 50
	push af
	call _GridObject
	ld a, 16
	push af
	ld a, 20
	push af
	ld a, 51
	push af
	call _GridObject
	ld a, 16
	push af
	ld a, 10
	push af
	ld a, 92
	push af
	call _GridObject
	ld a, 16
	push af
	ld a, 11
	push af
	ld a, 92
	push af
	call _GridObject
	ld a, 17
	push af
	ld a, 8
	push af
	ld a, 98
	push af
	call _GridObject
	ld a, 17
	push af
	ld a, 10
	push af
	ld a, 97
	push af
	call _GridObject
	ld a, 17
	push af
	ld a, 12
	push af
	ld a, 99
	push af
	call _GridObject
	ld a, 17
	push af
	ld a, 14
	push af
	ld a, 100
	push af
	call _GridObject
	ld a, 17
	push af
	ld a, 16
	push af
	ld a, 102
	push af
	call _GridObject
	ld a, 17
	push af
	ld a, 18
	push af
	ld a, 101
	push af
	call _GridObject
	ld a, 10
	push af
	push af
	ld a, 103
	push af
	call _GridObject
	ld hl, _activeTowers
	inc (hl)
	ld a, 7
	push af
	ld a, 20
	push af
	ld a, 71
	push af
	call _GridObject
	ld a, 6
	push af
	ld a, 13
	push af
	ld a, 83
	push af
	call _GridObject
	ld a, 6
	push af
	ld a, 14
	push af
	ld a, 83
	push af
	call _GridObject
	ld a, 6
	push af
	ld a, 15
	push af
	ld a, 83
	push af
	call _GridObject
	ld a, 5
	push af
	ld a, 9
	push af
	ld a, 74
	push af
	call _GridObject
	ld a, 5
	push af
	ld a, 10
	push af
	ld a, 75
	push af
	call _GridObject
	ld a, 5
	push af
	ld a, 11
	push af
	ld a, 76
	push af
	call _GridObject
	ld a, 6
	push af
	ld a, 9
	push af
	ld a, 77
	push af
	call _GridObject
	ld a, 6
	push af
	ld a, 10
	push af
	ld a, 78
	push af
	call _GridObject
	ld a, 6
	push af
	ld a, 11
	push af
	ld a, 79
	push af
	call _GridObject
	ld a, 7
	push af
	ld a, 9
	push af
	ld a, 80
	push af
	call _GridObject
	ld a, 7
	push af
	ld a, 10
	push af
	ld a, 81
	push af
	call _GridObject
	ld a, 7
	push af
	ld a, 11
	push af
	ld a, 82
	push af
	call _GridObject
	ld a, (_activeShips)
	call _FindEmptyBit
	ld (ix-1), a
	ld l, a
	ld h, 0
	ex de, hl
	ld hl, _maskTable.__DATA__
	add hl, de
	dec hl
	ld a, (_activeShips)
	or (hl)
	ld (_activeShips), a
	ld hl, 0
	push hl
	ld a, (ix-1)
	ld l, a
	dec hl
	push hl
	ld hl, _ships
	call .core.__ARRAY
	ld (hl), 7
	ld hl, 1
	push hl
	ld a, (ix-1)
	ld l, a
	dec hl
	push hl
	ld hl, _ships
	call .core.__ARRAY
	ld (hl), 1
	ld hl, 2
	push hl
	ld a, (ix-1)
	ld l, a
	dec hl
	push hl
	ld hl, _ships
	call .core.__ARRAY
	ld (hl), 3
	ld hl, 3
	push hl
	ld a, (ix-1)
	ld l, a
	dec hl
	push hl
	ld hl, _ships
	call .core.__ARRAY
	ld (hl), 50
	ld a, 1
	push af
	ld a, 7
	push af
	ld a, 104
	push af
	call _GridObject
	ld a, (_activeShips)
	call _FindEmptyBit
	ld (ix-1), a
	ld l, a
	ld h, 0
	ex de, hl
	ld hl, _maskTable.__DATA__
	add hl, de
	dec hl
	ld a, (_activeShips)
	or (hl)
	ld (_activeShips), a
	ld hl, 0
	push hl
	ld a, (ix-1)
	ld l, a
	dec hl
	push hl
	ld hl, _ships
	call .core.__ARRAY
	ld (hl), 13
	ld hl, 1
	push hl
	ld a, (ix-1)
	ld l, a
	dec hl
	push hl
	ld hl, _ships
	call .core.__ARRAY
	ld (hl), 1
	ld hl, 2
	push hl
	ld a, (ix-1)
	ld l, a
	dec hl
	push hl
	ld hl, _ships
	call .core.__ARRAY
	ld (hl), 1
	ld hl, 3
	push hl
	ld a, (ix-1)
	ld l, a
	dec hl
	push hl
	ld hl, _ships
	call .core.__ARRAY
	ld (hl), 50
	ld a, 1
	push af
	ld a, 13
	push af
	ld a, 104
	push af
	call _GridObject
	ld a, (_activeHangars)
	call _FindEmptyBit
	ld (ix-1), a
	ld l, a
	ld h, 0
	ex de, hl
	ld hl, _maskTable.__DATA__
	add hl, de
	dec hl
	ld a, (_activeHangars)
	or (hl)
	ld (_activeHangars), a
	ld hl, 0
	push hl
	ld a, (ix-1)
	ld l, a
	dec hl
	push hl
	ld hl, _hangars
	call .core.__ARRAY
	ld (hl), 10
	ld hl, 1
	push hl
	ld a, (ix-1)
	ld l, a
	dec hl
	push hl
	ld hl, _hangars
	call .core.__ARRAY
	ld (hl), 1
	ld hl, 2
	push hl
	ld a, (ix-1)
	ld l, a
	dec hl
	push hl
	ld hl, _hangars
	call .core.__ARRAY
	ld (hl), 2
	ld hl, 3
	push hl
	ld a, (ix-1)
	ld l, a
	dec hl
	push hl
	ld hl, _hangars
	call .core.__ARRAY
	ld (hl), 150
	ld a, 1
	push af
	ld a, 10
	push af
	ld a, 105
	push af
	call _GridObject
	call _ShowLifes
_InitLevel__leave:
	ld sp, ix
	pop ix
	ret
_UpdatePlayer:
	ld a, (_dead)
	or a
	jp nz, _UpdatePlayer__leave
	ld a, 1
	ld (_playerSprite), a
	ld hl, 65026
	call _MultiKeys
	or a
	jp z, .LABEL.__LABEL168
	ld a, 255
	ld (_dir), a
	ld a, 3
	ld (_playerSprite), a
	ld a, 2
	ld hl, (_playerX - 1)
	cp h
	jp nc, _UpdatePlayer__leave
	ld hl, _playerX
	dec (hl)
.LABEL.__LABEL171:
	jp _UpdatePlayer__leave
.LABEL.__LABEL168:
	ld hl, 65032
	call _MultiKeys
	or a
	jp z, .LABEL.__LABEL172
	ld a, 1
	ld (_dir), a
	ld a, 2
	ld (_playerSprite), a
	ld a, (_playerX)
	cp 40
	jp nc, _UpdatePlayer__leave
	ld hl, _playerX
	inc (hl)
.LABEL.__LABEL175:
	jp _UpdatePlayer__leave
.LABEL.__LABEL172:
	ld a, (_playerX)
	and 1
	jp nz, .LABEL.__LABEL176
	xor a
	ld (_dir), a
	ld a, 1
	ld (_playerSprite), a
	jp _UpdatePlayer__leave
.LABEL.__LABEL176:
	ld a, (_playerX)
	ld h, a
	ld a, (_dir)
	add a, h
	ld (_playerX), a
_UpdatePlayer__leave:
	ret
_CheckShotItems:
	push ix
	ld ix, 0
	add ix, sp
	ld hl, 0
	push hl
	push hl
	ld a, (ix+9)
	ld l, a
	dec hl
	push hl
	ld a, (ix+7)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld hl, _activeMap
	call .core.__ARRAY
	ld a, (hl)
	or a
	jp z, _CheckShotItems__leave
	ld a, (ix+9)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld a, (ix+7)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld hl, _activeMap
	call .core.__ARRAY
	ld a, (hl)
	ld (ix-4), a
	ld a, (ix+5)
	sub 255
	jp z, .LABEL.__LABEL181
	ld a, (ix-4)
	sub 90
	jp nz, .LABEL.__LABEL183
	ld a, (ix+5)
	ld l, a
	ld h, 0
	ex de, hl
	ld hl, _maskTable.__DATA__
	add hl, de
	dec hl
	ld a, (_activeShots)
	xor (hl)
	jp nz, .LABEL.__LABEL184
	ld a, 7
	ld (_activeShots), a
	ld hl, 0
	push hl
	ld a, (ix+5)
	ld l, a
	dec hl
	push hl
	ld hl, _shots
	call .core.__ARRAY
	ld a, (hl)
	ld (ix-1), a
	ld hl, 1
	push hl
	ld a, (ix+5)
	ld l, a
	dec hl
	push hl
	ld hl, _shots
	call .core.__ARRAY
	ld a, (hl)
	ld (ix-2), a
	ld hl, 2
	push hl
	ld a, (ix+5)
	ld l, a
	dec hl
	push hl
	ld hl, _shots
	call .core.__ARRAY
	ld a, (hl)
	ld (ix-3), a
	dec a
	jp nz, .LABEL.__LABEL186
	ld a, 1
	ld (_shots.__DATA__ + 2), a
	ld a, 3
	ld (_shots.__DATA__ + 6), a
	ld a, 4
	ld (_shots.__DATA__ + 10), a
	jp .LABEL.__LABEL187
.LABEL.__LABEL186:
	ld a, (ix-3)
	sub 2
	jp nz, .LABEL.__LABEL188
	ld a, 2
	ld (_shots.__DATA__ + 2), a
	ld a, 3
	ld (_shots.__DATA__ + 6), a
	ld a, 4
	ld (_shots.__DATA__ + 10), a
	jp .LABEL.__LABEL187
.LABEL.__LABEL188:
	ld a, (ix-3)
	sub 3
	jp nz, .LABEL.__LABEL190
	ld a, 1
	ld (_shots.__DATA__ + 2), a
	ld a, 2
	ld (_shots.__DATA__ + 6), a
	ld a, 3
	ld (_shots.__DATA__ + 10), a
	jp .LABEL.__LABEL187
.LABEL.__LABEL190:
	ld a, (ix-3)
	sub 4
	jp nz, .LABEL.__LABEL187
	ld a, 1
	ld (_shots.__DATA__ + 2), a
	ld a, 2
	ld (_shots.__DATA__ + 6), a
	ld a, 4
	ld (_shots.__DATA__ + 10), a
.LABEL.__LABEL187:
	ld a, (ix-1)
	ld (_shots.__DATA__ + 0), a
	ld (_shots.__DATA__ + 4), a
	ld (_shots.__DATA__ + 8), a
	ld a, (ix-2)
	ld (_shots.__DATA__ + 1), a
	ld (_shots.__DATA__ + 5), a
	ld (_shots.__DATA__ + 9), a
	jp _CheckShotItems__leave
.LABEL.__LABEL184:
	ld hl, 3
	push hl
	ld a, (ix+5)
	ld l, a
	dec hl
	push hl
	ld hl, _shots
	call .core.__ARRAY
	ld (hl), 0
.LABEL.__LABEL185:
	jp _CheckShotItems__leave
.LABEL.__LABEL183:
	ld a, (ix-4)
	sub 42
	ccf
	jp nc, .LABEL.__LABEL195
	ld a, 45
	sub (ix-4)
	ccf
	jp nc, .LABEL.__LABEL195
	ld a, (ix-4)
	sub 42
	jp nz, .LABEL.__LABEL198
	ld hl, 2
	push hl
	ld a, (ix+5)
	ld l, a
	dec hl
	push hl
	ld hl, _shots
	call .core.__ARRAY
	ld a, (hl)
	ld l, a
	add a, a
	sbc a, a
	ld h, a
	ex de, hl
	ld hl, (_reflectDirsA.__DATA__) & 0xFFFF
	add hl, de
	dec hl
	ld a, (hl)
	push af
	ld hl, 2
	push hl
	ld a, (ix+5)
	ld l, a
	dec hl
	push hl
	ld hl, _shots
	call .core.__ARRAY
	pop af
	ld (hl), a
	jp .LABEL.__LABEL199
.LABEL.__LABEL198:
	ld a, (ix-4)
	sub 43
	jp nz, .LABEL.__LABEL200
	ld hl, 2
	push hl
	ld a, (ix+5)
	ld l, a
	dec hl
	push hl
	ld hl, _shots
	call .core.__ARRAY
	ld a, (hl)
	ld l, a
	add a, a
	sbc a, a
	ld h, a
	ex de, hl
	ld hl, (_reflectDirsB.__DATA__) & 0xFFFF
	add hl, de
	dec hl
	ld a, (hl)
	push af
	ld hl, 2
	push hl
	ld a, (ix+5)
	ld l, a
	dec hl
	push hl
	ld hl, _shots
	call .core.__ARRAY
	pop af
	ld (hl), a
	jp .LABEL.__LABEL199
.LABEL.__LABEL200:
	ld a, (ix-4)
	sub 44
	jp nz, .LABEL.__LABEL202
	ld hl, 2
	push hl
	ld a, (ix+5)
	ld l, a
	dec hl
	push hl
	ld hl, _shots
	call .core.__ARRAY
	ld a, (hl)
	ld l, a
	add a, a
	sbc a, a
	ld h, a
	ex de, hl
	ld hl, (_reflectDirsC.__DATA__) & 0xFFFF
	add hl, de
	dec hl
	ld a, (hl)
	push af
	ld hl, 2
	push hl
	ld a, (ix+5)
	ld l, a
	dec hl
	push hl
	ld hl, _shots
	call .core.__ARRAY
	pop af
	ld (hl), a
	jp .LABEL.__LABEL199
.LABEL.__LABEL202:
	ld hl, 2
	push hl
	ld a, (ix+5)
	ld l, a
	dec hl
	push hl
	ld hl, _shots
	call .core.__ARRAY
	ld a, (hl)
	ld l, a
	add a, a
	sbc a, a
	ld h, a
	ex de, hl
	ld hl, (_reflectDirsD.__DATA__) & 0xFFFF
	add hl, de
	dec hl
	ld a, (hl)
	push af
	ld hl, 2
	push hl
	ld a, (ix+5)
	ld l, a
	dec hl
	push hl
	ld hl, _shots
	call .core.__ARRAY
	pop af
	ld (hl), a
.LABEL.__LABEL199:
	ld a, (ix+9)
	inc a
	ld l, a
	ld h, 0
	push hl
	ld a, (ix+7)
	ld l, a
	call _GetTileColor
	sub 67
	jp nz, _CheckShotItems__leave
	call _BrokenDeflectorEffect
	ld a, (ix+9)
	push af
	ld a, (ix+7)
	push af
	call _ClearGridCell
.LABEL.__LABEL205:
	jp _CheckShotItems__leave
.LABEL.__LABEL195:
	ld a, (ix-4)
	sub 46
	ccf
	jp nc, .LABEL.__LABEL207
	ld a, 82
	sub (ix-4)
	ccf
	jp nc, .LABEL.__LABEL207
	ld hl, 3
	push hl
	ld a, (ix+5)
	ld l, a
	dec hl
	push hl
	ld hl, _shots
	call .core.__ARRAY
	ld (hl), 0
	jp _CheckShotItems__leave
.LABEL.__LABEL207:
	ld a, (ix-4)
	sub 86
	ccf
	jp nc, .LABEL.__LABEL211
	ld a, 89
	sub (ix-4)
	ccf
	jp nc, .LABEL.__LABEL211
	ld hl, 3
	push hl
	ld a, (ix+5)
	ld l, a
	dec hl
	push hl
	ld hl, _shots
	call .core.__ARRAY
	ld (hl), 0
	jp _CheckShotItems__leave
.LABEL.__LABEL211:
	ld a, (ix-4)
	sub 97
	ccf
	jp nc, .LABEL.__LABEL181
	ld a, 102
	sub (ix-4)
	ccf
	jp nc, .LABEL.__LABEL181
	ld a, (ix+9)
	push af
	ld a, (ix+7)
	push af
	call _ClearGridCell
	call _CrateDestroyedEffect
	ld hl, 3
	push hl
	ld a, (ix+5)
	ld l, a
	dec hl
	push hl
	ld hl, _shots
	call .core.__ARRAY
	ld (hl), 0
	ld hl, 5
	push hl
	call _AddScore
	ld a, (ix-4)
	sub 97
	jp nz, .LABEL.__LABEL218
	ld hl, _availableMines
	inc (hl)
	ld hl, 16
	push hl
	ld hl, 30
	push hl
	ld a, (_availableMines)
	add a, 106
	inc a
	ld l, a
	dec hl
	push hl
	ld hl, _tileColors
	call .core.__ARRAY
	ld a, (hl)
	ld l, a
	ld h, 0
	push hl
	ld a, (_availableMines)
	add a, 106
	call _SetTile
	jp _CheckShotItems__leave
.LABEL.__LABEL218:
	ld a, (ix-4)
	sub 99
	jp nz, .LABEL.__LABEL220
	ld hl, _availableBombs
	inc (hl)
	ld hl, 18
	push hl
	ld hl, 26
	push hl
	ld a, (_availableBombs)
	add a, 106
	inc a
	ld l, a
	dec hl
	push hl
	ld hl, _tileColors
	call .core.__ARRAY
	ld a, (hl)
	ld l, a
	ld h, 0
	push hl
	ld a, (_availableBombs)
	add a, 106
	call _SetTile
	jp _CheckShotItems__leave
.LABEL.__LABEL220:
	ld a, (ix-4)
	sub 98
	jp nz, .LABEL.__LABEL222
	ld hl, _availableBlockers
	inc (hl)
	ld hl, 16
	push hl
	ld hl, 26
	push hl
	ld a, (_availableBlockers)
	add a, 106
	inc a
	ld l, a
	dec hl
	push hl
	ld hl, _tileColors
	call .core.__ARRAY
	ld a, (hl)
	ld l, a
	ld h, 0
	push hl
	ld a, (_availableBlockers)
	add a, 106
	call _SetTile
	jp _CheckShotItems__leave
.LABEL.__LABEL222:
	ld a, (ix-4)
	sub 100
	jp nz, .LABEL.__LABEL224
	ld hl, _availableChargedShots
	inc (hl)
	ld hl, 18
	push hl
	ld hl, 30
	push hl
	ld a, (_availableChargedShots)
	add a, 106
	inc a
	ld l, a
	dec hl
	push hl
	ld hl, _tileColors
	call .core.__ARRAY
	ld a, (hl)
	ld l, a
	ld h, 0
	push hl
	ld a, (_availableChargedShots)
	add a, 106
	call _SetTile
	jp _CheckShotItems__leave
.LABEL.__LABEL224:
	ld a, (ix-4)
	sub 101
	jp nz, .LABEL.__LABEL226
	ld hl, _availableFireShots
	inc (hl)
	ld hl, 20
	push hl
	ld hl, 26
	push hl
	ld a, (_availableFireShots)
	add a, 106
	inc a
	ld l, a
	dec hl
	push hl
	ld hl, _tileColors
	call .core.__ARRAY
	ld a, (hl)
	ld l, a
	ld h, 0
	push hl
	ld a, (_availableFireShots)
	add a, 106
	call _SetTile
	jp _CheckShotItems__leave
.LABEL.__LABEL226:
	ld a, (ix-4)
	sub 102
	jp nz, _CheckShotItems__leave
	ld hl, _availableClearShots
	inc (hl)
	ld hl, 20
	push hl
	ld hl, 30
	push hl
	ld a, (_availableClearShots)
	add a, 106
	inc a
	ld l, a
	dec hl
	push hl
	ld hl, _tileColors
	call .core.__ARRAY
	ld a, (hl)
	ld l, a
	ld h, 0
	push hl
	ld a, (_availableClearShots)
	add a, 106
	call _SetTile
.LABEL.__LABEL219:
	jp _CheckShotItems__leave
.LABEL.__LABEL181:
	ld a, (ix-4)
	sub 103
	jp nz, .LABEL.__LABEL231
	ld a, (ix+9)
	push af
	ld a, (ix+7)
	push af
	call _ClearGridCell
	ld a, (ix+5)
	sub 255
	jp z, .LABEL.__LABEL233
	call _BuildTankDestroyedEffect
	ld hl, 3
	push hl
	ld a, (ix+5)
	ld l, a
	dec hl
	push hl
	ld hl, _shots
	call .core.__ARRAY
	ld (hl), 0
.LABEL.__LABEL233:
	ld hl, _activeTowers
	dec (hl)
	ld a, (_activeTowers)
	or a
	jp nz, _CheckShotItems__leave
	ld (ix-1), 1
	jp .LABEL.__LABEL236
.LABEL.__LABEL239:
	ld (ix-2), 1
	jp .LABEL.__LABEL241
.LABEL.__LABEL244:
	ld a, (ix-2)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld a, (ix-1)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld hl, _activeMap
	call .core.__ARRAY
	ld a, (hl)
	sub 86
	jp nz, .LABEL.__LABEL245
	ld a, (ix-2)
	push af
	ld a, (ix-1)
	push af
	call _ClearGridCell
.LABEL.__LABEL245:
	inc (ix-2)
.LABEL.__LABEL241:
	ld a, 20
	cp (ix-2)
	jp nc, .LABEL.__LABEL244
	inc (ix-1)
.LABEL.__LABEL236:
	ld a, 20
	cp (ix-1)
	jp nc, .LABEL.__LABEL239
.LABEL.__LABEL235:
	jp _CheckShotItems__leave
.LABEL.__LABEL231:
	ld a, (ix-4)
	sub 104
	jp nz, .LABEL.__LABEL249
	ld a, (ix+5)
	sub 255
	jp z, .LABEL.__LABEL251
	ld a, (ix+9)
	push af
	ld a, (ix+7)
	push af
	call _ClearGridCell
	ld hl, 3
	push hl
	ld a, (ix+5)
	ld l, a
	dec hl
	push hl
	ld hl, _shots
	call .core.__ARRAY
	ld (hl), 0
	call _BuildTankDestroyedEffect
.LABEL.__LABEL251:
	ld (ix-4), 1
	jp .LABEL.__LABEL252
.LABEL.__LABEL255:
	ld hl, 0
	push hl
	ld a, (ix-4)
	ld l, a
	dec hl
	push hl
	ld hl, _ships
	call .core.__ARRAY
	ld a, (hl)
	sub (ix+7)
	jp nz, .LABEL.__LABEL256
	ld hl, 1
	push hl
	ld a, (ix-4)
	ld l, a
	dec hl
	push hl
	ld hl, _ships
	call .core.__ARRAY
	ld a, (hl)
	sub (ix+9)
	jp nz, .LABEL.__LABEL256
	ld a, (ix-4)
	ld l, a
	ld h, 0
	ex de, hl
	ld hl, _maskTable.__DATA__
	add hl, de
	dec hl
	ld a, (_activeShips)
	xor (hl)
	ld (_activeShips), a
	ld hl, 50
	push hl
	call _AddScore
	jp _CheckShotItems__leave
.LABEL.__LABEL256:
	inc (ix-4)
.LABEL.__LABEL252:
	ld a, 4
	cp (ix-4)
	jp nc, .LABEL.__LABEL255
.LABEL.__LABEL249:
	ld a, (ix-4)
	sub 105
	jp nz, _CheckShotItems__leave
	ld a, (ix+9)
	push af
	ld a, (ix+7)
	push af
	call _ClearGridCell
	ld a, (ix+5)
	sub 255
	jp z, .LABEL.__LABEL264
	ld hl, 3
	push hl
	ld a, (ix+5)
	ld l, a
	dec hl
	push hl
	ld hl, _shots
	call .core.__ARRAY
	ld (hl), 0
	call _BuildTankDestroyedEffect
.LABEL.__LABEL264:
	ld (ix-4), 1
	jp .LABEL.__LABEL265
.LABEL.__LABEL268:
	ld hl, 0
	push hl
	ld a, (ix-4)
	ld l, a
	dec hl
	push hl
	ld hl, _hangars
	call .core.__ARRAY
	ld a, (hl)
	sub (ix+7)
	jp nz, .LABEL.__LABEL269
	ld hl, 1
	push hl
	ld a, (ix-4)
	ld l, a
	dec hl
	push hl
	ld hl, _hangars
	call .core.__ARRAY
	ld a, (hl)
	sub (ix+9)
	jp nz, .LABEL.__LABEL269
	ld a, (ix-4)
	ld l, a
	ld h, 0
	ex de, hl
	ld hl, _maskTable.__DATA__
	add hl, de
	dec hl
	ld a, (_activeHangars)
	xor (hl)
	ld (_activeHangars), a
	ld hl, 75
	push hl
	call _AddScore
	jp _CheckShotItems__leave
.LABEL.__LABEL269:
	inc (ix-4)
.LABEL.__LABEL265:
	ld a, 2
	cp (ix-4)
	jp nc, .LABEL.__LABEL268
_CheckShotItems__leave:
	ld sp, ix
	pop ix
	exx
	pop hl
	pop bc
	pop bc
	ex (sp), hl
	exx
	ret
_UpdateFire:
	push ix
	ld ix, 0
	add ix, sp
	ld hl, -7
	add hl, sp
	ld sp, hl
	ld (hl), 0
	ld bc, 6
	ld d, h
	ld e, l
	inc de
	ldir
	ld a, (_activeShots)
	or a
	jp nz, .LABEL.__LABEL274
	ld a, (_dir)
	or a
	jp nz, _UpdateFire__leave
	ld hl, 65028
	call _MultiKeys
	or a
	jp z, _UpdateFire__leave
	ld a, (_playerX)
	ld (_shots.__DATA__ + 0), a
	ld a, 40
	ld (_shots.__DATA__ + 1), a
	ld a, 1
	ld (_shots.__DATA__ + 2), a
	ld (_activeShots), a
.LABEL.__LABEL277:
	jp _UpdateFire__leave
.LABEL.__LABEL274:
	ld a, (_activeShots)
	ld (ix-7), a
	ld (ix-1), 1
	jp .LABEL.__LABEL280
.LABEL.__LABEL283:
	ld a, (ix-1)
	ld l, a
	add a, a
	sbc a, a
	ld h, a
	ex de, hl
	ld hl, (_maskTable.__DATA__) & 0xFFFF
	add hl, de
	dec hl
	ld a, (hl)
	ld (ix-6), a
	ld a, (ix-7)
	and (ix-6)
	jp z, .LABEL.__LABEL284
	ld hl, 3
	push hl
	ld a, (ix-1)
	ld l, a
	add a, a
	sbc a, a
	ld h, a
	dec hl
	push hl
	ld hl, _shots
	call .core.__ARRAY
	ld a, (hl)
	ld (ix-5), a
	sub 255
	jp z, .LABEL.__LABEL287
	inc (ix-5)
	ld a, (ix-5)
	sub 4
	jp nz, .LABEL.__LABEL290
	ld (ix-5), 255
	ld a, (_activeShots)
	xor (ix-6)
	ld (_activeShots), a
.LABEL.__LABEL290:
	ld a, (ix-5)
	push af
	ld hl, 3
	push hl
	ld a, (ix-1)
	ld l, a
	add a, a
	sbc a, a
	ld h, a
	dec hl
	push hl
	ld hl, _shots
	call .core.__ARRAY
	pop af
	ld (hl), a
	jp .LABEL.__LABEL284
.LABEL.__LABEL287:
	ld hl, 0
	push hl
	ld a, (ix-1)
	ld l, a
	add a, a
	sbc a, a
	ld h, a
	dec hl
	push hl
	ld hl, _shots
	call .core.__ARRAY
	ld a, (hl)
	ld (ix-2), a
	ld hl, 1
	push hl
	ld a, (ix-1)
	ld l, a
	add a, a
	sbc a, a
	ld h, a
	dec hl
	push hl
	ld hl, _shots
	call .core.__ARRAY
	ld a, (hl)
	ld (ix-3), a
	ld hl, 2
	push hl
	ld a, (ix-1)
	ld l, a
	add a, a
	sbc a, a
	ld h, a
	dec hl
	push hl
	ld hl, _shots
	call .core.__ARRAY
	ld a, (hl)
	ld (ix-4), a
	dec a
	jp nz, .LABEL.__LABEL291
	ld a, (ix-3)
	ld h, 4
	call .core.__LEI8
	or a
	jp z, .LABEL.__LABEL293
	ld hl, 3
	push hl
	ld a, (ix-1)
	ld l, a
	add a, a
	sbc a, a
	ld h, a
	dec hl
	push hl
	ld hl, _shots
	call .core.__ARRAY
	ld (hl), 0
	ld (ix-3), 4
	jp .LABEL.__LABEL292
.LABEL.__LABEL293:
	dec (ix-3)
.LABEL.__LABEL294:
	jp .LABEL.__LABEL292
.LABEL.__LABEL291:
	ld a, (ix-4)
	sub 2
	jp nz, .LABEL.__LABEL295
	ld h, (ix-3)
	ld a, 42
	call .core.__LEI8
	or a
	jp z, .LABEL.__LABEL297
	ld hl, 3
	push hl
	ld a, (ix-1)
	ld l, a
	add a, a
	sbc a, a
	ld h, a
	dec hl
	push hl
	ld hl, _shots
	call .core.__ARRAY
	ld (hl), 0
	ld (ix-3), 42
	jp .LABEL.__LABEL292
.LABEL.__LABEL297:
	inc (ix-3)
.LABEL.__LABEL298:
	jp .LABEL.__LABEL292
.LABEL.__LABEL295:
	ld a, (ix-4)
	sub 3
	jp nz, .LABEL.__LABEL299
	ld a, (ix-2)
	ld h, 2
	call .core.__LEI8
	or a
	jp z, .LABEL.__LABEL301
	ld hl, 3
	push hl
	ld a, (ix-1)
	ld l, a
	add a, a
	sbc a, a
	ld h, a
	dec hl
	push hl
	ld hl, _shots
	call .core.__ARRAY
	ld (hl), 0
	ld (ix-2), 2
	jp .LABEL.__LABEL292
.LABEL.__LABEL301:
	dec (ix-2)
.LABEL.__LABEL302:
	jp .LABEL.__LABEL292
.LABEL.__LABEL299:
	ld a, (ix-4)
	sub 4
	jp nz, .LABEL.__LABEL292
	ld h, (ix-2)
	ld a, 40
	call .core.__LEI8
	or a
	jp z, .LABEL.__LABEL305
	ld hl, 3
	push hl
	ld a, (ix-1)
	ld l, a
	add a, a
	sbc a, a
	ld h, a
	dec hl
	push hl
	ld hl, _shots
	call .core.__ARRAY
	ld (hl), 0
	ld (ix-2), 40
	jp .LABEL.__LABEL292
.LABEL.__LABEL305:
	inc (ix-2)
.LABEL.__LABEL292:
	ld a, (ix-2)
	push af
	ld hl, 0
	push hl
	ld a, (ix-1)
	ld l, a
	add a, a
	sbc a, a
	ld h, a
	dec hl
	push hl
	ld hl, _shots
	call .core.__ARRAY
	pop af
	ld (hl), a
	ld a, (ix-3)
	push af
	ld hl, 1
	push hl
	ld a, (ix-1)
	ld l, a
	add a, a
	sbc a, a
	ld h, a
	dec hl
	push hl
	ld hl, _shots
	call .core.__ARRAY
	pop af
	ld (hl), a
	ld hl, 3
	push hl
	ld a, (ix-1)
	ld l, a
	add a, a
	sbc a, a
	ld h, a
	dec hl
	push hl
	ld hl, _shots
	call .core.__ARRAY
	ld a, (hl)
	sub 255
	jp nz, .LABEL.__LABEL284
	ld a, (ix-2)
	and 1
	ld d, a
	ld a, (ix-3)
	and 1
	or d
	jp nz, .LABEL.__LABEL284
	ld a, (ix-3)
	sra a
	dec a
	push af
	ld a, (ix-2)
	sra a
	push af
	ld a, (ix-1)
	push af
	call _CheckShotItems
.LABEL.__LABEL284:
	inc (ix-1)
.LABEL.__LABEL280:
	ld h, (ix-1)
	ld a, 3
	call .core.__LTI8
	or a
	jp z, .LABEL.__LABEL283
_UpdateFire__leave:
	ld sp, ix
	pop ix
	ret
_CheckShotUnits:
	push ix
	ld ix, 0
	add ix, sp
	ld hl, 0
	push hl
	push hl
	push hl
	ld a, (_activeAliens)
	sub 1
	sbc a, a
	push af
	ld a, (_activeTanks)
	sub 1
	sbc a, a
	ld h, a
	pop af
	or a
	jr z, .LABEL.__LABEL746
	ld a, h
.LABEL.__LABEL746:
	or a
	jp nz, _CheckShotUnits__leave
	ld a, (ix+7)
	sub (ix+11)
	add a, a
	dec a
	ld (ix-3), a
	ld a, (ix+7)
	add a, (ix+11)
	add a, a
	inc a
	ld (ix-4), a
	ld a, (ix+9)
	sub (ix+11)
	inc a
	add a, a
	dec a
	ld (ix-5), a
	ld a, (ix+9)
	add a, (ix+11)
	inc a
	add a, a
	inc a
	ld (ix-6), a
	ld a, (_activeAliens)
	or a
	jp z, .LABEL.__LABEL314
	ld (ix-2), 1
	jp .LABEL.__LABEL315
.LABEL.__LABEL318:
	ld a, (ix-2)
	ld l, a
	ld h, 0
	ex de, hl
	ld hl, _maskTable.__DATA__
	add hl, de
	dec hl
	ld a, (hl)
	ld (ix-1), a
	ld h, a
	ld a, (_activeAliens)
	and h
	jp z, .LABEL.__LABEL319
	ld hl, 0
	push hl
	ld a, (ix-2)
	ld l, a
	dec hl
	push hl
	ld hl, _aliens
	call .core.__ARRAY
	ld a, (hl)
	ld h, (ix-4)
	call .core.__LEI8
	or a
	jp z, .LABEL.__LABEL319
	ld hl, 0
	push hl
	ld a, (ix-2)
	ld l, a
	dec hl
	push hl
	ld hl, _aliens
	call .core.__ARRAY
	ld h, (hl)
	ld a, (ix-3)
	call .core.__LEI8
	or a
	jp z, .LABEL.__LABEL319
	ld hl, 1
	push hl
	ld a, (ix-2)
	ld l, a
	dec hl
	push hl
	ld hl, _aliens
	call .core.__ARRAY
	ld a, (hl)
	ld h, (ix-6)
	call .core.__LEI8
	or a
	jp z, .LABEL.__LABEL319
	ld hl, 1
	push hl
	ld a, (ix-2)
	ld l, a
	dec hl
	push hl
	ld hl, _aliens
	call .core.__ARRAY
	ld h, (hl)
	ld a, (ix-5)
	call .core.__LEI8
	or a
	jp z, .LABEL.__LABEL319
	ld a, (ix+5)
	or a
	jp z, .LABEL.__LABEL330
	ld a, (_activeAliens)
	xor (ix-1)
	ld (_activeAliens), a
	ld hl, 10
	push hl
	call _AddScore
	jp .LABEL.__LABEL331
.LABEL.__LABEL330:
	ld hl, 3
	push hl
	ld a, (ix-2)
	ld l, a
	dec hl
	push hl
	ld hl, _aliens
	call .core.__ARRAY
	ld (hl), 0
.LABEL.__LABEL331:
.LABEL.__LABEL319:
	inc (ix-2)
.LABEL.__LABEL315:
	ld a, 4
	cp (ix-2)
	jp nc, .LABEL.__LABEL318
.LABEL.__LABEL314:
	ld a, (_activeTanks)
	or a
	jp z, _CheckShotUnits__leave
	ld (ix-2), 1
	jp .LABEL.__LABEL334
.LABEL.__LABEL337:
	ld a, (ix-2)
	ld l, a
	ld h, 0
	ex de, hl
	ld hl, _maskTable.__DATA__
	add hl, de
	dec hl
	ld a, (hl)
	ld (ix-1), a
	ld h, a
	ld a, (_activeTanks)
	and h
	jp z, .LABEL.__LABEL338
	ld hl, 0
	push hl
	ld a, (ix-2)
	ld l, a
	dec hl
	push hl
	ld hl, _tanks
	call .core.__ARRAY
	ld a, (hl)
	ld h, (ix-4)
	call .core.__LEI8
	or a
	jp z, .LABEL.__LABEL338
	ld hl, 0
	push hl
	ld a, (ix-2)
	ld l, a
	dec hl
	push hl
	ld hl, _tanks
	call .core.__ARRAY
	ld h, (hl)
	ld a, (ix-3)
	call .core.__LEI8
	or a
	jp z, .LABEL.__LABEL338
	ld hl, 1
	push hl
	ld a, (ix-2)
	ld l, a
	dec hl
	push hl
	ld hl, _tanks
	call .core.__ARRAY
	ld a, (hl)
	ld h, (ix-6)
	call .core.__LEI8
	or a
	jp z, .LABEL.__LABEL338
	ld hl, 1
	push hl
	ld a, (ix-2)
	ld l, a
	dec hl
	push hl
	ld hl, _tanks
	call .core.__ARRAY
	ld h, (hl)
	ld a, (ix-5)
	call .core.__LEI8
	or a
	jp z, .LABEL.__LABEL338
	ld a, (ix+5)
	or a
	jp z, .LABEL.__LABEL349
	ld a, (_activeTanks)
	xor (ix-1)
	ld (_activeTanks), a
	ld hl, 25
	push hl
	call _AddScore
	jp .LABEL.__LABEL350
.LABEL.__LABEL349:
	ld hl, 3
	push hl
	ld a, (ix-2)
	ld l, a
	dec hl
	push hl
	ld hl, _tanks
	call .core.__ARRAY
	ld (hl), 0
.LABEL.__LABEL350:
.LABEL.__LABEL338:
	inc (ix-2)
.LABEL.__LABEL334:
	ld a, 2
	cp (ix-2)
	jp nc, .LABEL.__LABEL337
_CheckShotUnits__leave:
	ld sp, ix
	pop ix
	exx
	pop hl
	pop bc
	pop bc
	pop bc
	ex (sp), hl
	exx
	ret
_CheckCursorAction:
	push ix
	ld ix, 0
	add ix, sp
	ld hl, 0
	push hl
	push hl
	push ix
	pop hl
	ld bc, -3
	add hl, bc
	ex de, hl
	ld hl, .LABEL.__LABEL747
	ld bc, 1
	ldir
	ld a, (_cursorTool)
	or a
	jp nz, .LABEL.__LABEL351
	ld a, (ix+7)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld a, (ix+5)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld hl, _activeMap
	call .core.__ARRAY
	ld a, (hl)
	ld (ix-4), a
	or a
	jp z, _CheckCursorAction__leave
	ld a, (ix-4)
	sub 42
	jp nz, .LABEL.__LABEL355
	ld a, (ix+7)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld a, (ix+5)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld hl, _activeMap
	call .core.__ARRAY
	ld (hl), 43
	ld (ix-4), 0
	jp .LABEL.__LABEL354
.LABEL.__LABEL355:
	ld a, (ix-4)
	sub 43
	jp nz, .LABEL.__LABEL357
	ld a, (ix+7)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld a, (ix+5)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld hl, _activeMap
	call .core.__ARRAY
	ld (hl), 45
	ld (ix-4), 0
	jp .LABEL.__LABEL354
.LABEL.__LABEL357:
	ld a, (ix-4)
	sub 45
	jp nz, .LABEL.__LABEL359
	ld a, (ix+7)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld a, (ix+5)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld hl, _activeMap
	call .core.__ARRAY
	ld (hl), 44
	ld (ix-4), 0
	jp .LABEL.__LABEL354
.LABEL.__LABEL359:
	ld a, (ix-4)
	sub 44
	jp nz, .LABEL.__LABEL354
	ld a, (ix+7)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld a, (ix+5)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld hl, _activeMap
	call .core.__ARRAY
	ld (hl), 42
	ld (ix-4), 0
.LABEL.__LABEL354:
	ld a, (ix-4)
	or a
	jp nz, _CheckCursorAction__leave
	ld a, (ix+7)
	inc a
	ld l, a
	ld h, 0
	push hl
	ld a, (ix+5)
	ld l, a
	push hl
	ld a, (ix+7)
	inc a
	ld l, a
	push hl
	ld a, (ix+5)
	ld l, a
	call _GetTileColor
	ld l, a
	ld h, 0
	push hl
	ld a, (ix+7)
	ld l, a
	dec hl
	push hl
	ld a, (ix+5)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld hl, _activeMap
	call .core.__ARRAY
	ld a, (hl)
	call _SetTileChecked
	call _DeflectorEffect
.LABEL.__LABEL364:
	jp _CheckCursorAction__leave
.LABEL.__LABEL351:
	ld a, (_cursorTool)
	sub 2
	jp nz, .LABEL.__LABEL365
	xor a
	ld hl, (_availableMines - 1)
	cp h
	jp nc, _CheckCursorAction__leave
	ld a, (ix+7)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld a, (ix+5)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld hl, _activeMap
	call .core.__ARRAY
	ld a, (hl)
	or a
	jp nz, _CheckCursorAction__leave
	ld hl, _availableMines
	dec (hl)
	ld hl, 16
	push hl
	ld hl, 30
	push hl
	ld a, (_availableMines)
	add a, 106
	inc a
	ld l, a
	dec hl
	push hl
	ld hl, _tileColors
	call .core.__ARRAY
	ld a, (hl)
	ld l, a
	ld h, 0
	push hl
	ld a, (_availableMines)
	add a, 106
	call _SetTile
	ld a, (ix+7)
	push af
	ld a, (ix+5)
	push af
	ld a, 92
	push af
	call _GridObject
	call _MinePlacedEffect
.LABEL.__LABEL368:
	jp _CheckCursorAction__leave
.LABEL.__LABEL365:
	ld a, (_cursorTool)
	dec a
	jp nz, .LABEL.__LABEL371
	xor a
	ld hl, (_availableBlockers - 1)
	cp h
	jp nc, _CheckCursorAction__leave
	ld a, (ix+7)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld a, (ix+5)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld hl, _activeMap
	call .core.__ARRAY
	ld a, (hl)
	or a
	jp nz, _CheckCursorAction__leave
	ld hl, _availableBlockers
	dec (hl)
	ld hl, 16
	push hl
	ld hl, 26
	push hl
	ld a, (_availableBlockers)
	add a, 106
	inc a
	ld l, a
	dec hl
	push hl
	ld hl, _tileColors
	call .core.__ARRAY
	ld a, (hl)
	ld l, a
	ld h, 0
	push hl
	ld a, (_availableBlockers)
	add a, 106
	call _SetTile
	ld a, (ix+7)
	push af
	ld a, (ix+5)
	push af
	ld a, 91
	push af
	call _GridObject
	call _MinePlacedEffect
.LABEL.__LABEL374:
	jp _CheckCursorAction__leave
.LABEL.__LABEL371:
	ld a, (_cursorTool)
	sub 3
	jp nz, .LABEL.__LABEL377
	xor a
	ld hl, (_availableBombs - 1)
	cp h
	jp nc, _CheckCursorAction__leave
	ld hl, _availableBombs
	dec (hl)
	ld hl, 18
	push hl
	ld hl, 26
	push hl
	ld a, (_availableBombs)
	add a, 106
	inc a
	ld l, a
	dec hl
	push hl
	ld hl, _tileColors
	call .core.__ARRAY
	ld a, (hl)
	ld l, a
	ld h, 0
	push hl
	ld a, (_availableBombs)
	add a, 106
	call _SetTile
	call _BombEffect
	ld a, 1
	push af
	ld a, (ix+7)
	push af
	ld a, (ix+5)
	push af
	ld a, 1
	push af
	call _CheckShotUnits
	ld a, (ix+7)
	dec a
	ld (ix-2), a
	jp .LABEL.__LABEL381
.LABEL.__LABEL384:
	ld a, (ix+5)
	dec a
	ld (ix-1), a
	jp .LABEL.__LABEL386
.LABEL.__LABEL389:
	inc (ix-3)
	ld a, (ix-1)
	cp 1
	jp c, .LABEL.__LABEL390
	ld a, (ix-2)
	cp 1
	jp c, .LABEL.__LABEL390
	ld a, 20
	cp (ix-1)
	jp c, .LABEL.__LABEL390
	cp (ix-1)
	jp c, .LABEL.__LABEL390
	ld a, (ix-2)
	push af
	ld a, (ix-1)
	push af
	ld a, 255
	push af
	call _CheckShotItems
	ld a, (ix-2)
	push af
	ld a, (ix-1)
	push af
	ld a, (ix-3)
	add a, 74
	push af
	call _GridObject
.LABEL.__LABEL390:
	inc (ix-1)
.LABEL.__LABEL386:
	ld h, (ix-1)
	ld a, (ix+5)
	inc a
	cp h
	jp nc, .LABEL.__LABEL389
	inc (ix-2)
.LABEL.__LABEL381:
	ld h, (ix-2)
	ld a, (ix+7)
	inc a
	cp h
	jp nc, .LABEL.__LABEL384
.LABEL.__LABEL380:
	jp _CheckCursorAction__leave
.LABEL.__LABEL377:
	ld a, (_cursorTool)
	sub 4
	jp nz, .LABEL.__LABEL399
	xor a
	ld hl, (_availableChargedShots - 1)
	cp h
	jp nc, _CheckCursorAction__leave
	ld hl, _availableChargedShots
	dec (hl)
	ld hl, 18
	push hl
	ld hl, 30
	push hl
	ld a, (_availableChargedShots)
	add a, 106
	inc a
	ld l, a
	dec hl
	push hl
	ld hl, _tileColors
	call .core.__ARRAY
	ld a, (hl)
	ld l, a
	ld h, 0
	push hl
	ld a, (_availableChargedShots)
	add a, 106
	call _SetTile
	call _SATShotEffect
	ld a, (ix+7)
	push af
	ld a, (ix+5)
	push af
	ld a, 255
	push af
	call _CheckShotItems
	xor a
	push af
	ld a, (ix+7)
	push af
	ld a, (ix+5)
	push af
	xor a
	push af
	call _CheckShotUnits
.LABEL.__LABEL402:
	jp _CheckCursorAction__leave
.LABEL.__LABEL399:
	ld a, (_cursorTool)
	sub 5
	jp nz, .LABEL.__LABEL403
	xor a
	ld hl, (_availableFireShots - 1)
	cp h
	jp nc, _CheckCursorAction__leave
	ld a, (ix+7)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld a, (ix+5)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld hl, _activeMap
	call .core.__ARRAY
	ld a, (hl)
	or a
	jp nz, _CheckCursorAction__leave
	ld hl, _availableFireShots
	dec (hl)
	ld hl, 20
	push hl
	ld hl, 26
	push hl
	ld a, (_availableFireShots)
	add a, 106
	inc a
	ld l, a
	dec hl
	push hl
	ld hl, _tileColors
	call .core.__ARRAY
	ld a, (hl)
	ld l, a
	ld h, 0
	push hl
	ld a, (_availableFireShots)
	add a, 106
	call _SetTile
	call _SATShotEffect
	ld a, (ix+7)
	push af
	ld a, (ix+5)
	push af
	ld a, 85
	push af
	call _GridObject
	xor a
	push af
	ld a, (ix+7)
	push af
	ld a, (ix+5)
	push af
	ld a, 1
	push af
	call _CheckShotUnits
.LABEL.__LABEL406:
	jp _CheckCursorAction__leave
.LABEL.__LABEL403:
	ld a, (_cursorTool)
	sub 6
	jp nz, _CheckCursorAction__leave
	xor a
	ld hl, (_availableClearShots - 1)
	cp h
	jp nc, _CheckCursorAction__leave
	ld a, (ix+7)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld a, (ix+5)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld hl, _activeMap
	call .core.__ARRAY
	ld a, (hl)
	sub 104
	jp z, _CheckCursorAction__leave
	ld a, (ix+7)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld a, (ix+5)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld hl, _activeMap
	call .core.__ARRAY
	ld a, (hl)
	sub 105
	jp z, _CheckCursorAction__leave
	ld a, (ix+7)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld a, (ix+5)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld hl, _activeMap
	call .core.__ARRAY
	ld a, (hl)
	sub 86
	jp z, _CheckCursorAction__leave
	ld hl, _availableClearShots
	dec (hl)
	ld hl, 20
	push hl
	ld hl, 30
	push hl
	ld a, (_availableClearShots)
	add a, 106
	inc a
	ld l, a
	dec hl
	push hl
	ld hl, _tileColors
	call .core.__ARRAY
	ld a, (hl)
	ld l, a
	ld h, 0
	push hl
	ld a, (_availableClearShots)
	add a, 106
	call _SetTile
	call _SATShotEffect
	ld a, (ix+7)
	push af
	ld a, (ix+5)
	push af
	call _ClearGridCell
_CheckCursorAction__leave:
	ld sp, ix
	pop ix
	exx
	pop hl
	pop bc
	ex (sp), hl
	exx
	ret
_UpdateCursor:
	ld hl, 63233
	call _MultiKeys
	or a
	jp z, .LABEL.__LABEL419
	xor a
	ld (_cursorTool), a
	ld a, 16
	push af
	ld a, 24
	call .core.PRINT_AT
	ld hl, .LABEL.__LABEL160
	xor a
	call .core.__PRINTSTR
	call .core.PRINT_EOL
	jp .LABEL.__LABEL420
.LABEL.__LABEL419:
	ld hl, 63234
	call _MultiKeys
	or a
	jp z, .LABEL.__LABEL421
	ld a, 1
	ld (_cursorTool), a
	ld a, 16
	push af
	ld a, 24
	call .core.PRINT_AT
	ld hl, .LABEL.__LABEL423
	xor a
	call .core.__PRINTSTR
	call .core.PRINT_EOL
	jp .LABEL.__LABEL420
.LABEL.__LABEL421:
	ld hl, 63236
	call _MultiKeys
	or a
	jp z, .LABEL.__LABEL424
	ld a, 2
	ld (_cursorTool), a
	ld a, 16
	push af
	ld a, 24
	call .core.PRINT_AT
	ld hl, .LABEL.__LABEL426
	xor a
	call .core.__PRINTSTR
	call .core.PRINT_EOL
	jp .LABEL.__LABEL420
.LABEL.__LABEL424:
	ld hl, 63240
	call _MultiKeys
	or a
	jp z, .LABEL.__LABEL427
	ld a, 3
	ld (_cursorTool), a
	ld a, 16
	push af
	ld a, 24
	call .core.PRINT_AT
	ld hl, .LABEL.__LABEL429
	xor a
	call .core.__PRINTSTR
	call .core.PRINT_EOL
	jp .LABEL.__LABEL420
.LABEL.__LABEL427:
	ld hl, 63248
	call _MultiKeys
	or a
	jp z, .LABEL.__LABEL430
	ld a, 4
	ld (_cursorTool), a
	ld a, 16
	push af
	ld a, 24
	call .core.PRINT_AT
	ld hl, .LABEL.__LABEL432
	xor a
	call .core.__PRINTSTR
	call .core.PRINT_EOL
	jp .LABEL.__LABEL420
.LABEL.__LABEL430:
	ld hl, 61200
	call _MultiKeys
	or a
	jp z, .LABEL.__LABEL433
	ld a, 5
	ld (_cursorTool), a
	ld a, 16
	push af
	ld a, 24
	call .core.PRINT_AT
	ld hl, .LABEL.__LABEL435
	xor a
	call .core.__PRINTSTR
	call .core.PRINT_EOL
	jp .LABEL.__LABEL420
.LABEL.__LABEL433:
	ld hl, 61192
	call _MultiKeys
	or a
	jp z, .LABEL.__LABEL420
	ld a, 6
	ld (_cursorTool), a
	ld a, 16
	push af
	ld a, 24
	call .core.PRINT_AT
	ld hl, .LABEL.__LABEL438
	xor a
	call .core.__PRINTSTR
	call .core.PRINT_EOL
.LABEL.__LABEL420:
	ld hl, _cursorFrames
	dec (hl)
	ld a, (_cursorMoved)
	sub 1
	sbc a, a
	ld d, a
	ld a, (_cursorFrames)
	sub 1
	sbc a, a
	or d
	jp z, .LABEL.__LABEL439
	xor a
	ld hl, (_cursorX - 1)
	cp h
	jp nc, .LABEL.__LABEL442
	ld hl, 48904
	call _MultiKeys
	or a
	jp z, .LABEL.__LABEL442
	ld hl, _cursorX
	dec (hl)
	ld a, 1
	ld (_cursorMoved), a
	ld (_cursorVisible), a
	ld a, 5
	ld (_cursorFrames), a
	jp .LABEL._CHECKCURSORFRAMES
.LABEL.__LABEL442:
	ld a, (_cursorX)
	cp 19
	jp nc, .LABEL.__LABEL446
	ld hl, 48898
	call _MultiKeys
	or a
	jp z, .LABEL.__LABEL446
	ld hl, _cursorX
	inc (hl)
	ld a, 1
	ld (_cursorMoved), a
	ld (_cursorVisible), a
	ld a, 5
	ld (_cursorFrames), a
	jp .LABEL._CHECKCURSORFRAMES
.LABEL.__LABEL446:
	xor a
	ld hl, (_cursorY - 1)
	cp h
	jp nc, .LABEL.__LABEL450
	ld hl, 57092
	call _MultiKeys
	or a
	jp z, .LABEL.__LABEL450
	ld hl, _cursorY
	dec (hl)
	ld a, 1
	ld (_cursorMoved), a
	ld (_cursorVisible), a
	ld a, 5
	ld (_cursorFrames), a
	jp .LABEL._CHECKCURSORFRAMES
.LABEL.__LABEL450:
	ld a, (_cursorY)
	cp 19
	jp nc, .LABEL.__LABEL454
	ld hl, 48900
	call _MultiKeys
	or a
	jp z, .LABEL.__LABEL454
	ld hl, _cursorY
	inc (hl)
	ld a, 1
	ld (_cursorMoved), a
	ld (_cursorVisible), a
	ld a, 5
	ld (_cursorFrames), a
	jp .LABEL._CHECKCURSORFRAMES
.LABEL.__LABEL454:
	ld hl, 32513
	call _MultiKeys
	or a
	jp z, .LABEL.__LABEL457
	ld a, (_cursorY)
	inc a
	push af
	ld a, (_cursorX)
	inc a
	push af
	call _CheckCursorAction
	ld a, 1
	ld (_cursorMoved), a
	ld (_cursorVisible), a
	ld a, 5
	ld (_cursorFrames), a
	jp .LABEL._CHECKCURSORFRAMES
.LABEL.__LABEL457:
	xor a
	ld (_cursorMoved), a
.LABEL.__LABEL458:
	jp .LABEL._CHECKCURSORFRAMES
.LABEL.__LABEL439:
	call _AnyKey
	or a
	jp z, .LABEL._CHECKCURSORFRAMES
	xor a
	ld (_cursorMoved), a
.LABEL._CHECKCURSORFRAMES:
	ld a, (_cursorFrames)
	or a
	jp nz, _UpdateCursor__leave
	ld a, (_cursorVisible)
	sub 1
	sbc a, a
	ld (_cursorVisible), a
	ld a, 10
	ld (_cursorFrames), a
_UpdateCursor__leave:
	ret
_LineOfSight:
	push ix
	ld ix, 0
	add ix, sp
	ld hl, 0
	push hl
	push hl
	inc sp
	ld l, (ix+4)
	ld h, (ix+5)
	dec hl
	ld de, 20
	call .core.__MUL16_FAST
	ex de, hl
	ld hl, _activeMap.__DATA__
	add hl, de
	push hl
	ld l, (ix+6)
	ld h, (ix+7)
	ex de, hl
	pop hl
	add hl, de
	ld (ix-3), l
	ld (ix-2), h
	ld (ix-1), 1
	jp .LABEL.__LABEL463
.LABEL.__LABEL466:
	ld l, (ix-3)
	ld h, (ix-2)
	ld a, (hl)
	sub 1
	sbc a, a
	push af
	ld a, (hl)
	sub 83
	ccf
	sbc a, a
	push af
	ld a, 86
	sub (hl)
	ccf
	sbc a, a
	ld h, a
	pop af
	or a
	jr z, .LABEL.__LABEL748
	ld a, h
.LABEL.__LABEL748:
	pop de
	or d
	jp z, .LABEL.__LABEL468
	ld h, (ix-2)
	inc hl
	ld (ix-3), l
	ld (ix-2), h
	jp .LABEL.__LABEL467
.LABEL.__LABEL468:
	xor a
	jp _LineOfSight__leave
.LABEL.__LABEL467:
	inc (ix-1)
.LABEL.__LABEL463:
	ld a, (ix-1)
	push af
	ld l, (ix+6)
	ld h, (ix+7)
	ex de, hl
	ld hl, 19
	or a
	sbc hl, de
	ld a, l
	pop hl
	cp h
	jp nc, .LABEL.__LABEL466
	ld a, 1
_LineOfSight__leave:
	ld sp, ix
	pop ix
	exx
	pop hl
	pop bc
	ex (sp), hl
	exx
	ret
_UpdateAliens:
	push ix
	ld ix, 0
	add ix, sp
	ld hl, -9
	add hl, sp
	ld sp, hl
	ld (hl), 0
	ld bc, 8
	ld d, h
	ld e, l
	inc de
	ldir
	ld a, (_activeAliens)
	or a
	jp z, _UpdateAliens__leave
	ld hl, _alienFrame
	dec (hl)
	ld a, (_alienFrame)
	or a
	jp nz, _UpdateAliens__leave
	ld a, 5
	ld (_alienFrame), a
	ld (ix-1), 1
	jp .LABEL.__LABEL474
.LABEL.__LABEL477:
	ld a, (ix-1)
	ld l, a
	ld h, 0
	ex de, hl
	ld hl, _maskTable.__DATA__
	add hl, de
	dec hl
	ld a, (hl)
	ld (ix-8), a
	ld h, a
	ld a, (_activeAliens)
	and h
	jp z, .LABEL.__LABEL478
	ld hl, 3
	push hl
	ld a, (ix-1)
	ld l, a
	dec hl
	push hl
	ld hl, _aliens
	call .core.__ARRAY
	ld a, (hl)
	ld (ix-2), a
	sub 255
	jp z, .LABEL.__LABEL481
	inc (ix-2)
	ld a, (ix-2)
	sub 4
	jp nz, .LABEL.__LABEL484
	ld (ix-2), 255
	ld a, (_activeAliens)
	xor (ix-8)
	ld (_activeAliens), a
	ld hl, 10
	push hl
	call _AddScore
.LABEL.__LABEL484:
	ld a, (ix-2)
	push af
	ld hl, 3
	push hl
	ld a, (ix-1)
	ld l, a
	dec hl
	push hl
	ld hl, _aliens
	call .core.__ARRAY
	pop af
	ld (hl), a
	jp .LABEL.__LABEL478
.LABEL.__LABEL481:
	ld hl, 0
	push hl
	ld a, (ix-1)
	ld l, a
	dec hl
	push hl
	ld hl, _aliens
	call .core.__ARRAY
	ld a, (hl)
	ld (ix-3), a
	ld hl, 1
	push hl
	ld a, (ix-1)
	ld l, a
	dec hl
	push hl
	ld hl, _aliens
	call .core.__ARRAY
	ld a, (hl)
	ld (ix-4), a
	ld hl, 2
	push hl
	ld a, (ix-1)
	ld l, a
	dec hl
	push hl
	ld hl, _aliens
	call .core.__ARRAY
	ld a, (hl)
	ld (ix-5), a
	ld a, (ix-3)
	and 1
	jp z, .LABEL.__LABEL485
	ld a, (ix-3)
	add a, (ix-5)
	ld (ix-3), a
	jp .LABEL._ENDTESTCELL
.LABEL.__LABEL485:
	ld a, (ix-3)
	sra a
	ld (ix-6), a
	ld a, (ix-4)
	sra a
	dec a
	ld (ix-7), a
.LABEL._TESTALIENCONTINUE:
	ld h, (ix-6)
	ld a, 1
	call .core.__LTI8
	or a
	jp z, .LABEL.__LABEL488
	ld a, (ix-5)
	sub 255
	jp z, .LABEL._ALIENCONTINUE
.LABEL.__LABEL488:
	ld a, (ix-6)
	ld h, 20
	call .core.__LTI8
	or a
	jp z, .LABEL._TESTALIENDOWN
	ld a, (ix-5)
	dec a
	jp z, .LABEL._ALIENCONTINUE
.LABEL._TESTALIENDOWN:
	ld a, (ix-7)
	ld h, 20
	call .core.__LTI8
	or a
	jp z, .LABEL._TESTALIENINVERT
	ld a, (ix-7)
	inc a
	ld l, a
	add a, a
	sbc a, a
	ld h, a
	dec hl
	push hl
	ld a, (ix-6)
	ld l, a
	add a, a
	sbc a, a
	ld h, a
	dec hl
	push hl
	ld hl, _activeMap
	call .core.__ARRAY
	ld a, (hl)
	ld (ix-9), a
	sub 1
	sbc a, a
	push af
	ld a, (ix-9)
	sub 86
	ccf
	sbc a, a
	push af
	ld a, 89
	sub (ix-9)
	ccf
	sbc a, a
	ld h, a
	pop af
	or a
	jr z, .LABEL.__LABEL749
	ld a, h
.LABEL.__LABEL749:
	pop de
	or d
	jp z, .LABEL.__LABEL497
	ld a, (ix-5)
	neg
	ld (ix-5), a
	ld a, (ix-4)
	add a, 2
	ld (ix-4), a
	jp .LABEL._ENDTESTCELL
.LABEL.__LABEL497:
	ld a, (ix-9)
	sub 92
	jp nz, .LABEL._TESTALIENINVERT
	ld a, (ix-7)
	inc a
	push af
	ld a, (ix-6)
	push af
	call _ClearGridCell
	ld hl, 3
	push hl
	ld a, (ix-1)
	ld l, a
	dec hl
	push hl
	ld hl, _aliens
	call .core.__ARRAY
	ld (hl), 0
	jp .LABEL._ENDTESTCELL
.LABEL._TESTALIENINVERT:
	ld h, (ix-6)
	ld a, 1
	call .core.__LTI8
	or a
	jp z, .LABEL.__LABEL502
	ld a, (ix-5)
	dec a
	jp z, .LABEL._ALIENINVERT
.LABEL.__LABEL502:
	ld a, (ix-6)
	ld h, 20
	call .core.__LTI8
	or a
	jp z, .LABEL._EXPLODEALIEN
	ld a, (ix-5)
	sub 255
	jp z, .LABEL._ALIENINVERT
.LABEL._EXPLODEALIEN:
	ld hl, 3
	push hl
	ld a, (ix-1)
	ld l, a
	dec hl
	push hl
	ld hl, _aliens
	call .core.__ARRAY
	ld (hl), 0
	jp .LABEL._ENDTESTCELL
.LABEL._ALIENCONTINUE:
	ld a, (ix-7)
	ld l, a
	add a, a
	sbc a, a
	ld h, a
	dec hl
	push hl
	ld a, (ix-6)
	add a, (ix-5)
	ld l, a
	add a, a
	sbc a, a
	ld h, a
	dec hl
	push hl
	ld hl, _activeMap
	call .core.__ARRAY
	ld a, (hl)
	ld (ix-9), a
	sub 1
	sbc a, a
	push af
	ld a, (ix-9)
	sub 86
	ccf
	sbc a, a
	push af
	ld a, 89
	sub (ix-9)
	ccf
	sbc a, a
	ld h, a
	pop af
	or a
	jr z, .LABEL.__LABEL750
	ld a, h
.LABEL.__LABEL750:
	pop de
	or d
	jp z, .LABEL.__LABEL509
	ld a, (ix-3)
	add a, (ix-5)
	ld (ix-3), a
	jp .LABEL._ENDTESTCELL
.LABEL.__LABEL509:
	ld a, (ix-9)
	sub 92
	jp nz, .LABEL._TESTALIENDOWN
	ld a, (ix-7)
	push af
	ld a, (ix-6)
	add a, (ix-5)
	push af
	call _ClearGridCell
	ld hl, 3
	push hl
	ld a, (ix-1)
	ld l, a
	dec hl
	push hl
	ld hl, _aliens
	call .core.__ARRAY
	ld (hl), 0
	jp .LABEL._ENDTESTCELL
.LABEL.__LABEL510:
	jp .LABEL._TESTALIENDOWN
.LABEL._ALIENINVERT:
	ld a, (ix-7)
	ld l, a
	add a, a
	sbc a, a
	ld h, a
	dec hl
	push hl
	ld a, (ix-6)
	sub (ix-5)
	ld l, a
	add a, a
	sbc a, a
	ld h, a
	dec hl
	push hl
	ld hl, _activeMap
	call .core.__ARRAY
	ld a, (hl)
	ld (ix-9), a
	sub 1
	sbc a, a
	push af
	ld a, (ix-9)
	sub 86
	ccf
	sbc a, a
	push af
	ld a, 89
	sub (ix-9)
	ccf
	sbc a, a
	ld h, a
	pop af
	or a
	jr z, .LABEL.__LABEL751
	ld a, h
.LABEL.__LABEL751:
	pop de
	or d
	jp z, .LABEL.__LABEL513
	ld a, (ix-5)
	neg
	ld (ix-5), a
	ld a, (ix-3)
	add a, (ix-5)
	ld (ix-3), a
	jp .LABEL._ENDTESTCELL
.LABEL.__LABEL513:
	ld a, (ix-9)
	sub 92
	jp nz, .LABEL._EXPLODEALIEN
	ld a, (ix-7)
	push af
	ld a, (ix-6)
	sub (ix-5)
	push af
	call _ClearGridCell
	ld hl, 3
	push hl
	ld a, (ix-1)
	ld l, a
	dec hl
	push hl
	ld hl, _aliens
	call .core.__ARRAY
	ld (hl), 0
	jp .LABEL._ENDTESTCELL
.LABEL.__LABEL514:
	jp .LABEL._EXPLODEALIEN
.LABEL._ENDTESTCELL:
	ld a, (ix-3)
	push af
	ld hl, 0
	push hl
	ld a, (ix-1)
	ld l, a
	dec hl
	push hl
	ld hl, _aliens
	call .core.__ARRAY
	pop af
	ld (hl), a
	ld a, (ix-4)
	push af
	ld hl, 1
	push hl
	ld a, (ix-1)
	ld l, a
	dec hl
	push hl
	ld hl, _aliens
	call .core.__ARRAY
	pop af
	ld (hl), a
	ld a, (ix-5)
	push af
	ld hl, 2
	push hl
	ld a, (ix-1)
	ld l, a
	dec hl
	push hl
	ld hl, _aliens
	call .core.__ARRAY
	pop af
	ld (hl), a
	ld a, (ix-4)
	sub 42
	jp nz, .LABEL.__LABEL517
	ld a, 1
	ld (_dead), a
	jp .LABEL.__LABEL478
.LABEL.__LABEL517:
	ld hl, 3
	push hl
	ld a, (ix-1)
	ld l, a
	dec hl
	push hl
	ld hl, _aliens
	call .core.__ARRAY
	ld a, (hl)
	or a
	jp nz, .LABEL.__LABEL478
	call _KilledAlienEffect
.LABEL.__LABEL478:
	inc (ix-1)
.LABEL.__LABEL474:
	ld a, 4
	cp (ix-1)
	jp nc, .LABEL.__LABEL477
_UpdateAliens__leave:
	ld sp, ix
	pop ix
	ret
_UpdateTanks:
	push ix
	ld ix, 0
	add ix, sp
	ld hl, -12
	add hl, sp
	ld sp, hl
	ld (hl), 0
	ld bc, 11
	ld d, h
	ld e, l
	inc de
	ldir
	ld a, (_activeTanks)
	or a
	jp z, _UpdateTanks__leave
	ld hl, _tankFrame
	dec (hl)
	ld a, (_tankFrame)
	or a
	jp nz, _UpdateTanks__leave
	ld a, 3
	ld (_tankFrame), a
	ld (ix-1), 1
	jp .LABEL.__LABEL525
.LABEL.__LABEL528:
	ld a, (ix-1)
	ld l, a
	ld h, 0
	ex de, hl
	ld hl, _maskTable.__DATA__
	add hl, de
	dec hl
	ld a, (hl)
	ld (ix-8), a
	ld h, a
	ld a, (_activeTanks)
	and h
	jp z, .LABEL.__LABEL529
	ld hl, 3
	push hl
	ld a, (ix-1)
	ld l, a
	dec hl
	push hl
	ld hl, _tanks
	call .core.__ARRAY
	ld a, (hl)
	ld (ix-2), a
	sub 255
	jp z, .LABEL.__LABEL532
	inc (ix-2)
	ld a, (ix-2)
	sub 4
	jp nz, .LABEL.__LABEL535
	ld (ix-2), 255
	ld a, (_activeTanks)
	xor (ix-8)
	ld (_activeTanks), a
	ld hl, 25
	push hl
	call _AddScore
.LABEL.__LABEL535:
	ld a, (ix-2)
	push af
	ld hl, 3
	push hl
	ld a, (ix-1)
	ld l, a
	dec hl
	push hl
	ld hl, _tanks
	call .core.__ARRAY
	pop af
	ld (hl), a
	jp .LABEL.__LABEL529
.LABEL.__LABEL532:
	ld hl, 0
	push hl
	ld a, (ix-1)
	ld l, a
	dec hl
	push hl
	ld hl, _tanks
	call .core.__ARRAY
	ld a, (hl)
	ld (ix-3), a
	ld hl, 1
	push hl
	ld a, (ix-1)
	ld l, a
	dec hl
	push hl
	ld hl, _tanks
	call .core.__ARRAY
	ld a, (hl)
	ld (ix-4), a
	ld hl, 2
	push hl
	ld a, (ix-1)
	ld l, a
	dec hl
	push hl
	ld hl, _tanks
	call .core.__ARRAY
	ld a, (hl)
	ld (ix-5), a
	ld a, (ix-3)
	sra a
	ld (ix-6), a
	ld a, (ix-4)
	sra a
	dec a
	ld (ix-7), a
	ld a, (ix-3)
	inc a
	ld h, a
	ld a, (_playerX)
	call .core.__LEI8
	push af
	ld a, (ix-3)
	dec a
	ld hl, (_playerX - 1)
	call .core.__LEI8
	ld h, a
	pop af
	or a
	jr z, .LABEL.__LABEL752
	ld a, h
.LABEL.__LABEL752:
	or a
	jp z, .LABEL.__LABEL537
	ld a, (ix-7)
	ld l, a
	add a, a
	sbc a, a
	ld h, a
	push hl
	ld a, (_playerX)
	srl a
	ld l, a
	ld h, 0
	push hl
	call _LineOfSight
	or a
	jp z, .LABEL.__LABEL537
	call _FastRnd
	ld h, a
	ld a, (_tankProbability)
	sub h
	ccf
	jp nc, .LABEL.__LABEL537
	ld a, 2
	ld (_dead), a
	jp _UpdateTanks__leave
.LABEL.__LABEL537:
	ld a, (ix-3)
	and 1
	ld d, a
	ld a, (ix-4)
	and 1
	or d
	jp z, .LABEL.__LABEL542
	ld a, (ix-5)
	dec a
	jp nz, .LABEL.__LABEL544
	inc (ix-3)
	jp .LABEL._ENDTESTCELLTANK
.LABEL.__LABEL544:
	ld a, (ix-5)
	sub 2
	jp nz, .LABEL.__LABEL546
	inc (ix-4)
	jp .LABEL._ENDTESTCELLTANK
.LABEL.__LABEL546:
	ld a, (ix-5)
	sub 3
	jp nz, .LABEL.__LABEL548
	dec (ix-3)
	jp .LABEL._ENDTESTCELLTANK
.LABEL.__LABEL548:
	ld a, (ix-5)
	sub 4
	jp nz, .LABEL._ENDTESTCELLTANK
	dec (ix-4)
.LABEL.__LABEL545:
	jp .LABEL._ENDTESTCELLTANK
.LABEL.__LABEL542:
	ld h, (ix-6)
	ld a, 1
	call .core.__LTI8
	or a
	jp z, .LABEL.__LABEL552
	ld a, (ix-7)
	ld l, a
	add a, a
	sbc a, a
	ld h, a
	dec hl
	push hl
	ld a, (ix-6)
	dec a
	ld l, a
	add a, a
	sbc a, a
	ld h, a
	dec hl
	push hl
	ld hl, _activeMap
	call .core.__ARRAY
	ld a, (hl)
	ld (ix-11), a
	jp .LABEL.__LABEL553
.LABEL.__LABEL552:
	ld (ix-11), 255
.LABEL.__LABEL553:
	ld a, (ix-6)
	ld h, 20
	call .core.__LTI8
	or a
	jp z, .LABEL.__LABEL554
	ld a, (ix-7)
	ld l, a
	add a, a
	sbc a, a
	ld h, a
	dec hl
	push hl
	ld a, (ix-6)
	inc a
	ld l, a
	add a, a
	sbc a, a
	ld h, a
	dec hl
	push hl
	ld hl, _activeMap
	call .core.__ARRAY
	ld a, (hl)
	ld (ix-12), a
	jp .LABEL.__LABEL555
.LABEL.__LABEL554:
	ld (ix-12), 255
.LABEL.__LABEL555:
	ld h, (ix-7)
	ld a, 1
	call .core.__LTI8
	or a
	jp z, .LABEL.__LABEL556
	ld a, (ix-7)
	dec a
	ld l, a
	add a, a
	sbc a, a
	ld h, a
	dec hl
	push hl
	ld a, (ix-6)
	ld l, a
	add a, a
	sbc a, a
	ld h, a
	dec hl
	push hl
	ld hl, _activeMap
	call .core.__ARRAY
	ld a, (hl)
	ld (ix-9), a
	jp .LABEL.__LABEL557
.LABEL.__LABEL556:
	ld (ix-9), 255
.LABEL.__LABEL557:
	ld a, (ix-7)
	ld h, 19
	call .core.__LTI8
	or a
	jp z, .LABEL.__LABEL558
	ld a, (ix-7)
	inc a
	ld l, a
	add a, a
	sbc a, a
	ld h, a
	dec hl
	push hl
	ld a, (ix-6)
	ld l, a
	add a, a
	sbc a, a
	ld h, a
	dec hl
	push hl
	ld hl, _activeMap
	call .core.__ARRAY
	ld a, (hl)
	ld (ix-10), a
	jp .LABEL.__LABEL559
.LABEL.__LABEL558:
	ld (ix-10), 255
.LABEL.__LABEL559:
	ld h, (ix-11)
	ld a, 83
	call .core.__LEI8
	push af
	ld a, (ix-11)
	ld h, 84
	call .core.__LEI8
	ld h, a
	pop af
	or a
	jr z, .LABEL.__LABEL753
	ld a, h
.LABEL.__LABEL753:
	ld d, a
	ld a, (ix-11)
	sub 86
	sub 1
	sbc a, a
	or d
	jp z, .LABEL.__LABEL561
	ld (ix-11), 0
.LABEL.__LABEL561:
	ld h, (ix-12)
	ld a, 83
	call .core.__LEI8
	push af
	ld a, (ix-12)
	ld h, 84
	call .core.__LEI8
	ld h, a
	pop af
	or a
	jr z, .LABEL.__LABEL754
	ld a, h
.LABEL.__LABEL754:
	ld d, a
	ld a, (ix-12)
	sub 86
	sub 1
	sbc a, a
	or d
	jp z, .LABEL.__LABEL563
	ld (ix-12), 0
.LABEL.__LABEL563:
	ld h, (ix-9)
	ld a, 83
	call .core.__LEI8
	push af
	ld a, (ix-9)
	ld h, 84
	call .core.__LEI8
	ld h, a
	pop af
	or a
	jr z, .LABEL.__LABEL755
	ld a, h
.LABEL.__LABEL755:
	ld d, a
	ld a, (ix-9)
	sub 86
	sub 1
	sbc a, a
	or d
	jp z, .LABEL.__LABEL565
	ld (ix-9), 0
.LABEL.__LABEL565:
	ld h, (ix-10)
	ld a, 83
	call .core.__LEI8
	push af
	ld a, (ix-10)
	ld h, 84
	call .core.__LEI8
	ld h, a
	pop af
	or a
	jr z, .LABEL.__LABEL756
	ld a, h
.LABEL.__LABEL756:
	ld d, a
	ld a, (ix-10)
	sub 86
	sub 1
	sbc a, a
	or d
	jp z, .LABEL._TESTTANKLOOP
	ld (ix-10), 0
.LABEL._TESTTANKLOOP:
	ld a, (ix-11)
	sub 255
	jp nz, .LABEL.__LABEL569
	ld a, (ix-12)
	sub 255
	jp nz, .LABEL.__LABEL569
	ld a, (ix-9)
	sub 255
	jp nz, .LABEL.__LABEL569
	ld a, (ix-10)
	sub 255
	jp nz, .LABEL.__LABEL569
	ld hl, 3
	push hl
	ld a, (ix-1)
	ld l, a
	dec hl
	push hl
	ld hl, _tanks
	call .core.__ARRAY
	ld (hl), 0
	jp .LABEL._ENDTESTCELLTANK
.LABEL.__LABEL569:
	ld a, (ix-5)
	dec a
	jp nz, .LABEL.__LABEL577
	ld a, (ix-12)
	or a
	jp nz, .LABEL.__LABEL578
	inc (ix-3)
	jp .LABEL._ENDTESTCELLTANK
.LABEL.__LABEL578:
	ld a, (ix-12)
	sub 92
	jp nz, .LABEL.__LABEL580
	call _BuildTankDestroyedEffect
	ld a, (ix-7)
	push af
	ld a, (ix-6)
	inc a
	push af
	call _ClearGridCell
	ld hl, 3
	push hl
	ld a, (ix-1)
	ld l, a
	dec hl
	push hl
	ld hl, _tanks
	call .core.__ARRAY
	ld (hl), 0
	jp .LABEL._ENDTESTCELLTANK
.LABEL.__LABEL580:
	ld (ix-12), 255
	ld (ix-5), 2
	jp .LABEL._TESTTANKLOOP
.LABEL.__LABEL577:
	ld a, (ix-5)
	sub 2
	jp nz, .LABEL.__LABEL583
	ld a, (ix-10)
	or a
	jp nz, .LABEL.__LABEL584
	inc (ix-4)
	jp .LABEL._ENDTESTCELLTANK
.LABEL.__LABEL584:
	ld a, (ix-10)
	sub 92
	jp nz, .LABEL.__LABEL586
	call _BuildTankDestroyedEffect
	ld a, (ix-7)
	inc a
	push af
	ld a, (ix-6)
	push af
	call _ClearGridCell
	ld hl, 3
	push hl
	ld a, (ix-1)
	ld l, a
	dec hl
	push hl
	ld hl, _tanks
	call .core.__ARRAY
	ld (hl), 0
	jp .LABEL._ENDTESTCELLTANK
.LABEL.__LABEL586:
	ld (ix-10), 255
	ld (ix-5), 3
	jp .LABEL._TESTTANKLOOP
.LABEL.__LABEL583:
	ld a, (ix-5)
	sub 3
	jp nz, .LABEL.__LABEL589
	ld a, (ix-11)
	or a
	jp nz, .LABEL.__LABEL590
	dec (ix-3)
	jp .LABEL._ENDTESTCELLTANK
.LABEL.__LABEL590:
	ld a, (ix-11)
	sub 92
	jp nz, .LABEL.__LABEL592
	call _BuildTankDestroyedEffect
	ld a, (ix-7)
	push af
	ld a, (ix-6)
	dec a
	push af
	call _ClearGridCell
	ld hl, 3
	push hl
	ld a, (ix-1)
	ld l, a
	dec hl
	push hl
	ld hl, _tanks
	call .core.__ARRAY
	ld (hl), 0
	jp .LABEL._ENDTESTCELLTANK
.LABEL.__LABEL592:
	ld (ix-11), 255
	ld (ix-5), 4
	jp .LABEL._TESTTANKLOOP
.LABEL.__LABEL589:
	ld a, (ix-5)
	sub 4
	jp nz, .LABEL._ENDTESTCELLTANK
	ld a, (ix-9)
	or a
	jp nz, .LABEL.__LABEL596
	dec (ix-4)
	jp .LABEL._ENDTESTCELLTANK
.LABEL.__LABEL596:
	ld a, (ix-9)
	sub 92
	jp nz, .LABEL.__LABEL598
	call _BuildTankDestroyedEffect
	ld a, (ix-7)
	dec a
	push af
	ld a, (ix-6)
	push af
	call _ClearGridCell
	ld hl, 3
	push hl
	ld a, (ix-1)
	ld l, a
	dec hl
	push hl
	ld hl, _tanks
	call .core.__ARRAY
	ld (hl), 0
	jp .LABEL._ENDTESTCELLTANK
.LABEL.__LABEL598:
	ld (ix-9), 255
	ld (ix-5), 1
	jp .LABEL._TESTTANKLOOP
.LABEL._ENDTESTCELLTANK:
	ld a, (ix-3)
	push af
	ld hl, 0
	push hl
	ld a, (ix-1)
	ld l, a
	dec hl
	push hl
	ld hl, _tanks
	call .core.__ARRAY
	pop af
	ld (hl), a
	ld a, (ix-4)
	push af
	ld hl, 1
	push hl
	ld a, (ix-1)
	ld l, a
	dec hl
	push hl
	ld hl, _tanks
	call .core.__ARRAY
	pop af
	ld (hl), a
	ld a, (ix-5)
	push af
	ld hl, 2
	push hl
	ld a, (ix-1)
	ld l, a
	dec hl
	push hl
	ld hl, _tanks
	call .core.__ARRAY
	pop af
	ld (hl), a
	ld a, (ix-3)
	inc a
	ld h, a
	ld a, (_playerX)
	call .core.__LEI8
	push af
	ld a, (ix-3)
	dec a
	ld hl, (_playerX - 1)
	call .core.__LEI8
	ld h, a
	pop af
	or a
	jr z, .LABEL.__LABEL757
	ld a, h
.LABEL.__LABEL757:
	or a
	jp z, .LABEL.__LABEL529
	ld a, (ix-3)
	sra a
	ld (ix-6), a
	ld a, (ix-4)
	sra a
	dec a
	ld (ix-7), a
	ld l, a
	add a, a
	sbc a, a
	ld h, a
	push hl
	ld a, (_playerX)
	srl a
	ld l, a
	ld h, 0
	push hl
	call _LineOfSight
	or a
	jp z, .LABEL.__LABEL529
	call _FastRnd
	ld h, a
	ld a, (_tankProbability)
	sub h
	ccf
	jp nc, .LABEL.__LABEL529
	ld a, 2
	ld (_dead), a
	jp _UpdateTanks__leave
.LABEL.__LABEL529:
	inc (ix-1)
.LABEL.__LABEL525:
	ld a, 2
	cp (ix-1)
	jp nc, .LABEL.__LABEL528
_UpdateTanks__leave:
	ld sp, ix
	pop ix
	ret
_TestCollisions:
	push ix
	ld ix, 0
	add ix, sp
	ld hl, -18
	add hl, sp
	ld sp, hl
	ld (hl), 0
	ld bc, 17
	ld d, h
	ld e, l
	inc de
	ldir
	ld a, (_activeShots)
	or a
	jp z, _TestCollisions__leave
	ld a, (_shots.__DATA__ + 0)
	dec a
	ld (ix-2), a
	ld a, (_shots.__DATA__ + 1)
	dec a
	ld (ix-3), a
	ld a, (ix-2)
	add a, 2
	ld (ix-4), a
	ld a, (ix-3)
	add a, 2
	ld (ix-5), a
	ld a, (_activeShots)
	and 1
	ld (ix-14), a
	ld a, (_shots.__DATA__ + 4)
	dec a
	ld (ix-6), a
	ld a, (_shots.__DATA__ + 5)
	dec a
	ld (ix-7), a
	ld a, (ix-6)
	add a, 2
	ld (ix-8), a
	ld a, (ix-7)
	add a, 2
	ld (ix-9), a
	ld a, (_activeShots)
	and 2
	ld (ix-15), a
	ld a, (_shots.__DATA__ + 8)
	ld (ix-10), a
	ld a, (_shots.__DATA__ + 9)
	ld (ix-11), a
	ld a, (ix-10)
	add a, 2
	ld (ix-12), a
	ld a, (ix-11)
	add a, 2
	ld (ix-13), a
	ld a, (_activeShots)
	and 4
	ld (ix-16), a
	ld a, (_activeAliens)
	or a
	jp z, .LABEL.__LABEL609
	ld (ix-1), 1
	jp .LABEL.__LABEL610
.LABEL.__LABEL613:
	ld a, (ix-1)
	ld l, a
	ld h, 0
	ex de, hl
	ld hl, _maskTable.__DATA__
	add hl, de
	dec hl
	ld a, (_activeAliens)
	and (hl)
	jp z, .LABEL.__LABEL614
	ld hl, 0
	push hl
	ld a, (ix-1)
	ld l, a
	dec hl
	push hl
	ld hl, _aliens
	call .core.__ARRAY
	ld a, (hl)
	ld (ix-17), a
	ld hl, 1
	push hl
	ld a, (ix-1)
	ld l, a
	dec hl
	push hl
	ld hl, _aliens
	call .core.__ARRAY
	ld a, (hl)
	ld (ix-18), a
	ld a, (ix-14)
	or a
	jp z, .LABEL.__LABEL618
	ld h, (ix-17)
	ld a, (ix-2)
	call .core.__LEI8
	or a
	jp z, .LABEL.__LABEL618
	ld a, (ix-17)
	ld h, (ix-4)
	call .core.__LEI8
	or a
	jp z, .LABEL.__LABEL618
	ld h, (ix-18)
	ld a, (ix-3)
	call .core.__LEI8
	or a
	jp z, .LABEL.__LABEL618
	ld a, (ix-18)
	ld h, (ix-5)
	call .core.__LEI8
	or a
	jp z, .LABEL.__LABEL618
	ld hl, 3
	push hl
	ld a, (ix-1)
	ld l, a
	dec hl
	push hl
	ld hl, _aliens
	call .core.__ARRAY
	ld (hl), 0
	ld a, (_activeShots)
	and 254
	ld (_activeShots), a
	call _KilledAlienEffect
	jp .LABEL.__LABEL614
.LABEL.__LABEL618:
	ld a, (ix-15)
	or a
	jp z, .LABEL.__LABEL628
	ld h, (ix-17)
	ld a, (ix-6)
	call .core.__LEI8
	or a
	jp z, .LABEL.__LABEL628
	ld a, (ix-17)
	ld h, (ix-8)
	call .core.__LEI8
	or a
	jp z, .LABEL.__LABEL628
	ld h, (ix-18)
	ld a, (ix-7)
	call .core.__LEI8
	or a
	jp z, .LABEL.__LABEL628
	ld a, (ix-18)
	ld h, (ix-9)
	call .core.__LEI8
	or a
	jp z, .LABEL.__LABEL628
	ld hl, 3
	push hl
	ld a, (ix-1)
	ld l, a
	dec hl
	push hl
	ld hl, _aliens
	call .core.__ARRAY
	ld (hl), 0
	ld a, (_activeShots)
	and 253
	ld (_activeShots), a
	call _KilledAlienEffect
	jp .LABEL.__LABEL614
.LABEL.__LABEL628:
	ld a, (ix-16)
	or a
	jp z, .LABEL.__LABEL614
	ld h, (ix-17)
	ld a, (ix-10)
	call .core.__LEI8
	or a
	jp z, .LABEL.__LABEL614
	ld a, (ix-17)
	ld h, (ix-12)
	call .core.__LEI8
	or a
	jp z, .LABEL.__LABEL614
	ld h, (ix-18)
	ld a, (ix-11)
	call .core.__LEI8
	or a
	jp z, .LABEL.__LABEL614
	ld a, (ix-18)
	ld h, (ix-13)
	call .core.__LEI8
	or a
	jp z, .LABEL.__LABEL614
	ld hl, 3
	push hl
	ld a, (ix-1)
	ld l, a
	dec hl
	push hl
	ld hl, _aliens
	call .core.__ARRAY
	ld (hl), 0
	ld a, (_activeShots)
	and 251
	ld (_activeShots), a
	call _KilledAlienEffect
.LABEL.__LABEL614:
	inc (ix-1)
.LABEL.__LABEL610:
	ld a, 4
	cp (ix-1)
	jp nc, .LABEL.__LABEL613
.LABEL.__LABEL609:
	ld a, (_activeTanks)
	or a
	jp z, .LABEL.__LABEL648
	ld (ix-1), 1
	jp .LABEL.__LABEL649
.LABEL.__LABEL652:
	ld a, (ix-1)
	ld l, a
	ld h, 0
	ex de, hl
	ld hl, _maskTable.__DATA__
	add hl, de
	dec hl
	ld a, (_activeTanks)
	and (hl)
	jp z, .LABEL.__LABEL653
	ld hl, 0
	push hl
	ld a, (ix-1)
	ld l, a
	dec hl
	push hl
	ld hl, _tanks
	call .core.__ARRAY
	ld a, (hl)
	ld (ix-17), a
	ld hl, 1
	push hl
	ld a, (ix-1)
	ld l, a
	dec hl
	push hl
	ld hl, _tanks
	call .core.__ARRAY
	ld a, (hl)
	ld (ix-18), a
	ld a, (ix-14)
	or a
	jp z, .LABEL.__LABEL657
	ld h, (ix-17)
	ld a, (ix-2)
	call .core.__LEI8
	or a
	jp z, .LABEL.__LABEL657
	ld a, (ix-17)
	ld h, (ix-4)
	call .core.__LEI8
	or a
	jp z, .LABEL.__LABEL657
	ld h, (ix-18)
	ld a, (ix-3)
	call .core.__LEI8
	or a
	jp z, .LABEL.__LABEL657
	ld a, (ix-18)
	ld h, (ix-5)
	call .core.__LEI8
	or a
	jp z, .LABEL.__LABEL657
	ld hl, 3
	push hl
	ld a, (ix-1)
	ld l, a
	dec hl
	push hl
	ld hl, _tanks
	call .core.__ARRAY
	ld (hl), 0
	ld a, (_activeShots)
	and 254
	ld (_activeShots), a
	call _BuildTankDestroyedEffect
	jp .LABEL.__LABEL653
.LABEL.__LABEL657:
	ld a, (ix-15)
	or a
	jp z, .LABEL.__LABEL667
	ld h, (ix-17)
	ld a, (ix-6)
	call .core.__LEI8
	or a
	jp z, .LABEL.__LABEL667
	ld a, (ix-17)
	ld h, (ix-8)
	call .core.__LEI8
	or a
	jp z, .LABEL.__LABEL667
	ld h, (ix-18)
	ld a, (ix-7)
	call .core.__LEI8
	or a
	jp z, .LABEL.__LABEL667
	ld a, (ix-18)
	ld h, (ix-9)
	call .core.__LEI8
	or a
	jp z, .LABEL.__LABEL667
	ld hl, 3
	push hl
	ld a, (ix-1)
	ld l, a
	dec hl
	push hl
	ld hl, _tanks
	call .core.__ARRAY
	ld (hl), 0
	ld a, (_activeShots)
	and 253
	ld (_activeShots), a
	call _BuildTankDestroyedEffect
	jp .LABEL.__LABEL653
.LABEL.__LABEL667:
	ld a, (ix-16)
	or a
	jp z, .LABEL.__LABEL653
	ld h, (ix-17)
	ld a, (ix-10)
	call .core.__LEI8
	or a
	jp z, .LABEL.__LABEL653
	ld a, (ix-17)
	ld h, (ix-12)
	call .core.__LEI8
	or a
	jp z, .LABEL.__LABEL653
	ld h, (ix-18)
	ld a, (ix-11)
	call .core.__LEI8
	or a
	jp z, .LABEL.__LABEL653
	ld a, (ix-18)
	ld h, (ix-13)
	call .core.__LEI8
	or a
	jp z, .LABEL.__LABEL653
	ld hl, 3
	push hl
	ld a, (ix-1)
	ld l, a
	dec hl
	push hl
	ld hl, _tanks
	call .core.__ARRAY
	ld (hl), 0
	ld a, (_activeShots)
	and 251
	ld (_activeShots), a
	call _BuildTankDestroyedEffect
.LABEL.__LABEL653:
	inc (ix-1)
.LABEL.__LABEL649:
	ld a, 2
	cp (ix-1)
	jp nc, .LABEL.__LABEL652
.LABEL.__LABEL648:
	ld a, (ix-14)
	or a
	jp z, .LABEL.__LABEL687
	ld a, 41
	sub (ix-3)
	jp nz, .LABEL.__LABEL687
	ld a, (_playerX)
	dec a
	sub (ix-2)
	jp nz, .LABEL.__LABEL687
	ld a, 3
	ld (_dead), a
	ld a, (_activeShots)
	and 254
	ld (_activeShots), a
	jp _TestCollisions__leave
.LABEL.__LABEL687:
	ld a, (ix-15)
	or a
	jp z, .LABEL.__LABEL693
	ld a, 41
	sub (ix-7)
	jp nz, .LABEL.__LABEL693
	ld a, (_playerX)
	dec a
	sub (ix-6)
	jp nz, .LABEL.__LABEL693
	ld a, 3
	ld (_dead), a
	ld a, (_activeShots)
	and 253
	ld (_activeShots), a
	jp _TestCollisions__leave
.LABEL.__LABEL693:
	ld a, (ix-16)
	or a
	jp z, _TestCollisions__leave
	ld a, 41
	sub (ix-11)
	jp nz, _TestCollisions__leave
	ld a, (_playerX)
	dec a
	sub (ix-10)
	jp nz, _TestCollisions__leave
	ld a, 3
	ld (_dead), a
	ld a, (_activeShots)
	and 251
	ld (_activeShots), a
_TestCollisions__leave:
	ld sp, ix
	pop ix
	ret
_UpdateShips:
	push ix
	ld ix, 0
	add ix, sp
	ld hl, 0
	push hl
	push hl
	push hl
	inc sp
	ld a, (_activeShips)
	or a
	jp z, _UpdateShips__leave
	ld a, (_freezingShip)
	ld (ix-1), a
	jp .LABEL.__LABEL706
.LABEL.__LABEL709:
	ld a, (ix-1)
	ld l, a
	ld h, 0
	ex de, hl
	ld hl, _maskTable.__DATA__
	add hl, de
	dec hl
	ld a, (_activeShips)
	and (hl)
	jp z, .LABEL.__LABEL710
	ld hl, 3
	push hl
	ld a, (ix-1)
	ld l, a
	dec hl
	push hl
	ld hl, _ships
	call .core.__ARRAY
	ld a, (hl)
	ld h, a
	xor a
	cp h
	jp nc, .LABEL.__LABEL713
	ld hl, 3
	push hl
	ld a, (ix-1)
	ld l, a
	dec hl
	push hl
	ld hl, _ships
	call .core.__ARRAY
	ld a, (hl)
	dec a
	push af
	ld hl, 3
	push hl
	ld a, (ix-1)
	ld l, a
	dec hl
	push hl
	ld hl, _ships
	call .core.__ARRAY
	pop af
	ld (hl), a
	jp .LABEL.__LABEL710
.LABEL.__LABEL713:
	ld a, (_bitTable.__DATA__ + 3)
	ld hl, (_activeAliens - 1)
	xor h
	jp z, .LABEL.__LABEL715
	ld hl, 3
	push hl
	ld a, (ix-1)
	ld l, a
	dec hl
	push hl
	ld hl, _ships
	call .core.__ARRAY
	ld (hl), 50
	ld hl, 0
	push hl
	ld a, (ix-1)
	ld l, a
	dec hl
	push hl
	ld hl, _ships
	call .core.__ARRAY
	ld a, (hl)
	ld (ix-3), a
	ld hl, 1
	push hl
	ld a, (ix-1)
	ld l, a
	dec hl
	push hl
	ld hl, _ships
	call .core.__ARRAY
	ld a, (hl)
	ld (ix-4), a
	ld hl, 2
	push hl
	ld a, (ix-1)
	ld l, a
	dec hl
	push hl
	ld hl, _ships
	call .core.__ARRAY
	ld a, (hl)
	ld (ix-2), a
	dec a
	jp nz, .LABEL.__LABEL717
	inc (ix-3)
	ld (ix-5), 1
	jp .LABEL.__LABEL718
.LABEL.__LABEL717:
	ld a, (ix-2)
	sub 2
	jp nz, .LABEL.__LABEL719
	inc (ix-4)
	ld (ix-5), 1
	jp .LABEL.__LABEL718
.LABEL.__LABEL719:
	ld a, (ix-2)
	sub 3
	jp nz, .LABEL.__LABEL721
	dec (ix-3)
	ld (ix-5), 255
	jp .LABEL.__LABEL718
.LABEL.__LABEL721:
	ld a, (ix-2)
	sub 4
	jp nz, .LABEL.__LABEL718
	dec (ix-4)
	ld (ix-5), 255
.LABEL.__LABEL718:
	ld a, (_activeAliens)
	call _FindEmptyBit
	ld (ix-2), a
	ld l, a
	ld h, 0
	ex de, hl
	ld hl, _maskTable.__DATA__
	add hl, de
	dec hl
	ld a, (_activeAliens)
	or (hl)
	ld (_activeAliens), a
	ld a, (ix-3)
	add a, a
	push af
	ld hl, 0
	push hl
	ld a, (ix-2)
	ld l, a
	dec hl
	push hl
	ld hl, _aliens
	call .core.__ARRAY
	pop af
	ld (hl), a
	ld a, (ix-4)
	inc a
	add a, a
	push af
	ld hl, 1
	push hl
	ld a, (ix-2)
	ld l, a
	dec hl
	push hl
	ld hl, _aliens
	call .core.__ARRAY
	pop af
	ld (hl), a
	ld a, (ix-5)
	push af
	ld hl, 2
	push hl
	ld a, (ix-2)
	ld l, a
	dec hl
	push hl
	ld hl, _aliens
	call .core.__ARRAY
	pop af
	ld (hl), a
	ld hl, 3
	push hl
	ld a, (ix-2)
	ld l, a
	dec hl
	push hl
	ld hl, _aliens
	call .core.__ARRAY
	ld (hl), 255
	ld a, 1
	ld (_freezingShip), a
	jp .LABEL.__LABEL710
.LABEL.__LABEL715:
	ld a, (ix-1)
	ld (_freezingShip), a
	jp _UpdateShips__leave
.LABEL.__LABEL710:
	inc (ix-1)
.LABEL.__LABEL706:
	ld a, 4
	cp (ix-1)
	jp nc, .LABEL.__LABEL709
_UpdateShips__leave:
	ld sp, ix
	pop ix
	ret
_UpdateHangars:
	push ix
	ld ix, 0
	add ix, sp
	ld hl, 0
	push hl
	push hl
	push hl
	inc sp
	ld a, (_activeHangars)
	or a
	jp z, _UpdateHangars__leave
	ld a, (_freezingHangar)
	ld (ix-1), a
	jp .LABEL.__LABEL727
.LABEL.__LABEL730:
	ld a, (ix-1)
	ld l, a
	ld h, 0
	ex de, hl
	ld hl, _maskTable.__DATA__
	add hl, de
	dec hl
	ld a, (_activeHangars)
	and (hl)
	jp z, .LABEL.__LABEL731
	ld hl, 3
	push hl
	ld a, (ix-1)
	ld l, a
	dec hl
	push hl
	ld hl, _hangars
	call .core.__ARRAY
	ld a, (hl)
	ld h, a
	xor a
	cp h
	jp nc, .LABEL.__LABEL734
	ld hl, 3
	push hl
	ld a, (ix-1)
	ld l, a
	dec hl
	push hl
	ld hl, _hangars
	call .core.__ARRAY
	ld a, (hl)
	dec a
	push af
	ld hl, 3
	push hl
	ld a, (ix-1)
	ld l, a
	dec hl
	push hl
	ld hl, _hangars
	call .core.__ARRAY
	pop af
	ld (hl), a
	jp .LABEL.__LABEL731
.LABEL.__LABEL734:
	ld a, (_bitTable.__DATA__ + 1)
	ld hl, (_activeTanks - 1)
	xor h
	jp z, .LABEL.__LABEL736
	ld hl, 3
	push hl
	ld a, (ix-1)
	ld l, a
	dec hl
	push hl
	ld hl, _hangars
	call .core.__ARRAY
	ld (hl), 150
	ld hl, 0
	push hl
	ld a, (ix-1)
	ld l, a
	dec hl
	push hl
	ld hl, _hangars
	call .core.__ARRAY
	ld a, (hl)
	ld (ix-2), a
	ld hl, 1
	push hl
	ld a, (ix-1)
	ld l, a
	dec hl
	push hl
	ld hl, _hangars
	call .core.__ARRAY
	ld a, (hl)
	ld (ix-3), a
	ld hl, 2
	push hl
	ld a, (ix-1)
	ld l, a
	dec hl
	push hl
	ld hl, _hangars
	call .core.__ARRAY
	ld a, (hl)
	ld (ix-4), a
	dec a
	jp nz, .LABEL.__LABEL738
	inc (ix-2)
	jp .LABEL.__LABEL739
.LABEL.__LABEL738:
	ld a, (ix-4)
	sub 2
	jp nz, .LABEL.__LABEL740
	inc (ix-3)
	jp .LABEL.__LABEL739
.LABEL.__LABEL740:
	ld a, (ix-4)
	sub 3
	jp nz, .LABEL.__LABEL742
	dec (ix-2)
	jp .LABEL.__LABEL739
.LABEL.__LABEL742:
	ld a, (ix-4)
	sub 4
	jp nz, .LABEL.__LABEL739
	dec (ix-3)
.LABEL.__LABEL739:
	ld a, (_activeTanks)
	call _FindEmptyBit
	ld (ix-5), a
	ld l, a
	ld h, 0
	ex de, hl
	ld hl, _maskTable.__DATA__
	add hl, de
	dec hl
	ld a, (_activeTanks)
	or (hl)
	ld (_activeTanks), a
	ld a, (ix-2)
	add a, a
	push af
	ld hl, 0
	push hl
	ld a, (ix-5)
	ld l, a
	dec hl
	push hl
	ld hl, _tanks
	call .core.__ARRAY
	pop af
	ld (hl), a
	ld a, (ix-3)
	inc a
	add a, a
	push af
	ld hl, 1
	push hl
	ld a, (ix-5)
	ld l, a
	dec hl
	push hl
	ld hl, _tanks
	call .core.__ARRAY
	pop af
	ld (hl), a
	ld a, (ix-4)
	push af
	ld hl, 2
	push hl
	ld a, (ix-5)
	ld l, a
	dec hl
	push hl
	ld hl, _tanks
	call .core.__ARRAY
	pop af
	ld (hl), a
	ld hl, 3
	push hl
	ld a, (ix-5)
	ld l, a
	dec hl
	push hl
	ld hl, _tanks
	call .core.__ARRAY
	ld (hl), 255
	ld a, 1
	ld (_freezingHangar), a
	jp .LABEL.__LABEL731
.LABEL.__LABEL736:
	ld a, (ix-1)
	ld (_freezingHangar), a
	jp _UpdateHangars__leave
.LABEL.__LABEL731:
	inc (ix-1)
.LABEL.__LABEL727:
	ld a, 2
	cp (ix-1)
	jp nc, .LABEL.__LABEL730
_UpdateHangars__leave:
	ld sp, ix
	pop ix
	ret
.LABEL.__LABEL118:
	DEFW 0001h
	DEFB 30h
.LABEL.__LABEL129:
	DEFW 0001h
	DEFB 3Ah
.LABEL.__LABEL130:
	DEFW 0006h
	DEFB 4Ch
	DEFB 45h
	DEFB 56h
	DEFB 45h
	DEFB 4Ch
	DEFB 3Ah
.LABEL.__LABEL131:
	DEFW 0006h
	DEFB 53h
	DEFB 43h
	DEFB 4Fh
	DEFB 52h
	DEFB 45h
	DEFB 3Ah
.LABEL.__LABEL132:
	DEFW 0004h
	DEFB 53h
	DEFB 41h
	DEFB 54h
	DEFB 3Ah
.LABEL.__LABEL160:
	DEFW 0007h
	DEFB 4Eh
	DEFB 4Fh
	DEFB 4Eh
	DEFB 45h
	DEFB 20h
	DEFB 20h
	DEFB 20h
.LABEL.__LABEL423:
	DEFW 0007h
	DEFB 42h
	DEFB 41h
	DEFB 52h
	DEFB 52h
	DEFB 49h
	DEFB 45h
	DEFB 52h
.LABEL.__LABEL426:
	DEFW 0007h
	DEFB 4Dh
	DEFB 49h
	DEFB 4Eh
	DEFB 45h
	DEFB 20h
	DEFB 20h
	DEFB 20h
.LABEL.__LABEL429:
	DEFW 0007h
	DEFB 42h
	DEFB 4Fh
	DEFB 4Dh
	DEFB 42h
	DEFB 20h
	DEFB 20h
	DEFB 20h
.LABEL.__LABEL432:
	DEFW 0007h
	DEFB 4Ch
	DEFB 41h
	DEFB 53h
	DEFB 45h
	DEFB 52h
	DEFB 20h
	DEFB 20h
.LABEL.__LABEL435:
	DEFW 0007h
	DEFB 46h
	DEFB 49h
	DEFB 52h
	DEFB 45h
	DEFB 20h
	DEFB 20h
	DEFB 20h
.LABEL.__LABEL438:
	DEFW 0007h
	DEFB 57h
	DEFB 49h
	DEFB 50h
	DEFB 45h
	DEFB 20h
	DEFB 20h
	DEFB 20h
	;; --- end of user code ---
#line 1 "C:/zxbasic/src/arch/zx48k/library-asm/array.asm"
; vim: ts=4:et:sw=4:
	; Copyleft (K) by Jose M. Rodriguez de la Rosa
	;  (a.k.a. Boriel)
;  http://www.boriel.com
	; -------------------------------------------------------------------
	; Simple array Index routine
	; Number of total indexes dimensions - 1 at beginning of memory
	; HL = Start of array memory (First two bytes contains N-1 dimensions)
	; Dimension values on the stack, (top of the stack, highest dimension)
	; E.g. A(2, 4) -> PUSH <4>; PUSH <2>

	; For any array of N dimension A(aN-1, ..., a1, a0)
	; and dimensions D[bN-1, ..., b1, b0], the offset is calculated as
	; O = [a0 + b0 * (a1 + b1 * (a2 + ... bN-2(aN-1)))]
; What I will do here is to calculate the following sequence:
	; ((aN-1 * bN-2) + aN-2) * bN-3 + ...


#line 1 "C:/zxbasic/src/arch/zx48k/library-asm/mul16.asm"

.core.__MUL16:	; Mutiplies HL with the last value stored into de stack
	    ; Works for both signed and unsigned

	    PROC

	    LOCAL __MUL16LOOP
	    LOCAL __MUL16NOADD

	    ex de, hl
	    pop hl		; Return address
	    ex (sp), hl ; CALLEE caller convention

.core.__MUL16_FAST:
	    ld b, 16
	    ld a, h
	    ld c, l
	    ld hl, 0

__MUL16LOOP:
	    add hl, hl  ; hl << 1
	    sla c
	    rla         ; a,c << 1
	    jp nc, __MUL16NOADD
	    add hl, de

__MUL16NOADD:
	    djnz __MUL16LOOP

	    ret	; Result in hl (16 lower bits)

	    ENDP


#line 20 "C:/zxbasic/src/arch/zx48k/library-asm/array.asm"

#line 24 "C:/zxbasic/src/arch/zx48k/library-asm/array.asm"


.core.__ARRAY_PTR:   ;; computes an array offset from a pointer
	    ld c, (hl)
	    inc hl
	    ld h, (hl)
	    ld l, c

.core.__ARRAY:
	    PROC

	    LOCAL LOOP
	    LOCAL ARRAY_END
	    LOCAL RET_ADDRESS ; Stores return address
	    LOCAL TMP_ARR_PTR ; Stores pointer temporarily

	    ld e, (hl)
	    inc hl
	    ld d, (hl)
	    inc hl
	    ld (TMP_ARR_PTR), hl
	    ex de, hl
	    ex (sp), hl	; Return address in HL, array address in the stack
	    ld (RET_ADDRESS + 1), hl ; Stores it for later

	    exx
	    pop hl		; Will use H'L' as the pointer
	    ld c, (hl)	; Loads Number of dimensions from (hl)
	    inc hl
	    ld b, (hl)
	    inc hl		; Ready
	    exx

	    ld hl, 0	; HL = Offset "accumulator"

LOOP:
#line 64 "C:/zxbasic/src/arch/zx48k/library-asm/array.asm"
	    pop bc		; Get next index (Ai) from the stack

#line 74 "C:/zxbasic/src/arch/zx48k/library-asm/array.asm"

	    add hl, bc	; Adds current index

	    exx			; Checks if B'C' = 0
	    ld a, b		; Which means we must exit (last element is not multiplied by anything)
	    or c
	    jr z, ARRAY_END		; if B'Ci == 0 we are done

	    ld e, (hl)			; Loads next dimension into D'E'
	    inc hl
	    ld d, (hl)
	    inc hl
	    push de
	    dec bc				; Decrements loop counter
	    exx
	    pop de				; DE = Max bound Number (i-th dimension)

	    call __FNMUL
	    jp LOOP

ARRAY_END:
	    ld a, (hl)
	    exx

#line 103 "C:/zxbasic/src/arch/zx48k/library-asm/array.asm"
	    LOCAL ARRAY_SIZE_LOOP

	    ex de, hl
	    ld hl, 0
	    ld b, a
ARRAY_SIZE_LOOP:
	    add hl, de
	    djnz ARRAY_SIZE_LOOP

#line 113 "C:/zxbasic/src/arch/zx48k/library-asm/array.asm"

	    ex de, hl
	    ld hl, (TMP_ARR_PTR)
	    ld a, (hl)
	    inc hl
	    ld h, (hl)
	    ld l, a
	    add hl, de  ; Adds element start

RET_ADDRESS:
	    jp 0

	    ;; Performs a faster multiply for little 16bit numbs
	    LOCAL __FNMUL, __FNMUL2

__FNMUL:
	    xor a
	    or h
	    jp nz, .core.__MUL16_FAST
	    or l
	    ret z

	    cp 33
	    jp nc, .core.__MUL16_FAST

	    ld b, l
	    ld l, h  ; HL = 0

__FNMUL2:
	    add hl, de
	    djnz __FNMUL2
	    ret

TMP_ARR_PTR:
	    DW 0  ; temporary storage for pointer to tables

	    ENDP


#line 5837 "C:\Users\geniw\source\repos\BattleGrid\BattleGrid\ZxBasicFiles\BattleGrid.zxbas"
#line 1 "C:/zxbasic/src/arch/zx48k/library-asm/asc.asm"
	; Returns the ascii code for the given str
#line 1 "C:/zxbasic/src/arch/zx48k/library-asm/free.asm"
; vim: ts=4:et:sw=4:
	; Copyleft (K) by Jose M. Rodriguez de la Rosa
	;  (a.k.a. Boriel)
;  http://www.boriel.com
	;
	; This ASM library is licensed under the BSD license
	; you can use it for any purpose (even for commercial
	; closed source programs).
	;
	; Please read the BSD license on the internet

	; ----- IMPLEMENTATION NOTES ------
	; The heap is implemented as a linked list of free blocks.

; Each free block contains this info:
	;
	; +----------------+ <-- HEAP START
	; | Size (2 bytes) |
	; |        0       | <-- Size = 0 => DUMMY HEADER BLOCK
	; +----------------+
	; | Next (2 bytes) |---+
	; +----------------+ <-+
	; | Size (2 bytes) |
	; +----------------+
	; | Next (2 bytes) |---+
	; +----------------+   |
	; | <free bytes...>|   | <-- If Size > 4, then this contains (size - 4) bytes
	; | (0 if Size = 4)|   |
	; +----------------+ <-+
	; | Size (2 bytes) |
	; +----------------+
	; | Next (2 bytes) |---+
	; +----------------+   |
	; | <free bytes...>|   |
	; | (0 if Size = 4)|   |
	; +----------------+   |
	;   <Allocated>        | <-- This zone is in use (Already allocated)
	; +----------------+ <-+
	; | Size (2 bytes) |
	; +----------------+
	; | Next (2 bytes) |---+
	; +----------------+   |
	; | <free bytes...>|   |
	; | (0 if Size = 4)|   |
	; +----------------+ <-+
	; | Next (2 bytes) |--> NULL => END OF LIST
	; |    0 = NULL    |
	; +----------------+
	; | <free bytes...>|
	; | (0 if Size = 4)|
	; +----------------+


	; When a block is FREED, the previous and next pointers are examined to see
	; if we can defragment the heap. If the block to be breed is just next to the
	; previous, or to the next (or both) they will be converted into a single
	; block (so defragmented).


	;   MEMORY MANAGER
	;
	; This library must be initialized calling __MEM_INIT with
	; HL = BLOCK Start & DE = Length.

	; An init directive is useful for initialization routines.
	; They will be added automatically if needed.

#line 1 "C:/zxbasic/src/arch/zx48k/library-asm/heapinit.asm"
; vim: ts=4:et:sw=4:
	; Copyleft (K) by Jose M. Rodriguez de la Rosa
	;  (a.k.a. Boriel)
;  http://www.boriel.com
	;
	; This ASM library is licensed under the BSD license
	; you can use it for any purpose (even for commercial
	; closed source programs).
	;
	; Please read the BSD license on the internet

	; ----- IMPLEMENTATION NOTES ------
	; The heap is implemented as a linked list of free blocks.

; Each free block contains this info:
	;
	; +----------------+ <-- HEAP START
	; | Size (2 bytes) |
	; |        0       | <-- Size = 0 => DUMMY HEADER BLOCK
	; +----------------+
	; | Next (2 bytes) |---+
	; +----------------+ <-+
	; | Size (2 bytes) |
	; +----------------+
	; | Next (2 bytes) |---+
	; +----------------+   |
	; | <free bytes...>|   | <-- If Size > 4, then this contains (size - 4) bytes
	; | (0 if Size = 4)|   |
	; +----------------+ <-+
	; | Size (2 bytes) |
	; +----------------+
	; | Next (2 bytes) |---+
	; +----------------+   |
	; | <free bytes...>|   |
	; | (0 if Size = 4)|   |
	; +----------------+   |
	;   <Allocated>        | <-- This zone is in use (Already allocated)
	; +----------------+ <-+
	; | Size (2 bytes) |
	; +----------------+
	; | Next (2 bytes) |---+
	; +----------------+   |
	; | <free bytes...>|   |
	; | (0 if Size = 4)|   |
	; +----------------+ <-+
	; | Next (2 bytes) |--> NULL => END OF LIST
	; |    0 = NULL    |
	; +----------------+
	; | <free bytes...>|
	; | (0 if Size = 4)|
	; +----------------+


	; When a block is FREED, the previous and next pointers are examined to see
	; if we can defragment the heap. If the block to be breed is just next to the
	; previous, or to the next (or both) they will be converted into a single
	; block (so defragmented).


	;   MEMORY MANAGER
	;
	; This library must be initialized calling __MEM_INIT with
	; HL = BLOCK Start & DE = Length.

	; An init directive is useful for initialization routines.
	; They will be added automatically if needed.




	; ---------------------------------------------------------------------
	;  __MEM_INIT must be called to initalize this library with the
	; standard parameters
	; ---------------------------------------------------------------------

.core.__MEM_INIT: ; Initializes the library using (RAMTOP) as start, and
	    ld hl, .core.ZXBASIC_MEM_HEAP  ; Change this with other address of heap start
	    ld de, .core.ZXBASIC_HEAP_SIZE ; Change this with your size

	; ---------------------------------------------------------------------
	;  .core.__MEM_INIT2 initalizes this library
; Parameters:
;   HL : Memory address of 1st byte of the memory heap
;   DE : Length in bytes of the Memory Heap
	; ---------------------------------------------------------------------
.core.__MEM_INIT2:
	    ; HL as TOP
	    PROC

	    dec de
	    dec de
	    dec de
	    dec de        ; DE = length - 4; HL = start
	    ; This is done, because we require 4 bytes for the empty dummy-header block

	    xor a
	    ld (hl), a
	    inc hl
    ld (hl), a ; First "free" block is a header: size=0, Pointer=&(Block) + 4
	    inc hl

	    ld b, h
	    ld c, l
	    inc bc
	    inc bc      ; BC = starts of next block

	    ld (hl), c
	    inc hl
	    ld (hl), b
	    inc hl      ; Pointer to next block

	    ld (hl), e
	    inc hl
	    ld (hl), d
	    inc hl      ; Block size (should be length - 4 at start); This block contains all the available memory

	    ld (hl), a ; NULL (0000h) ; No more blocks (a list with a single block)
	    inc hl
	    ld (hl), a

	    ld a, 201
	    ld (.core.__MEM_INIT), a; "Pokes" with a RET so ensure this routine is not called again
	    ret

	    ENDP


#line 69 "C:/zxbasic/src/arch/zx48k/library-asm/free.asm"

	; ---------------------------------------------------------------------
	; MEM_FREE
	;  Frees a block of memory
	;
; Parameters:
	;  HL = Pointer to the block to be freed. If HL is NULL (0) nothing
	;  is done
	; ---------------------------------------------------------------------


.core.MEM_FREE:
.core.__MEM_FREE: ; Frees the block pointed by HL
	    ; HL DE BC & AF modified
	    PROC

	    LOCAL __MEM_LOOP2
	    LOCAL __MEM_LINK_PREV
	    LOCAL __MEM_JOIN_TEST
	    LOCAL __MEM_BLOCK_JOIN

	    ld a, h
	    or l
	    ret z       ; Return if NULL pointer

	    dec hl
	    dec hl
	    ld b, h
	    ld c, l    ; BC = Block pointer

	    ld hl, .core.ZXBASIC_MEM_HEAP  ; This label point to the heap start

__MEM_LOOP2:
	    inc hl
	    inc hl     ; Next block ptr

	    ld e, (hl)
	    inc hl
	    ld d, (hl) ; Block next ptr
	    ex de, hl  ; DE = &(block->next); HL = block->next

	    ld a, h    ; HL == NULL?
	    or l
	    jp z, __MEM_LINK_PREV; if so, link with previous

	    or a       ; Clear carry flag
	    sbc hl, bc ; Carry if BC > HL => This block if before
	    add hl, bc ; Restores HL, preserving Carry flag
	    jp c, __MEM_LOOP2 ; This block is before. Keep searching PASS the block

	;------ At this point current HL is PAST BC, so we must link (DE) with BC, and HL in BC->next

__MEM_LINK_PREV:    ; Link (DE) with BC, and BC->next with HL
	    ex de, hl
	    push hl
	    dec hl

	    ld (hl), c
	    inc hl
	    ld (hl), b ; (DE) <- BC

	    ld h, b    ; HL <- BC (Free block ptr)
	    ld l, c
	    inc hl     ; Skip block length (2 bytes)
	    inc hl
	    ld (hl), e ; Block->next = DE
	    inc hl
	    ld (hl), d
	    ; --- LINKED ; HL = &(BC->next) + 2

	    call __MEM_JOIN_TEST
	    pop hl

__MEM_JOIN_TEST:   ; Checks for fragmented contiguous blocks and joins them
	    ; hl = Ptr to current block + 2
	    ld d, (hl)
	    dec hl
	    ld e, (hl)
	    dec hl
	    ld b, (hl) ; Loads block length into BC
	    dec hl
	    ld c, (hl) ;

	    push hl    ; Saves it for later
	    add hl, bc ; Adds its length. If HL == DE now, it must be joined
	    or a
	    sbc hl, de ; If Z, then HL == DE => We must join
	    pop hl
	    ret nz

__MEM_BLOCK_JOIN:  ; Joins current block (pointed by HL) with next one (pointed by DE). HL->length already in BC
	    push hl    ; Saves it for later
	    ex de, hl

	    ld e, (hl) ; DE -> block->next->length
	    inc hl
	    ld d, (hl)
	    inc hl

	    ex de, hl  ; DE = &(block->next)
	    add hl, bc ; HL = Total Length

	    ld b, h
	    ld c, l    ; BC = Total Length

	    ex de, hl
	    ld e, (hl)
	    inc hl
	    ld d, (hl) ; DE = block->next

	    pop hl     ; Recovers Pointer to block
	    ld (hl), c
	    inc hl
	    ld (hl), b ; Length Saved
	    inc hl
	    ld (hl), e
	    inc hl
	    ld (hl), d ; Next saved
	    ret

	    ENDP


#line 3 "C:/zxbasic/src/arch/zx48k/library-asm/asc.asm"


.core.__ASC:
	    PROC
	    LOCAL __ASC_END

	    ex af, af'	; Saves free_mem flag

	    ld a, h
	    or l
	    ret z		; NULL? return

	    ld c, (hl)
	    inc hl
	    ld b, (hl)

	    ld a, b
	    or c
	    jr z, __ASC_END		; No length? return

	    inc hl
	    ld a, (hl)
	    dec hl

__ASC_END:
	    dec hl
	    ex af, af'
	    or a
	    call nz, .core.__MEM_FREE	; Free memory if needed

	    ex af, af'	; Recover result

	    ret
	    ENDP

#line 5838 "C:\Users\geniw\source\repos\BattleGrid\BattleGrid\ZxBasicFiles\BattleGrid.zxbas"
#line 1 "C:/zxbasic/src/arch/zx48k/library-asm/border.asm"
	; __FASTCALL__ Routine to change de border
	; Parameter (color) specified in A register


	.core.BORDER EQU 229Bh



	; Nothing to do! (Directly from the ZX Spectrum ROM)
#line 5839 "C:\Users\geniw\source\repos\BattleGrid\BattleGrid\ZxBasicFiles\BattleGrid.zxbas"
#line 1 "C:/zxbasic/src/arch/zx48k/library-asm/bright.asm"
	; Sets bright flag in ATTR_P permanently
; Parameter: Paper color in A register

#line 1 "C:/zxbasic/src/arch/zx48k/library-asm/const.asm"
	; Global constants


	.core.P_FLAG	EQU 23697
	.core.FLAGS2	EQU 23681
	.core.ATTR_P	EQU 23693	; permanet ATTRIBUTES
	.core.ATTR_T	EQU 23695	; temporary ATTRIBUTES
	.core.CHARS	EQU 23606 ; Pointer to ROM/RAM Charset
	.core.UDG	EQU 23675 ; Pointer to .core.UDG Charset
	.core.MEM0	EQU 5C92h ; Temporary memory buffer used by ROM chars


#line 5 "C:/zxbasic/src/arch/zx48k/library-asm/bright.asm"


.core.BRIGHT:
	    ld hl, .core.ATTR_P

	    PROC
	    LOCAL IS_TR
	    LOCAL IS_ZERO

.core.__SET_BRIGHT:
	    ; Another entry. This will set the bright flag at location pointer by DE
	    cp 8
	    jr z, IS_TR

	    ; # Convert to 0/1
	    or a
	    jr z, IS_ZERO
	    ld a, 0x40

IS_ZERO:
	    ld b, a	; Saves the color
	    ld a, (hl)
	    and 0BFh ; Clears previous value
	    or b
	    ld (hl), a
	    inc hl
	    res 6, (hl)  ;Reset bit 6 to disable transparency
	    ret

IS_TR:  ; transparent
	    inc hl ; Points DE to MASK_T or MASK_P
	    set 6, (hl)  ;Set bit 6 to enable transparency
	    ret

	; Sets the .core.BRIGHT flag passed in A register in the .core.ATTR_T variable
.core.BRIGHT_TMP:
	    ld hl, .core.ATTR_T
	    jr .core.__SET_BRIGHT
	    ENDP

#line 5840 "C:\Users\geniw\source\repos\BattleGrid\BattleGrid\ZxBasicFiles\BattleGrid.zxbas"
#line 1 "C:/zxbasic/src/arch/zx48k/library-asm/cls.asm"
	; JUMPS directly to spectrum CLS
	; This routine does not clear lower screen

	;CLS	EQU	0DAFh

	; Our faster implementation

#line 1 "C:/zxbasic/src/arch/zx48k/library-asm/sposn.asm"
	; Printing positioning library.

	    PROC
	    LOCAL ECHO_E

.core.__LOAD_S_POSN:		; Loads into DE current ROW, COL print position from .core.S_POSN mem var.
	    ld de, (.core.S_POSN)
	    ld hl, (.core.MAXX)
	    or a
	    sbc hl, de
	    ex de, hl
	    ret


.core.__SAVE_S_POSN:		; Saves ROW, COL from DE into .core.S_POSN mem var.
	    ld hl, (.core.MAXX)
	    or a
	    sbc hl, de
	    ld (.core.S_POSN), hl ; saves it again
	    ret


	ECHO_E	EQU 23682
	.core.MAXX	EQU ECHO_E   ; Max X position + 1
	.core.MAXY	EQU .core.MAXX + 1 ; Max Y position + 1

	.core.S_POSN	EQU 23688
	.core.POSX	EQU .core.S_POSN		; Current POS X
	.core.POSY	EQU .core.S_POSN + 1	; Current POS Y

	    ENDP


#line 9 "C:/zxbasic/src/arch/zx48k/library-asm/cls.asm"


.core.CLS:
	    PROC

	    LOCAL COORDS
	    LOCAL __CLS_SCR
	    LOCAL ATTR_P
	    LOCAL SCREEN

	    ld hl, 0
	    ld (COORDS), hl
	    ld hl, 1821h
	    ld (.core.S_POSN), hl
__CLS_SCR:
	    ld hl, SCREEN
	    ld (hl), 0
	    ld d, h
	    ld e, l
	    inc de
	    ld bc, 6144
	    ldir

	    ; Now clear attributes

	    ld a, (ATTR_P)
	    ld (hl), a
	    ld bc, 767
	    ldir
	    ret

	COORDS	EQU	23677
	SCREEN	EQU 16384 ; Default start of the screen (can be changed)
	ATTR_P	EQU 23693
	;you can poke (SCREEN_SCRADDR) to change .core.CLS, DRAW & PRINTing address

	.core.SCREEN_ADDR EQU (__CLS_SCR + 1) ; Address used by print and other screen routines
	    ; to get the start of the screen
	    ENDP


#line 5841 "C:\Users\geniw\source\repos\BattleGrid\BattleGrid\ZxBasicFiles\BattleGrid.zxbas"
#line 1 "C:/zxbasic/src/arch/zx48k/library-asm/copy_attr.asm"

#line 1 "C:/zxbasic/src/arch/zx48k/library-asm/print.asm"
; vim:ts=4:sw=4:et:
; vim:ts=4:sw=4:et:
	; PRINT command routine
	; Does not print attribute. Use PRINT_STR or PRINT_NUM for that



#line 1 "C:/zxbasic/src/arch/zx48k/library-asm/in_screen.asm"

#line 1 "C:/zxbasic/src/arch/zx48k/library-asm/error.asm"
	; Simple error control routines
; vim:ts=4:et:


	ERR_NR    EQU    23610    ; Error code system variable


	; Error code definitions (as in ZX spectrum manual)

; Set error code with:
	;    ld a, ERROR_CODE
	;    ld (ERR_NR), a


	ERROR_Ok                EQU    -1
	ERROR_SubscriptWrong    EQU     2
	ERROR_OutOfMemory       EQU     3
	ERROR_OutOfScreen       EQU     4
	ERROR_NumberTooBig      EQU     5
	ERROR_InvalidArg        EQU     9
	ERROR_IntOutOfRange     EQU    10
	ERROR_NonsenseInBasic   EQU    11
	ERROR_InvalidFileName   EQU    14
	ERROR_InvalidColour     EQU    19
	ERROR_BreakIntoProgram  EQU    20
	ERROR_TapeLoadingErr    EQU    26


	; Raises error using RST #8
.core.__ERROR:
	    ld (.core.__ERROR_CODE), a
	    rst 8
.core.__ERROR_CODE:
	    nop
	    ret

	; Sets the error system variable, but keeps running.
	; Usually this instruction if followed by the END intermediate instruction.
.core.__STOP:
	    ld (ERR_NR), a
	    ret

#line 3 "C:/zxbasic/src/arch/zx48k/library-asm/in_screen.asm"


.core.__IN_SCREEN:
	    ; Returns NO carry if current coords (D, E)
	    ; are OUT of the screen limits (.core.MAXX, .core.MAXY)

	    PROC
	    LOCAL __IN_SCREEN_ERR

	    ld hl, .core.MAXX
	    ld a, e
	    cp (hl)
	    jr nc, __IN_SCREEN_ERR	; Do nothing and return if out of range

	    ld a, d
	    inc hl
	    cp (hl)
	    ;; jr nc, __IN_SCREEN_ERR	; Do nothing and return if out of range
	    ;; ret
	    ret c                       ; Return if carry (OK)

__IN_SCREEN_ERR:
.core.__OUT_OF_SCREEN_ERR:
	    ; Jumps here if out of screen
	    ld a, ERROR_OutOfScreen
	    jp .core.__STOP   ; Saves error code and exits

	    ENDP

#line 9 "C:/zxbasic/src/arch/zx48k/library-asm/print.asm"
#line 1 "C:/zxbasic/src/arch/zx48k/library-asm/table_jump.asm"


.core.JUMP_HL_PLUS_2A: ; Does JP (HL + A*2) Modifies DE. Modifies A
	    add a, a

.core.JUMP_HL_PLUS_A:	 ; Does JP (HL + A) Modifies DE
	    ld e, a
	    ld d, 0

.core.JUMP_HL_PLUS_DE: ; Does JP (HL + DE)
	    add hl, de
	    ld e, (hl)
	    inc hl
	    ld d, (hl)
	    ex de, hl
.core.CALL_HL:
	    jp (hl)


#line 10 "C:/zxbasic/src/arch/zx48k/library-asm/print.asm"
#line 1 "C:/zxbasic/src/arch/zx48k/library-asm/ink.asm"
	; Sets ink color in ATTR_P permanently
; Parameter: Paper color in A register




.core.INK:
	    PROC
	    LOCAL __SET_INK
	    LOCAL __SET_INK2

	    ld de, .core.ATTR_P

__SET_INK:
	    cp 8
	    jr nz, __SET_INK2

	    inc de ; Points DE to MASK_T or MASK_P
	    ld a, (de)
	    or 7 ; Set bits 0,1,2 to enable transparency
	    ld (de), a
	    ret

__SET_INK2:
	    ; Another entry. This will set the ink color at location pointer by DE
	    and 7	; # Gets color mod 8
	    ld b, a	; Saves the color
	    ld a, (de)
	    and 0F8h ; Clears previous value
	    or b
	    ld (de), a
	    inc de ; Points DE to MASK_T or MASK_P
	    ld a, (de)
	    and 0F8h ; Reset bits 0,1,2 sign to disable transparency
	    ld (de), a ; Store new attr
	    ret

	; Sets the .core.INK color passed in A register in the .core.ATTR_T variable
.core.INK_TMP:
	    ld de, .core.ATTR_T
	    jp __SET_INK

	    ENDP


#line 11 "C:/zxbasic/src/arch/zx48k/library-asm/print.asm"
#line 1 "C:/zxbasic/src/arch/zx48k/library-asm/paper.asm"
	; Sets paper color in ATTR_P permanently
; Parameter: Paper color in A register




.core.PAPER:
	    PROC
	    LOCAL __SET_PAPER
	    LOCAL __SET_PAPER2

	    ld de, .core.ATTR_P

__SET_PAPER:
	    cp 8
	    jr nz, __SET_PAPER2
	    inc de
	    ld a, (de)
	    or 038h
	    ld (de), a
	    ret

	    ; Another entry. This will set the paper color at location pointer by DE
__SET_PAPER2:
	    and 7	; # Remove
	    rlca
	    rlca
	    rlca		; a *= 8

	    ld b, a	; Saves the color
	    ld a, (de)
	    and 0C7h ; Clears previous value
	    or b
	    ld (de), a
	    inc de ; Points to MASK_T or MASK_P accordingly
	    ld a, (de)
	    and 0C7h  ; Resets bits 3,4,5
	    ld (de), a
	    ret


	; Sets the .core.PAPER color passed in A register in the .core.ATTR_T variable
.core.PAPER_TMP:
	    ld de, .core.ATTR_T
	    jp __SET_PAPER
	    ENDP


#line 12 "C:/zxbasic/src/arch/zx48k/library-asm/print.asm"
#line 1 "C:/zxbasic/src/arch/zx48k/library-asm/flash.asm"
	; Sets flash flag in ATTR_P permanently
; Parameter: Paper color in A register




.core.FLASH:
	    ld hl, .core.ATTR_P

	    PROC
	    LOCAL IS_TR
	    LOCAL IS_ZERO

.core.__SET_FLASH:
	    ; Another entry. This will set the flash flag at location pointer by DE
	    cp 8
	    jr z, IS_TR

	    ; # Convert to 0/1
	    or a
	    jr z, IS_ZERO
	    ld a, 0x80

IS_ZERO:
	    ld b, a	; Saves the color
	    ld a, (hl)
	    and 07Fh ; Clears previous value
	    or b
	    ld (hl), a
	    inc hl
	    res 7, (hl)  ;Reset bit 7 to disable transparency
	    ret

IS_TR:  ; transparent
	    inc hl ; Points DE to MASK_T or MASK_P
	    set 7, (hl)  ;Set bit 7 to enable transparency
	    ret

	; Sets the .core.FLASH flag passed in A register in the .core.ATTR_T variable
.core.FLASH_TMP:
	    ld hl, .core.ATTR_T
	    jr .core.__SET_FLASH
	    ENDP


#line 13 "C:/zxbasic/src/arch/zx48k/library-asm/print.asm"

#line 1 "C:/zxbasic/src/arch/zx48k/library-asm/over.asm"
	; Sets OVER flag in P_FLAG permanently
; Parameter: OVER flag in bit 0 of A register




.core.OVER:
	    PROC

	    ld c, a ; saves it for later
	    and 2
	    ld hl, .core.FLAGS2
	    res 1, (HL)
	    or (hl)
	    ld (hl), a

	    ld a, c	; Recovers previous value
	    and 1	; # Convert to 0/1
	    add a, a; # Shift left 1 bit for permanent

	    ld hl, .core.P_FLAG
	    res 1, (hl)
	    or (hl)
	    ld (hl), a
	    ret

	; Sets .core.OVER flag in .core.P_FLAG temporarily
.core.OVER_TMP:
	    ld c, a ; saves it for later
	    and 2	; gets bit 1; clears carry
	    rra
	    ld hl, .core.FLAGS2
	    res 0, (hl)
	    or (hl)
	    ld (hl), a

	    ld a, c	; Recovers previous value
	    and 1
	    ld hl, .core.P_FLAG
	    res 0, (hl)
	    or (hl)
	    ld (hl), a
	    jp .core.__SET_ATTR_MODE

	    ENDP


#line 15 "C:/zxbasic/src/arch/zx48k/library-asm/print.asm"
#line 1 "C:/zxbasic/src/arch/zx48k/library-asm/inverse.asm"
	; Sets INVERSE flag in P_FLAG permanently
; Parameter: INVERSE flag in bit 0 of A register




.core.INVERSE:
	    PROC

	    and 1	; # Convert to 0/1
	    add a, a; # Shift left 3 bits for permanent
	    add a, a
	    add a, a
	    ld hl, .core.P_FLAG
	    res 3, (hl)
	    or (hl)
	    ld (hl), a
	    ret

	; Sets .core.INVERSE flag in .core.P_FLAG temporarily
.core.INVERSE_TMP:
	    and 1
	    add a, a
	    add a, a; # Shift left 2 bits for temporary
	    ld hl, .core.P_FLAG
	    res 2, (hl)
	    or (hl)
	    ld (hl), a
	    jp .core.__SET_ATTR_MODE

	    ENDP


#line 16 "C:/zxbasic/src/arch/zx48k/library-asm/print.asm"
#line 1 "C:/zxbasic/src/arch/zx48k/library-asm/bold.asm"
	; Sets BOLD flag in P_FLAG permanently
; Parameter: BOLD flag in bit 0 of A register



.core.BOLD:
	    PROC

	    and 1
	    rlca
	    rlca
	    rlca
	    ld hl, .core.FLAGS2
	    res 3, (HL)
	    or (hl)
	    ld (hl), a
	    ret

	; Sets .core.BOLD flag in .core.P_FLAG temporarily
.core.BOLD_TMP:
	    and 1
	    rlca
	    rlca
	    ld hl, .core.FLAGS2
	    res 2, (hl)
	    or (hl)
	    ld (hl), a
	    ret

	    ENDP


#line 17 "C:/zxbasic/src/arch/zx48k/library-asm/print.asm"
#line 1 "C:/zxbasic/src/arch/zx48k/library-asm/italic.asm"
	; Sets ITALIC flag in P_FLAG permanently
; Parameter: ITALIC flag in bit 0 of A register



.core.ITALIC:
	    PROC

	    and 1
	    rrca
	    rrca
	    rrca
	    ld hl, .core.FLAGS2
	    res 5, (HL)
	    or (hl)
	    ld (hl), a
	    ret

	; Sets .core.ITALIC flag in .core.P_FLAG temporarily
.core.ITALIC_TMP:
	    and 1
	    rrca
	    rrca
	    rrca
	    rrca
	    ld hl, .core.FLAGS2
	    res 4, (hl)
	    or (hl)
	    ld (hl), a
	    ret

	    ENDP


#line 18 "C:/zxbasic/src/arch/zx48k/library-asm/print.asm"

#line 1 "C:/zxbasic/src/arch/zx48k/library-asm/attr.asm"
	; Attribute routines
; vim:ts=4:et:sw:








.core.__ATTR_ADDR:
	    ; calc start address in DE (as (32 * d) + e)
    ; Contributed by Santiago Romero at http://www.speccy.org
	    ld h, 0                     ;  7 T-States
	    ld a, d                     ;  4 T-States
	    add a, a     ; a * 2        ;  4 T-States
	    add a, a     ; a * 4        ;  4 T-States
	    ld l, a      ; HL = A * 4   ;  4 T-States

	    add hl, hl   ; HL = A * 8   ; 15 T-States
	    add hl, hl   ; HL = A * 16  ; 15 T-States
	    add hl, hl   ; HL = A * 32  ; 15 T-States

    ld d, 18h ; DE = 6144 + E. Note: 6144 is the screen size (before attr zone)
	    add hl, de

	    ld de, (.core.SCREEN_ADDR)    ; Adds the screen address
	    add hl, de

	    ; Return current screen address in HL
	    ret


	; Sets the attribute at a given screen coordinate (D, E).
	; The attribute is taken from the .core.ATTR_T memory variable
	; Used by PRINT routines
.core.SET_ATTR:

	    ; Checks for valid coords
	    call .core.__IN_SCREEN
	    ret nc

.core.__SET_ATTR:
	    ; Internal __FASTCALL__ Entry used by printing routines
	    PROC

	    call .core.__ATTR_ADDR

.core.__SET_ATTR2:  ; Sets attr from .core.ATTR_T to (HL) which points to the scr address
	    ld de, (.core.ATTR_T)    ; E = .core.ATTR_T, D = MASK_T

	    ld a, d
	    and (hl)
	    ld c, a    ; C = current screen color, masked

	    ld a, d
	    cpl        ; Negate mask
	    and e    ; Mask current attributes
	    or c    ; Mix them
	    ld (hl), a ; Store result in screen

	    ret

	    ENDP


	; Sets the attribute at a given screen pixel address in hl
	; HL contains the address in RAM for a given pixel (not a coordinate)
.core.SET_PIXEL_ADDR_ATTR:
	    ;; gets ATTR position with offset given in .core.SCREEN_ADDR
	    ld a, h
	    rrca
	    rrca
	    rrca
	    and 3
	    or 18h
	    ld h, a
	    ld de, (.core.SCREEN_ADDR)
	    add hl, de  ;; Final screen addr
	    jp .core.__SET_ATTR2

#line 20 "C:/zxbasic/src/arch/zx48k/library-asm/print.asm"

	; Putting a comment starting with @INIT <address>
	; will make the compiler to add a CALL to <address>
	; It is useful for initialization routines.



.core.__PRINT_INIT: ; To be called before program starts (initializes library)
	    PROC

	    ld hl, __PRINT_START
	    ld (.core.PRINT_JUMP_STATE), hl

	    ld hl, 1821h
	    ld (.core.MAXX), hl  ; Sets current maxX and maxY

	    xor a
	    ld (.core.FLAGS2), a

	    ret


.core.__PRINTCHAR: ; Print character store in accumulator (A register)
	    ; Modifies H'L', B'C', A'F', D'E', A

	    LOCAL PO_GR_1

	    LOCAL __PRCHAR
	    LOCAL __PRINT_CONT
	    LOCAL __PRINT_CONT2
	    LOCAL __PRINT_JUMP
	    LOCAL __SRCADDR
	    LOCAL __PRINT_UDG
	    LOCAL __PRGRAPH
	    LOCAL __PRINT_START
	    LOCAL __ROM_SCROLL_SCR
	    LOCAL __TVFLAGS

	    __ROM_SCROLL_SCR EQU 0DFEh
	    __TVFLAGS EQU 5C3Ch

	.core.PRINT_JUMP_STATE EQU __PRINT_JUMP + 1

__PRINT_JUMP:
	    jp __PRINT_START    ; Where to jump. If we print 22 (AT), next two calls jumps to AT1 and AT2 respectively


	    LOCAL __SCROLL
__SCROLL:  ; Scroll?
	    ld hl, __TVFLAGS
	    bit 1, (hl)
	    ret z
	    call __ROM_SCROLL_SCR
	    ld hl, __TVFLAGS
	    res 1, (hl)
	    ret
#line 78 "C:/zxbasic/src/arch/zx48k/library-asm/print.asm"

__PRINT_START:
	    cp ' '
	    jp c, .core.__PRINT_SPECIAL    ; Characters below ' ' are special ones

	    exx               ; Switch to alternative registers
	    ex af, af'        ; Saves a value (char to print) for later


	    call __SCROLL
#line 89 "C:/zxbasic/src/arch/zx48k/library-asm/print.asm"
	    call .core.__LOAD_S_POSN

	; At this point we have the new coord
	    ld hl, (.core.SCREEN_ADDR)

	    ld a, d
	    ld c, a     ; Saves it for later

	    and 0F8h    ; Masks 3 lower bit ; zy
	    ld d, a

	    ld a, c     ; Recovers it
	    and 07h     ; MOD 7 ; y1
	    rrca
	    rrca
	    rrca

	    or e
	    ld e, a
	    add hl, de    ; HL = Screen address + DE
	    ex de, hl     ; DE = Screen address

	    ex af, af'

	    cp 80h    ; Is it an .core.UDG or a ?
	    jp c, __SRCADDR

	    cp 90h
	    jp nc, __PRINT_UDG

	    ; Print a 8 bit pattern (80h to 8Fh)

	    ld b, a
	    call PO_GR_1 ; This ROM routine will generate the bit pattern at .core.MEM0
	    ld hl, .core.MEM0
	    jp __PRGRAPH

	PO_GR_1 EQU 0B38h

__PRINT_UDG:
	    sub 90h ; Sub ASC code
	    ld bc, (.core.UDG)
	    jp .core.__PRGRAPH0

	.core.__SOURCEADDR EQU (__SRCADDR + 1)    ; Address of the pointer to chars source
__SRCADDR:
	    ld bc, (.core.CHARS)

.core.__PRGRAPH0:
    add a, a   ; A = a * 2 (since a < 80h) ; Thanks to Metalbrain at http://foro.speccy.org
	    ld l, a
	    ld h, 0    ; HL = a * 2 (accumulator)
	    add hl, hl
	    add hl, hl ; HL = a * 8
	    add hl, bc ; HL = .core.CHARS address

__PRGRAPH:
	    ex de, hl  ; HL = Write Address, DE = .core.CHARS address
	    bit 2, (iy + $47)
	    call nz, __BOLD
	    bit 4, (iy + $47)
	    call nz, __ITALIC
	    ld b, 8 ; 8 bytes per char
__PRCHAR:
	    ld a, (de) ; DE *must* be ALWAYS source, and HL destiny

.core.PRINT_MODE:     ; Which operation is used to write on the screen
    ; Set it with:
	    ; LD A, <OPERATION>
	    ; LD (.core.PRINT_MODE), A
	    ;
    ; Available opertions:
    ; NORMAL : 0h  --> NOP         ; .core.OVER 0
    ; XOR    : AEh --> XOR (HL)    ; .core.OVER 1
    ; OR     : B6h --> OR (HL)     ; PUTSPRITE
    ; AND    : A6h --> AND (HL)    ; PUTMASK
	    nop     ;

.core.INVERSE_MODE:   ; 00 -> NOP -> .core.INVERSE 0
	    nop     ; 2F -> CPL -> .core.INVERSE 1

	    ld (hl), a

	    inc de
	    inc h     ; Next line
	    djnz __PRCHAR

	    call .core.__LOAD_S_POSN
	    push de
	    call .core.__SET_ATTR
	    pop de
	    inc e            ; COL = COL + 1
	    ld hl, (.core.MAXX)
	    ld a, e
	    dec l            ; l = .core.MAXX
	    cp l             ; Lower than max?
	    jp nc, __PRINT_EOL1

__PRINT_CONT:
	    call .core.__SAVE_S_POSN

__PRINT_CONT2:
	    exx
	    ret

	; ------------- SPECIAL .core.CHARS (< 32) -----------------

.core.__PRINT_SPECIAL:    ; Jumps here if it is a special char
	    exx
	    ld hl, __PRINT_TABLE
	    jp .core.JUMP_HL_PLUS_2A


.core.PRINT_EOL:        ; Called WHENEVER there is no ";" at end of PRINT sentence
	    exx

.core.__PRINT_0Dh:        ; Called WHEN printing CHR$(13)

	    call __SCROLL
#line 209 "C:/zxbasic/src/arch/zx48k/library-asm/print.asm"
	    call .core.__LOAD_S_POSN

__PRINT_EOL1:        ; Another entry called from PRINT when next line required
	    ld e, 0

__PRINT_EOL2:
	    ld a, d
	    inc a

.core.__PRINT_AT1_END:
	    ld hl, (.core.MAXY)
	    cp l
	    jr c, .core.__PRINT_EOL_END    ; Carry if (.core.MAXY) < d

	    ld hl, __TVFLAGS
	    set 1, (hl)
	    dec a
#line 229 "C:/zxbasic/src/arch/zx48k/library-asm/print.asm"

.core.__PRINT_EOL_END:
	    ld d, a

__PRINT_AT2_END:
	    call .core.__SAVE_S_POSN
	    exx
	    ret

__PRINT_COM:
	    exx
	    push hl
	    push de
	    push bc
	    call .core.PRINT_COMMA
	    pop bc
	    pop de
	    pop hl
	    ret

__PRINT_TAB:
	    ld hl, __PRINT_TAB1
	    jr __PRINT_SET_STATE

__PRINT_TAB1:
	    ld (.core.MEM0), a
	    exx
	    ld hl, __PRINT_TAB2
	    jr __PRINT_SET_STATE

__PRINT_TAB2:
	    ld a, (.core.MEM0)        ; Load tab code (ignore the current one)
	    push hl
	    push de
	    push bc
	    ld hl, __PRINT_START
	    ld (.core.PRINT_JUMP_STATE), hl
	    call .core.PRINT_TAB
	    pop bc
	    pop de
	    pop hl
	    ret

.core.__PRINT_NOP:
.core.__PRINT_RESTART:
	    ld hl, __PRINT_START
	    jr __PRINT_SET_STATE

.core.__PRINT_AT:
	    ld hl, __PRINT_AT1

__PRINT_SET_STATE:
	    ld (.core.PRINT_JUMP_STATE), hl    ; Saves next entry call
	    exx
	    ret

__PRINT_AT1:    ; Jumps here if waiting for 1st parameter
	    exx
	    ld hl, __PRINT_AT2
	    ld (.core.PRINT_JUMP_STATE), hl    ; Saves next entry call
	    call .core.__LOAD_S_POSN
	    jr .core.__PRINT_AT1_END

__PRINT_AT2:
	    exx
	    ld hl, __PRINT_START
	    ld (.core.PRINT_JUMP_STATE), hl    ; Saves next entry call
	    call .core.__LOAD_S_POSN
	    ld e, a
	    ld hl, (.core.MAXX)
	    cp l
	    jr c, __PRINT_AT2_END
	    jr __PRINT_EOL1

.core.__PRINT_DEL:
	    call .core.__LOAD_S_POSN        ; Gets current screen position
	    dec e
	    ld a, -1
	    cp e
	    jp nz, __PRINT_AT2_END
	    ld hl, (.core.MAXX)
	    ld e, l
	    dec e
	    dec e
	    dec d
	    cp d
	    jp nz, __PRINT_AT2_END
	    ld d, h
	    dec d
	    jp __PRINT_AT2_END

__PRINT_INK:
	    ld hl, .core.__PRINT_INK2
	    jp __PRINT_SET_STATE

.core.__PRINT_INK2:
	    exx
	    call .core.INK_TMP
	    jp .core.__PRINT_RESTART

__PRINT_PAP:
	    ld hl, .core.__PRINT_PAP2
	    jp __PRINT_SET_STATE

.core.__PRINT_PAP2:
	    exx
	    call .core.PAPER_TMP
	    jp .core.__PRINT_RESTART

.core.__PRINT_FLA:
	    ld hl, .core.__PRINT_FLA2
	    jp __PRINT_SET_STATE

.core.__PRINT_FLA2:
	    exx
	    call .core.FLASH_TMP
	    jp .core.__PRINT_RESTART

.core.__PRINT_BRI:
	    ld hl, .core.__PRINT_BRI2
	    jp __PRINT_SET_STATE

.core.__PRINT_BRI2:
	    exx
	    call .core.BRIGHT_TMP
	    jp .core.__PRINT_RESTART

.core.__PRINT_INV:
	    ld hl, .core.__PRINT_INV2
	    jp __PRINT_SET_STATE

.core.__PRINT_INV2:
	    exx
	    call .core.INVERSE_TMP
	    jp .core.__PRINT_RESTART

.core.__PRINT_OVR:
	    ld hl, .core.__PRINT_OVR2
	    jp __PRINT_SET_STATE

.core.__PRINT_OVR2:
	    exx
	    call .core.OVER_TMP
	    jp .core.__PRINT_RESTART

__PRINT_BOLD:
	    ld hl, __PRINT_BOLD2
	    jp __PRINT_SET_STATE

__PRINT_BOLD2:
	    exx
	    call .core.BOLD_TMP
	    jp .core.__PRINT_RESTART

__PRINT_ITA:
	    ld hl, __PRINT_ITA2
	    jp __PRINT_SET_STATE

__PRINT_ITA2:
	    exx
	    call .core.ITALIC_TMP
	    jp .core.__PRINT_RESTART


__BOLD:
	    push hl
	    ld hl, .core.MEM0
	    ld b, 8
__BOLD_LOOP:
	    ld a, (de)
	    ld c, a
	    rlca
	    or c
	    ld (hl), a
	    inc hl
	    inc de
	    djnz __BOLD_LOOP
	    pop hl
	    ld de, .core.MEM0
	    ret


__ITALIC:
	    push hl
	    ld hl, .core.MEM0
	    ex de, hl
	    ld bc, 8
	    ldir
	    ld hl, .core.MEM0
	    srl (hl)
	    inc hl
	    srl (hl)
	    inc hl
	    srl (hl)
	    inc hl
	    inc hl
	    inc hl
	    sla (hl)
	    inc hl
	    sla (hl)
	    inc hl
	    sla (hl)
	    pop hl
	    ld de, .core.MEM0
	    ret

.core.PRINT_COMMA:
	    call .core.__LOAD_S_POSN
	    ld a, e
	    and 16
	    add a, 16

.core.PRINT_TAB:
	    PROC
	    LOCAL LOOP, CONTINUE

	    inc a
	    call .core.__LOAD_S_POSN ; e = current row
	    ld d, a
	    ld a, e
	    cp 21h
	    jr nz, CONTINUE
	    ld e, -1
CONTINUE:
	    ld a, d
	    inc e
	    sub e  ; A = A - E
	    and 31 ;
	    ret z  ; Already at position E
	    ld b, a
LOOP:
	    ld a, ' '
	    push bc
	    exx
	    call .core.__PRINTCHAR
	    exx
	    pop bc
	    djnz LOOP
	    ret
	    ENDP

.core.PRINT_AT: ; Changes cursor to ROW, COL
	    ; COL in A register
	    ; ROW in stack

	    pop hl    ; Ret address
	    ex (sp), hl ; callee H = ROW
	    ld l, a
	    ex de, hl

	    call .core.__IN_SCREEN
	    ret nc    ; Return if out of screen

	    ld hl, __TVFLAGS
	    res 1, (hl)
#line 485 "C:/zxbasic/src/arch/zx48k/library-asm/print.asm"
	    jp .core.__SAVE_S_POSN

	    LOCAL __PRINT_COM
	    LOCAL __BOLD
	    LOCAL __BOLD_LOOP
	    LOCAL __ITALIC
	    LOCAL __PRINT_EOL1
	    LOCAL __PRINT_EOL2
	    LOCAL __PRINT_AT1
	    LOCAL __PRINT_AT2
	    LOCAL __PRINT_AT2_END
	    LOCAL __PRINT_BOLD
	    LOCAL __PRINT_BOLD2
	    LOCAL __PRINT_ITA
	    LOCAL __PRINT_ITA2
	    LOCAL __PRINT_INK
	    LOCAL __PRINT_PAP
	    LOCAL __PRINT_SET_STATE
	    LOCAL __PRINT_TABLE
	    LOCAL __PRINT_TAB, __PRINT_TAB1, __PRINT_TAB2

__PRINT_TABLE:    ; Jump table for 0 .. 22 codes

	    DW .core.__PRINT_NOP    ;  0
	    DW .core.__PRINT_NOP    ;  1
	    DW .core.__PRINT_NOP    ;  2
	    DW .core.__PRINT_NOP    ;  3
	    DW .core.__PRINT_NOP    ;  4
	    DW .core.__PRINT_NOP    ;  5
	    DW __PRINT_COM    ;  6 COMMA
	    DW .core.__PRINT_NOP    ;  7
	    DW .core.__PRINT_DEL    ;  8 DEL
	    DW .core.__PRINT_NOP    ;  9
	    DW .core.__PRINT_NOP    ; 10
	    DW .core.__PRINT_NOP    ; 11
	    DW .core.__PRINT_NOP    ; 12
	    DW .core.__PRINT_0Dh    ; 13
	    DW __PRINT_BOLD   ; 14
	    DW __PRINT_ITA    ; 15
	    DW __PRINT_INK    ; 16
	    DW __PRINT_PAP    ; 17
	    DW .core.__PRINT_FLA    ; 18
	    DW .core.__PRINT_BRI    ; 19
	    DW .core.__PRINT_INV    ; 20
	    DW .core.__PRINT_OVR    ; 21
	    DW .core.__PRINT_AT     ; 22 AT
	    DW __PRINT_TAB    ; 23 TAB

	    ENDP



#line 3 "C:/zxbasic/src/arch/zx48k/library-asm/copy_attr.asm"
#line 4 "C:/zxbasic/src/arch/zx48k/library-asm/copy_attr.asm"




.core.COPY_ATTR:
	    ; Just copies current permanent attribs into temporal attribs
	    ; and sets print mode
	    PROC

	    LOCAL INVERSE1
	    LOCAL __REFRESH_TMP

	INVERSE1 EQU 02Fh

	    ld hl, (.core.ATTR_P)
	    ld (.core.ATTR_T), hl

	    ld hl, .core.FLAGS2
	    call __REFRESH_TMP

	    ld hl, .core.P_FLAG
	    call __REFRESH_TMP


.core.__SET_ATTR_MODE:		; Another entry to set print modes. A contains (.core.P_FLAG)


	    LOCAL TABLE
	    LOCAL CONT2

	    rra					; Over bit to carry
	    ld a, (.core.FLAGS2)
	    rla					; Over bit in bit 1, Over2 bit in bit 2
	    and 3				; Only bit 0 and 1 (.core.OVER flag)

	    ld c, a
	    ld b, 0

	    ld hl, TABLE
	    add hl, bc
	    ld a, (hl)
	    ld (.core.PRINT_MODE), a

	    ld hl, (.core.P_FLAG)
	    xor a			; NOP -> INVERSE0
	    bit 2, l
	    jr z, CONT2
	    ld a, INVERSE1 	; CPL -> INVERSE1

CONT2:
	    ld (.core.INVERSE_MODE), a
	    ret

TABLE:
	    nop				; NORMAL MODE
	    xor (hl)		; .core.OVER 1 MODE
	    and (hl)		; .core.OVER 2 MODE
	    or  (hl)		; .core.OVER 3 MODE

#line 67 "C:/zxbasic/src/arch/zx48k/library-asm/copy_attr.asm"

__REFRESH_TMP:
	    ld a, (hl)
	    and 10101010b
	    ld c, a
	    rra
	    or c
	    ld (hl), a
	    ret

	    ENDP


#line 5842 "C:\Users\geniw\source\repos\BattleGrid\BattleGrid\ZxBasicFiles\BattleGrid.zxbas"


#line 1 "C:/zxbasic/src/arch/zx48k/library-asm/lei8.asm"

.core.__LEI8: ; Signed <= comparison for 8bit int
	    ; A <= H (registers)
	    PROC
	    LOCAL checkParity
	    sub h
	    jr nz, .core.__LTI
	    inc a
	    ret

.core.__LTI8:  ; Test 8 bit values A < H
	    sub h

.core.__LTI:   ; Generic signed comparison
	    jp po, checkParity
	    xor 0x80
checkParity:
	    ld a, 0     ; False
	    ret p
	    inc a       ; True
	    ret
	    ENDP

#line 5845 "C:\Users\geniw\source\repos\BattleGrid\BattleGrid\ZxBasicFiles\BattleGrid.zxbas"
#line 1 "C:/zxbasic/src/arch/zx48k/library-asm/lti8.asm"

#line 5846 "C:\Users\geniw\source\repos\BattleGrid\BattleGrid\ZxBasicFiles\BattleGrid.zxbas"



#line 1 "C:/zxbasic/src/arch/zx48k/library-asm/printstr.asm"





	; PRINT command routine
	; Prints string pointed by HL


.core.PRINT_STR:
.core.__PRINTSTR:		; __FASTCALL__ Entry to print_string
	    PROC
	    LOCAL __PRINT_STR_LOOP
	    LOCAL __PRINT_STR_END

	    ld d, a ; Saves A reg (Flag) for later

	    ld a, h
	    or l
	    ret z	; Return if the pointer is NULL

	    push hl

	    ld c, (hl)
	    inc hl
	    ld b, (hl)
	    inc hl	; BC = LEN(a$); HL = &a$

__PRINT_STR_LOOP:
	    ld a, b
	    or c
	    jr z, __PRINT_STR_END 	; END if BC (counter = 0)

	    ld a, (hl)
	    call .core.__PRINTCHAR
	    inc hl
	    dec bc
	    jp __PRINT_STR_LOOP

__PRINT_STR_END:
	    pop hl
	    ld a, d ; Recovers A flag
	    or a   ; If not 0 this is a temporary string. Free it
	    ret z
	    jp .core.__MEM_FREE ; Frees str from heap and return from there

.core.__PRINT_STR:
	    ; Fastcall Entry
	    ; It ONLY prints strings
	    ; HL = String start
	    ; BC = String length (Number of chars)
	    push hl ; Push str address for later
	    ld d, a ; Saves a FLAG
	    jp __PRINT_STR_LOOP

	    ENDP


#line 5850 "C:\Users\geniw\source\repos\BattleGrid\BattleGrid\ZxBasicFiles\BattleGrid.zxbas"
#line 1 "C:/zxbasic/src/arch/zx48k/library-asm/pstorestr2.asm"
; vim:ts=4:et:sw=4
	;
	; Stores an string (pointer to the HEAP by DE) into the address pointed
	; by (IX + BC). No new copy of the string is created into the HEAP, since
	; it's supposed it's already created (temporary string)
	;

#line 1 "C:/zxbasic/src/arch/zx48k/library-asm/storestr2.asm"
	; Similar to __STORE_STR, but this one is called when
	; the value of B$ if already duplicated onto the stack.
	; So we needn't call STRASSING to create a duplication
	; HL = address of string memory variable
	; DE = address of 2n string. It just copies DE into (HL)
	; 	freeing (HL) previously.




.core.__PISTORE_STR2: ; Indirect store temporary string at (IX + BC)
	    push ix
	    pop hl
	    add hl, bc

.core.__ISTORE_STR2:
	    ld c, (hl)  ; Dereferences HL
	    inc hl
	    ld h, (hl)
	    ld l, c		; HL = *HL (real string variable address)

.core.__STORE_STR2:
	    push hl
	    ld c, (hl)
	    inc hl
	    ld h, (hl)
	    ld l, c		; HL = *HL (real string address)

	    push de
	    call .core.__MEM_FREE
	    pop de

	    pop hl
	    ld (hl), e
	    inc hl
	    ld (hl), d
	    dec hl		; HL points to mem address variable. This might be useful in the future.

	    ret


#line 9 "C:/zxbasic/src/arch/zx48k/library-asm/pstorestr2.asm"


.core.__PSTORE_STR2:
	    push ix
	    pop hl
	    add hl, bc
	    jp .core.__STORE_STR2


#line 5851 "C:\Users\geniw\source\repos\BattleGrid\BattleGrid\ZxBasicFiles\BattleGrid.zxbas"
#line 1 "C:/zxbasic/src/arch/zx48k/library-asm/str.asm"
	; The STR$( ) BASIC function implementation

	; Given a FP number in C ED LH
	; Returns a pointer (in HL) to the memory heap
	; containing the FP number string representation

#line 1 "C:/zxbasic/src/arch/zx48k/library-asm/alloc.asm"
; vim: ts=4:et:sw=4:
	; Copyleft (K) by Jose M. Rodriguez de la Rosa
	;  (a.k.a. Boriel)
;  http://www.boriel.com
	;
	; This ASM library is licensed under the MIT license
	; you can use it for any purpose (even for commercial
	; closed source programs).
	;
	; Please read the MIT license on the internet

	; ----- IMPLEMENTATION NOTES ------
	; The heap is implemented as a linked list of free blocks.

; Each free block contains this info:
	;
	; +----------------+ <-- HEAP START
	; | Size (2 bytes) |
	; |        0       | <-- Size = 0 => DUMMY HEADER BLOCK
	; +----------------+
	; | Next (2 bytes) |---+
	; +----------------+ <-+
	; | Size (2 bytes) |
	; +----------------+
	; | Next (2 bytes) |---+
	; +----------------+   |
	; | <free bytes...>|   | <-- If Size > 4, then this contains (size - 4) bytes
	; | (0 if Size = 4)|   |
	; +----------------+ <-+
	; | Size (2 bytes) |
	; +----------------+
	; | Next (2 bytes) |---+
	; +----------------+   |
	; | <free bytes...>|   |
	; | (0 if Size = 4)|   |
	; +----------------+   |
	;   <Allocated>        | <-- This zone is in use (Already allocated)
	; +----------------+ <-+
	; | Size (2 bytes) |
	; +----------------+
	; | Next (2 bytes) |---+
	; +----------------+   |
	; | <free bytes...>|   |
	; | (0 if Size = 4)|   |
	; +----------------+ <-+
	; | Next (2 bytes) |--> NULL => END OF LIST
	; |    0 = NULL    |
	; +----------------+
	; | <free bytes...>|
	; | (0 if Size = 4)|
	; +----------------+


	; When a block is FREED, the previous and next pointers are examined to see
	; if we can defragment the heap. If the block to be freed is just next to the
	; previous, or to the next (or both) they will be converted into a single
	; block (so defragmented).


	;   MEMORY MANAGER
	;
	; This library must be initialized calling __MEM_INIT with
	; HL = BLOCK Start & DE = Length.

	; An init directive is useful for initialization routines.
	; They will be added automatically if needed.





	; ---------------------------------------------------------------------
	; MEM_ALLOC
	;  Allocates a block of memory in the heap.
	;
	; Parameters
	;  BC = Length of requested memory block
	;
; Returns:
	;  HL = Pointer to the allocated block in memory. Returns 0 (NULL)
	;       if the block could not be allocated (out of memory)
	; ---------------------------------------------------------------------


.core.MEM_ALLOC:
.core.__MEM_ALLOC: ; Returns the 1st free block found of the given length (in BC)
	    PROC

	    LOCAL __MEM_LOOP
	    LOCAL __MEM_DONE
	    LOCAL __MEM_SUBTRACT
	    LOCAL __MEM_START
	    LOCAL TEMP, TEMP0

	TEMP EQU TEMP0 + 1

	    ld hl, 0
	    ld (TEMP), hl

__MEM_START:
	    ld hl, .core.ZXBASIC_MEM_HEAP  ; This label point to the heap start
	    inc bc
	    inc bc  ; BC = BC + 2 ; block size needs 2 extra bytes for hidden pointer

__MEM_LOOP:  ; Loads lengh at (HL, HL+). If Lenght >= BC, jump to __MEM_DONE
	    ld a, h ;  HL = NULL (No memory available?)
	    or l
#line 113 "C:/zxbasic/src/arch/zx48k/library-asm/alloc.asm"
	    ret z ; NULL
#line 115 "C:/zxbasic/src/arch/zx48k/library-asm/alloc.asm"
	    ; HL = Pointer to Free block
	    ld e, (hl)
	    inc hl
	    ld d, (hl)
	    inc hl          ; DE = Block Length

	    push hl         ; HL = *pointer to -> next block
	    ex de, hl
	    or a            ; CF = 0
	    sbc hl, bc      ; FREE >= BC (Length)  (HL = BlockLength - Length)
	    jp nc, __MEM_DONE
	    pop hl
	    ld (TEMP), hl

	    ex de, hl
	    ld e, (hl)
	    inc hl
	    ld d, (hl)
	    ex de, hl
	    jp __MEM_LOOP

__MEM_DONE:  ; A free block has been found.
	    ; Check if at least 4 bytes remains free (HL >= 4)
	    push hl
	    exx  ; exx to preserve bc
	    pop hl
	    ld bc, 4
	    or a
	    sbc hl, bc
	    exx
	    jp nc, __MEM_SUBTRACT
	    ; At this point...
	    ; less than 4 bytes remains free. So we return this block entirely
	    ; We must link the previous block with the next to this one
	    ; (DE) => Pointer to next block
	    ; (TEMP) => &(previous->next)
	    pop hl     ; Discard current block pointer
	    push de
	    ex de, hl  ; DE = Previous block pointer; (HL) = Next block pointer
	    ld a, (hl)
	    inc hl
	    ld h, (hl)
	    ld l, a    ; HL = (HL)
	    ex de, hl  ; HL = Previous block pointer; DE = Next block pointer
TEMP0:
	    ld hl, 0   ; Pre-previous block pointer

	    ld (hl), e
	    inc hl
	    ld (hl), d ; LINKED
	    pop hl ; Returning block.

	    ret

__MEM_SUBTRACT:
	    ; At this point we have to store HL value (Length - BC) into (DE - 2)
	    ex de, hl
	    dec hl
	    ld (hl), d
	    dec hl
	    ld (hl), e ; Store new block length

	    add hl, de ; New length + DE => free-block start
	    pop de     ; Remove previous HL off the stack

	    ld (hl), c ; Store length on its 1st word
	    inc hl
	    ld (hl), b
	    inc hl     ; Return hl
	    ret

	    ENDP


#line 8 "C:/zxbasic/src/arch/zx48k/library-asm/str.asm"
#line 1 "C:/zxbasic/src/arch/zx48k/library-asm/stackf.asm"
	; -------------------------------------------------------------
	; Functions to manage FP-Stack of the ZX Spectrum ROM CALC
	; -------------------------------------------------------------



	.core.__FPSTACK_PUSH EQU 2AB6h	; Stores an FP number into the ROM FP stack (A, ED CB)
	__FPSTACK_POP  EQU 2BF1h	; Pops an FP number out of the ROM FP stack (A, ED CB)

.core.__FPSTACK_PUSH2: ; Pushes Current A ED CB registers and top of the stack on (SP + 4)
	    ; Second argument to push into the stack calculator is popped out of the stack
	    ; Since the caller routine also receives the parameters into the top of the stack
	    ; four bytes must be removed from SP before pop them out

	    call .core.__FPSTACK_PUSH ; Pushes A ED CB into the FP-STACK
	    exx
	    pop hl       ; Caller-Caller return addr
	    exx
	    pop hl       ; Caller return addr

	    pop af
	    pop de
	    pop bc

	    push hl      ; Caller return addr
	    exx
	    push hl      ; Caller-Caller return addr
	    exx

	    jp .core.__FPSTACK_PUSH


.core.__FPSTACK_I16:	; Pushes 16 bits integer in HL into the FP ROM STACK
	    ; This format is specified in the ZX 48K Manual
	    ; You can push a 16 bit signed integer as
	    ; 0 SS LL HH 0, being SS the sign and LL HH the low
	    ; and High byte respectively
	    ld a, h
	    rla			; sign to Carry
	    sbc	a, a	; 0 if positive, FF if negative
	    ld e, a
	    ld d, l
	    ld c, h
	    xor a
	    ld b, a
	    jp .core.__FPSTACK_PUSH

#line 9 "C:/zxbasic/src/arch/zx48k/library-asm/str.asm"



.core.__STR:

.core.__STR_FAST:

	    PROC
	    LOCAL __STR_END
	    LOCAL RECLAIM2
	    LOCAL STK_END

	    ld hl, (STK_END)
	    push hl; Stores STK_END
	    ld hl, (.core.ATTR_T)	; Saves .core.ATTR_T since it's changed by STR$ due to a ROM BUG
	    push hl

	    call .core.__FPSTACK_PUSH ; Push number into stack
	    rst 28h		; # Rom Calculator
	    defb 2Eh	; # STR$(x)
	    defb 38h	; # END CALC
	    call __FPSTACK_POP ; Recovers string parameters to A ED CB (Only ED LH are important)

	    pop hl
	    ld (.core.ATTR_T), hl	; Restores .core.ATTR_T
	    pop hl
	    ld (STK_END), hl	; Balance STK_END to avoid STR$ bug

	    push bc
	    push de

	    inc bc
	    inc bc
	    call .core.__MEM_ALLOC ; HL Points to new block

	    pop de
	    pop bc

	    push hl
	    ld a, h
	    or l
	    jr z, __STR_END  ; Return if NO MEMORY (NULL)

	    push bc
	    push de
	    ld (hl), c
	    inc hl
	    ld (hl), b
	    inc hl		; Copies length

	    ex de, hl	; HL = start of original string
	    ldir		; Copies string content

	    pop de		; Original (ROM-CALC) string
	    pop bc		; Original Length

__STR_END:
	    ex de, hl
	    inc bc

	    call RECLAIM2 ; Frees TMP Memory
	    pop hl		  ; String result

	    ret

	RECLAIM2 EQU 19E8h
	STK_END EQU 5C65h

	    ENDP


#line 5852 "C:\Users\geniw\source\repos\BattleGrid\BattleGrid\ZxBasicFiles\BattleGrid.zxbas"
#line 1 "C:/zxbasic/src/arch/zx48k/library-asm/strcat.asm"

#line 1 "C:/zxbasic/src/arch/zx48k/library-asm/strlen.asm"
	; Returns len if a string
	; If a string is NULL, its len is also 0
	; Result returned in HL


.core.__STRLEN:	; Direct FASTCALL entry
	    ld a, h
	    or l
	    ret z

	    ld a, (hl)
	    inc hl
	    ld h, (hl)  ; LEN(str) in HL
	    ld l, a
	    ret



#line 3 "C:/zxbasic/src/arch/zx48k/library-asm/strcat.asm"


.core.__ADDSTR:	; Implements c$ = a$ + b$
	    ; hl = &a$, de = &b$ (pointers)


.core.__STRCAT2:	; This routine creates a new string in dynamic space
	    ; making room for it. Then copies a$ + b$ into it.
	    ; HL = a$, DE = b$

	    PROC

	    LOCAL __STR_CONT
	    LOCAL __STRCATEND

	    push hl
	    call .core.__STRLEN
	    ld c, l
	    ld b, h		; BC = LEN(a$)
	    ex (sp), hl ; (SP) = LEN (a$), HL = a$
	    push hl		; Saves pointer to a$

	    inc bc
	    inc bc		; +2 bytes to store length

	    ex de, hl
	    push hl
	    call .core.__STRLEN
	    ; HL = len(b$)

	    add hl, bc	; Total str length => 2 + len(a$) + len(b$)

	    ld c, l
	    ld b, h		; BC = Total str length + 2
	    call .core.__MEM_ALLOC
	    pop de		; HL = c$, DE = b$

	    ex de, hl	; HL = b$, DE = c$
	    ex (sp), hl ; HL = a$, (SP) = b$

	    exx
	    pop de		; D'E' = b$
	    exx

	    pop bc		; LEN(a$)

	    ld a, d
	    or e
    ret z		; If no memory: RETURN

__STR_CONT:
	    push de		; Address of c$

	    ld a, h
	    or l
	    jr nz, .core.__STR_CONT1 ; If len(a$) != 0 do copy

	    ; a$ is NULL => uses HL = DE for transfer
	    ld h, d
	    ld l, e
	    ld (hl), a	; This will copy 00 00 at (DE) location
	    inc de      ;
	    dec bc      ; Ensure BC will be set to 1 in the next step

.core.__STR_CONT1:        ; Copies a$ (HL) into c$ (DE)
	    inc bc
	    inc bc		; BC = BC + 2
    ldir		; MEMCOPY: c$ = a$
	    pop hl		; HL = c$

	    exx
	    push de		; Recovers b$; A ex hl,hl' would be very handy
	    exx

	    pop de		; DE = b$

.core.__STRCAT: ; ConCATenate two strings a$ = a$ + b$. HL = ptr to a$, DE = ptr to b$
    ; NOTE: Both DE, BC and AF are modified and lost
	    ; Returns HL (pointer to a$)
	    ; a$ Must be NOT NULL
	    ld a, d
	    or e
	    ret z		; Returns if de is NULL (nothing to copy)

	    push hl		; Saves HL to return it later

	    ld c, (hl)
	    inc hl
	    ld b, (hl)
	    inc hl
	    add hl, bc	; HL = end of (a$) string ; bc = len(a$)
	    push bc		; Saves LEN(a$) for later

	    ex de, hl	; DE = end of string (Begin of copy addr)
	    ld c, (hl)
	    inc hl
	    ld b, (hl)	; BC = len(b$)

	    ld a, b
	    or c
	    jr z, __STRCATEND; Return if len(b$) == 0

	    push bc			 ; Save LEN(b$)
	    inc hl			 ; Skip 2nd byte of len(b$)
	    ldir			 ; Concatenate b$

	    pop bc			 ; Recovers length (b$)
	    pop hl			 ; Recovers length (a$)
	    add hl, bc		 ; HL = LEN(a$) + LEN(b$) = LEN(a$+b$)
	    ex de, hl		 ; DE = LEN(a$+b$)
	    pop hl

	    ld (hl), e		 ; Updates new LEN and return
	    inc hl
	    ld (hl), d
	    dec hl
	    ret

__STRCATEND:
	    pop hl		; Removes Len(a$)
	    pop hl		; Restores original HL, so HL = a$
	    ret

	    ENDP


#line 5853 "C:\Users\geniw\source\repos\BattleGrid\BattleGrid\ZxBasicFiles\BattleGrid.zxbas"

#line 1 "C:/zxbasic/src/arch/zx48k/library-asm/strslice.asm"
	; String slicing library
	; HL = Str pointer
	; DE = String start
	; BC = String character end
	; A register => 0 => the HL pointer wont' be freed from the HEAP
	; e.g. a$(5 TO 10) => HL = a$; DE = 5; BC = 10

	; This implements a$(X to Y) being X and Y first and
	; last characters respectively. If X > Y, NULL is returned

	; Otherwise returns a pointer to a$ FROM X to Y (starting from 0)
	; if Y > len(a$), then a$ will be padded with spaces (reallocating
	; it in dynamic memory if needed). Returns pointer (HL) to resulting
	; string. NULL (0) if no memory for padding.
	;






.core.__STRSLICE:			; Callee entry
	    pop hl			; Return ADDRESS
	    pop bc			; Last char pos
	    pop de			; 1st char pos
	    ex (sp), hl		; CALLEE. -> String start

.core.__STRSLICE_FAST:	; __FASTCALL__ Entry
	    PROC

	    LOCAL __CONT
	    LOCAL __EMPTY
	    LOCAL __FREE_ON_EXIT

	    push hl			; Stores original HL pointer to be recovered on exit
	    ex af, af'		; Saves A register for later

	    push hl
	    call .core.__STRLEN
	    inc bc			; Last character position + 1 (string starts from 0)
	    or a
	    sbc hl, bc		; Compares length with last char position
	    jr nc, __CONT	; If Carry => We must copy to end of string
	    add hl, bc		; Restore back original LEN(a$) in HL
	    ld b, h
	    ld c, l			; Copy to the end of str
	    ccf				; Clears Carry flag for next subtraction

__CONT:
	    ld h, b
	    ld l, c			; HL = Last char position to copy (1 for char 0, 2 for char 1, etc)
	    sbc hl, de		; HL = LEN(a$) - DE => Number of chars to copy
	    jr z, __EMPTY	; 0 Chars to copy => Return HL = 0 (NULL STR)
	    jr c, __EMPTY	; If Carry => Nothing to return (NULL STR)

	    ld b, h
	    ld c, l			; BC = Number of chars to copy
	    inc bc
	    inc bc			; +2 bytes for string length number

	    push bc
	    push de
	    call .core.__MEM_ALLOC
	    pop de
	    pop bc
	    ld a, h
	    or l
	    jr z, __EMPTY	; Return if NULL (no memory)

	    dec bc
	    dec bc			; Number of chars to copy (Len of slice)

	    ld (hl), c
	    inc hl
	    ld (hl), b
	    inc hl			; Stores new string length

	    ex (sp), hl		; Pointer to A$ now in HL; Pointer to new string chars in Stack
	    inc hl
	    inc hl			; Skip string length
	    add hl, de		; Were to start from A$
	    pop de			; Start of new string chars
	    push de			; Stores it again
	    ldir			; Copies BC chars
	    pop de
	    dec de
	    dec de			; Points to String LEN start
	    ex de, hl		; Returns it in HL
	    jr __FREE_ON_EXIT

__EMPTY:			; Return NULL (empty) string
	    pop hl
	    ld hl, 0		; Return NULL


__FREE_ON_EXIT:
	    ex af, af'		; Recover original A register
	    ex (sp), hl		; Original HL pointer

	    or a
	    call nz, .core.__MEM_FREE

	    pop hl			; Recover result
	    ret

	    ENDP


#line 5855 "C:\Users\geniw\source\repos\BattleGrid\BattleGrid\ZxBasicFiles\BattleGrid.zxbas"
#line 1 "C:/zxbasic/src/arch/zx48k/library-asm/u32tofreg.asm"
#line 1 "C:/zxbasic/src/arch/zx48k/library-asm/neg32.asm"

.core.__ABS32:
	    bit 7, d
	    ret z

.core.__NEG32: ; Negates DEHL (Two's complement)
	    ld a, l
	    cpl
	    ld l, a

	    ld a, h
	    cpl
	    ld h, a

	    ld a, e
	    cpl
	    ld e, a

	    ld a, d
	    cpl
	    ld d, a

	    inc l
	    ret nz

	    inc h
	    ret nz

	    inc de
	    ret


#line 2 "C:/zxbasic/src/arch/zx48k/library-asm/u32tofreg.asm"

.core.__I8TOFREG:
	    ld l, a
	    rlca
	    sbc a, a	; A = SGN(A)
	    ld h, a
	    ld e, a
	    ld d, a

.core.__I32TOFREG:	; Converts a 32bit signed integer (stored in DEHL)
	    ; to a Floating Point Number returned in (A ED CB)

	    ld a, d
	    or a		; Test sign

	    jp p, .core.__U32TOFREG	; It was positive, proceed as 32bit unsigned

	    call .core.__NEG32		; Convert it to positive
	    call .core.__U32TOFREG	; Convert it to Floating point

	    set 7, e			; Put the sign bit (negative) in the 31bit of mantissa
	    ret

.core.__U8TOFREG:
	    ; Converts an unsigned 8 bit (A) to Floating point
	    ld l, a
	    ld h, 0
	    ld e, h
	    ld d, h

.core.__U32TOFREG:	; Converts an unsigned 32 bit integer (DEHL)
	    ; to a Floating point number returned in A ED CB

	    PROC

	    LOCAL __U32TOFREG_END

	    ld a, d
	    or e
	    or h
	    or l
	    ld b, d
	    ld c, e		; Returns 00 0000 0000 if ZERO
	    ret z

	    push de
	    push hl

	    exx
	    pop de  ; Loads integer into B'C' D'E'
	    pop bc
	    exx

	    ld l, 128	; Exponent
	    ld bc, 0	; DEBC = 0
	    ld d, b
	    ld e, c

.core.__U32TOFREG_LOOP: ; Also an entry point for __F16TOFREG
	    exx
	    ld a, d 	; B'C'D'E' == 0 ?
	    or e
	    or b
	    or c
	    jp z, __U32TOFREG_END	; We are done

	    srl b ; Shift B'C' D'E' >> 1, output bit stays in Carry
	    rr c
	    rr d
	    rr e
	    exx

	    rr e ; Shift EDCB >> 1, inserting the carry on the left
	    rr d
	    rr c
	    rr b

	    inc l	; Increment exponent
	    jp .core.__U32TOFREG_LOOP


__U32TOFREG_END:
	    exx
	    ld a, l     ; Puts the exponent in a
	    res 7, e	; Sets the sign bit to 0 (positive)

	    ret
	    ENDP


#line 5856 "C:\Users\geniw\source\repos\BattleGrid\BattleGrid\ZxBasicFiles\BattleGrid.zxbas"

.LABEL.__LABEL747:
	DEFB 0FFh
	END
