	.zxbasic
	org 32768
__START_PROGRAM:
	ld hl, END
	di
	push ix
	push iy
	exx
	push hl
	exx
	ld hl, 0
	add hl, sp
	ld (__CALL_BACK__), hl
	ei
	call __MEM_INIT
	call __PRINT_INIT
	jp __MAIN_PROGRAM__
__CALL_BACK__:
	DEFW 0
ZXBASIC_USER_DATA:
	; Defines HEAP SIZE
ZXBASIC_HEAP_SIZE EQU 256
ZXBASIC_MEM_HEAP:
	DEFS 256
	; Defines USER DATA Length in bytes
ZXBASIC_USER_DATA_LEN EQU ZXBASIC_USER_DATA_END - ZXBASIC_USER_DATA
	.__LABEL__.ZXBASIC_USER_DATA_LEN EQU ZXBASIC_USER_DATA_LEN
	.__LABEL__.ZXBASIC_USER_DATA EQU ZXBASIC_USER_DATA
	_intHandlerAddress EQU 65279
_frameCounter:
	DEFB 00, 00
_playerX:
	DEFB 14h
_playerSprite:
	DEFB 00h
_dir:
	DEFB 00h
_dead:
	DEFB 00h
_activeShots:
	DEFB 00
_cursorX:
	DEFB 00h
_cursorY:
	DEFB 00h
_cursorVisible:
	DEFB 00h
_cursorFrames:
	DEFB 0Ah
_cursorMoved:
	DEFB 00h
_cursorTool:
	DEFB 00h
_activeAliens:
	DEFB 00
_alienFrame:
	DEFB 05h
_activeTanks:
	DEFB 00
_tankFrame:
	DEFB 03h
_tankProbability:
	DEFB 00
_activeTowers:
	DEFB 00
_availableMines:
	DEFB 00h
_availableBombs:
	DEFB 00h
_availableBlockers:
	DEFB 00h
_availableChargedShots:
	DEFB 00h
_activeShips:
	DEFB 00
_freezingShip:
	DEFB 01h
_activeHangars:
	DEFB 00
_freezingHangar:
	DEFB 01h
_buc:
	DEFB 00
_borderColors:
	DEFW __LABEL670
_borderColors.__DATA__.__PTR__:
	DEFW _borderColors.__DATA__
_borderColors.__DATA__:
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
__LABEL670:
	DEFW 0000h
	DEFB 01h
_spriteSet:
	DEFW __LABEL671
_spriteSet.__DATA__.__PTR__:
	DEFW _spriteSet.__DATA__
_spriteSet.__DATA__:
	DEFB 18h
	DEFB 5Ah
	DEFB 0A5h
	DEFB 0BDh
	DEFB 7Eh
	DEFB 66h
	DEFB 5Ah
	DEFB 0A5h
	DEFB 08h
	DEFB 2Ah
	DEFB 14h
	DEFB 1Ch
	DEFB 3Eh
	DEFB 36h
	DEFB 2Ah
	DEFB 55h
	DEFB 10h
	DEFB 54h
	DEFB 28h
	DEFB 38h
	DEFB 7Ch
	DEFB 6Ch
	DEFB 54h
	DEFB 0AAh
	DEFB 20h
	DEFB 18h
	DEFB 04h
	DEFB 18h
	DEFB 20h
	DEFB 18h
	DEFB 04h
	DEFB 18h
	DEFB 18h
	DEFB 04h
	DEFB 18h
	DEFB 20h
	DEFB 18h
	DEFB 04h
	DEFB 18h
	DEFB 20h
	DEFB 00h
	DEFB 00h
	DEFB 44h
	DEFB 0AAh
	DEFB 0AAh
	DEFB 11h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 22h
	DEFB 55h
	DEFB 55h
	DEFB 88h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 18h
	DEFB 3Ch
	DEFB 3Ch
	DEFB 18h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 18h
	DEFB 24h
	DEFB 5Ah
	DEFB 5Ah
	DEFB 24h
	DEFB 18h
	DEFB 00h
	DEFB 3Ch
	DEFB 42h
	DEFB 99h
	DEFB 0A5h
	DEFB 0A5h
	DEFB 99h
	DEFB 42h
	DEFB 3Ch
	DEFB 42h
	DEFB 81h
	DEFB 24h
	DEFB 00h
	DEFB 00h
	DEFB 24h
	DEFB 81h
	DEFB 42h
	DEFB 0E7h
	DEFB 81h
	DEFB 81h
	DEFB 00h
	DEFB 00h
	DEFB 81h
	DEFB 81h
	DEFB 0E7h
	DEFB 24h
	DEFB 7Eh
	DEFB 0FFh
	DEFB 99h
	DEFB 0DBh
	DEFB 0FFh
	DEFB 66h
	DEFB 24h
	DEFB 24h
	DEFB 7Eh
	DEFB 0FFh
	DEFB 0BDh
	DEFB 0DBh
	DEFB 7Eh
	DEFB 7Eh
	DEFB 18h
	DEFB 5Ah
	DEFB 7Eh
	DEFB 66h
	DEFB 5Ah
	DEFB 5Ah
	DEFB 66h
	DEFB 5Ah
	DEFB 18h
	DEFB 0FFh
	DEFB 66h
	DEFB 0DBh
	DEFB 0DBh
	DEFB 66h
	DEFB 0FFh
	DEFB 18h
	DEFB 18h
__LABEL671:
	DEFW 0001h
	DEFW 0008h
	DEFB 01h
_tileSet:
	DEFW __LABEL672
_tileSet.__DATA__.__PTR__:
	DEFW _tileSet.__DATA__
_tileSet.__DATA__:
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 0Fh
	DEFB 07h
	DEFB 07h
	DEFB 07h
	DEFB 07h
	DEFB 07h
	DEFB 07h
	DEFB 07h
	DEFB 07h
	DEFB 07h
	DEFB 07h
	DEFB 0Fh
	DEFB 00h
	DEFB 00h
	DEFB 0FCh
	DEFB 0FCh
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 0Ch
	DEFB 0Ch
	DEFB 1Eh
	DEFB 7Fh
	DEFB 1Eh
	DEFB 3Fh
	DEFB 33h
	DEFB 40h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 78h
	DEFB 1Ch
	DEFB 1Ch
	DEFB 1Ch
	DEFB 18h
	DEFB 70h
	DEFB 38h
	DEFB 1Ch
	DEFB 1Ch
	DEFB 1Dh
	DEFB 1Dh
	DEFB 7Bh
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 03h
	DEFB 0Ch
	DEFB 1Ch
	DEFB 1Ch
	DEFB 3Ch
	DEFB 3Ch
	DEFB 3Ch
	DEFB 3Dh
	DEFB 0BDh
	DEFB 3Ch
	DEFB 3Ch
	DEFB 1Ch
	DEFB 9Ch
	DEFB 0Ch
	DEFB 03h
	DEFB 00h
	DEFB 00h
	DEFB 78h
	DEFB 78h
	DEFB 0B8h
	DEFB 0B8h
	DEFB 0B8h
	DEFB 0BCh
	DEFB 0BCh
	DEFB 0BCh
	DEFB 0FCh
	DEFB 1Eh
	DEFB 1Eh
	DEFB 9Fh
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 0D3h
	DEFB 71h
	DEFB 31h
	DEFB 31h
	DEFB 11h
	DEFB 11h
	DEFB 01h
	DEFB 0F9h
	DEFB 0F1h
	DEFB 0F1h
	DEFB 0F1h
	DEFB 0F1h
	DEFB 0F1h
	DEFB 0E1h
	DEFB 83h
	DEFB 00h
	DEFB 00h
	DEFB 0DDh
	DEFB 0DDh
	DEFB 9Ch
	DEFB 9Ch
	DEFB 1Ch
	DEFB 1Ch
	DEFB 1Ch
	DEFB 1Ch
	DEFB 1Ch
	DEFB 1Ch
	DEFB 1Ch
	DEFB 3Eh
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 0EEh
	DEFB 0E7h
	DEFB 0E7h
	DEFB 0E7h
	DEFB 0E7h
	DEFB 0E7h
	DEFB 0EEh
	DEFB 0EEh
	DEFB 0E7h
	DEFB 0E7h
	DEFB 0E7h
	DEFB 0E7h
	DEFB 0E7h
	DEFB 0E7h
	DEFB 0F3h
	DEFB 00h
	DEFB 00h
	DEFB 0EEh
	DEFB 0EEh
	DEFB 0CEh
	DEFB 0CEh
	DEFB 0Eh
	DEFB 0Eh
	DEFB 0Eh
	DEFB 0Eh
	DEFB 0Eh
	DEFB 0Eh
	DEFB 1Eh
	DEFB 1Fh
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 1Fh
	DEFB 0Fh
	DEFB 8Fh
	DEFB 8Fh
	DEFB 8Fh
	DEFB 0Fh
	DEFB 0Fh
	DEFB 0Fh
	DEFB 0Fh
	DEFB 8Fh
	DEFB 8Fh
	DEFB 8Fh
	DEFB 0CFh
	DEFB 0CFh
	DEFB 9Fh
	DEFB 00h
	DEFB 00h
	DEFB 0CFh
	DEFB 0C7h
	DEFB 47h
	DEFB 47h
	DEFB 07h
	DEFB 07h
	DEFB 07h
	DEFB 07h
	DEFB 07h
	DEFB 07h
	DEFB 07h
	DEFB 0Fh
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 0BFh
	DEFB 1Fh
	DEFB 0Fh
	DEFB 0Fh
	DEFB 0Fh
	DEFB 0Fh
	DEFB 0Fh
	DEFB 0Fh
	DEFB 0Fh
	DEFB 0Fh
	DEFB 0Fh
	DEFB 0Fh
	DEFB 0Fh
	DEFB 0Fh
	DEFB 9Fh
	DEFB 00h
	DEFB 00h
	DEFB 0Fh
	DEFB 07h
	DEFB 07h
	DEFB 07h
	DEFB 07h
	DEFB 07h
	DEFB 07h
	DEFB 07h
	DEFB 27h
	DEFB 27h
	DEFB 67h
	DEFB 6Fh
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 60h
	DEFB 30h
	DEFB 38h
	DEFB 38h
	DEFB 3Ch
	DEFB 3Ch
	DEFB 3Ch
	DEFB 3Ch
	DEFB 3Dh
	DEFB 3Ch
	DEFB 3Ch
	DEFB 38h
	DEFB 39h
	DEFB 30h
	DEFB 40h
	DEFB 00h
	DEFB 00h
	DEFB 60h
	DEFB 60h
	DEFB 20h
	DEFB 00h
	DEFB 40h
	DEFB 40h
	DEFB 40h
	DEFB 40h
	DEFB 00h
	DEFB 20h
	DEFB 60h
	DEFB 60h
	DEFB 00h
	DEFB 00h
	DEFB 3Fh
	DEFB 3Fh
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 30h
	DEFB 30h
	DEFB 78h
	DEFB 0FEh
	DEFB 78h
	DEFB 0FCh
	DEFB 0CCh
	DEFB 02h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 3Fh
	DEFB 40h
	DEFB 0AFh
	DEFB 98h
	DEFB 0B3h
	DEFB 0A4h
	DEFB 0A9h
	DEFB 0AAh
	DEFB 0AAh
	DEFB 0A2h
	DEFB 0A2h
	DEFB 0AAh
	DEFB 0AAh
	DEFB 0A2h
	DEFB 0A2h
	DEFB 0AAh
	DEFB 0AAh
	DEFB 0A9h
	DEFB 0A4h
	DEFB 0B3h
	DEFB 98h
	DEFB 0AFh
	DEFB 40h
	DEFB 3Fh
	DEFB 0FFh
	DEFB 00h
	DEFB 0FFh
	DEFB 00h
	DEFB 99h
	DEFB 00h
	DEFB 0FFh
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 18h
	DEFB 18h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 0FFh
	DEFB 00h
	DEFB 99h
	DEFB 00h
	DEFB 0FFh
	DEFB 00h
	DEFB 0FFh
	DEFB 0FCh
	DEFB 02h
	DEFB 0F5h
	DEFB 19h
	DEFB 0CDh
	DEFB 25h
	DEFB 95h
	DEFB 55h
	DEFB 55h
	DEFB 45h
	DEFB 45h
	DEFB 55h
	DEFB 55h
	DEFB 45h
	DEFB 45h
	DEFB 55h
	DEFB 55h
	DEFB 95h
	DEFB 25h
	DEFB 0CDh
	DEFB 19h
	DEFB 0F5h
	DEFB 02h
	DEFB 0FCh
	DEFB 80h
	DEFB 0C0h
	DEFB 0A0h
	DEFB 0B0h
	DEFB 0A8h
	DEFB 0BCh
	DEFB 82h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 82h
	DEFB 0BCh
	DEFB 0A8h
	DEFB 0B0h
	DEFB 0A0h
	DEFB 0C0h
	DEFB 80h
	DEFB 01h
	DEFB 03h
	DEFB 05h
	DEFB 0Dh
	DEFB 15h
	DEFB 3Dh
	DEFB 41h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 41h
	DEFB 3Dh
	DEFB 15h
	DEFB 0Dh
	DEFB 05h
	DEFB 03h
	DEFB 01h
	DEFB 42h
	DEFB 0A5h
	DEFB 7Eh
	DEFB 2Fh
	DEFB 37h
	DEFB 7Eh
	DEFB 0A5h
	DEFB 42h
	DEFB 00h
	DEFB 99h
	DEFB 66h
	DEFB 0DBh
	DEFB 0BDh
	DEFB 66h
	DEFB 99h
	DEFB 00h
	DEFB 42h
	DEFB 0A5h
	DEFB 7Eh
	DEFB 0F4h
	DEFB 0ECh
	DEFB 7Eh
	DEFB 0A5h
	DEFB 42h
	DEFB 42h
	DEFB 0A5h
	DEFB 7Eh
	DEFB 34h
	DEFB 2Ch
	DEFB 7Eh
	DEFB 0BDh
	DEFB 5Ah
	DEFB 5Ah
	DEFB 24h
	DEFB 34h
	DEFB 5Ah
	DEFB 5Ah
	DEFB 34h
	DEFB 24h
	DEFB 5Ah
	DEFB 5Ah
	DEFB 0BDh
	DEFB 7Eh
	DEFB 2Ch
	DEFB 34h
	DEFB 7Eh
	DEFB 0A5h
	DEFB 42h
	DEFB 00h
	DEFB 02h
	DEFB 03h
	DEFB 07h
	DEFB 09h
	DEFB 09h
	DEFB 1Fh
	DEFB 09h
	DEFB 00h
	DEFB 7Eh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 24h
	DEFB 24h
	DEFB 0FFh
	DEFB 24h
	DEFB 00h
	DEFB 40h
	DEFB 0C0h
	DEFB 0F0h
	DEFB 90h
	DEFB 90h
	DEFB 0FCh
	DEFB 92h
	DEFB 09h
	DEFB 3Fh
	DEFB 61h
	DEFB 7Fh
	DEFB 09h
	DEFB 09h
	DEFB 3Fh
	DEFB 49h
	DEFB 24h
	DEFB 0FFh
	DEFB 00h
	DEFB 0FFh
	DEFB 24h
	DEFB 24h
	DEFB 0FFh
	DEFB 24h
	DEFB 92h
	DEFB 0FEh
	DEFB 82h
	DEFB 0FEh
	DEFB 92h
	DEFB 92h
	DEFB 0FCh
	DEFB 90h
	DEFB 49h
	DEFB 7Fh
	DEFB 41h
	DEFB 7Fh
	DEFB 7Fh
	DEFB 67h
	DEFB 67h
	DEFB 27h
	DEFB 24h
	DEFB 0FFh
	DEFB 3Ch
	DEFB 0E7h
	DEFB 0DBh
	DEFB 0A5h
	DEFB 0A5h
	DEFB 0A5h
	DEFB 90h
	DEFB 0FEh
	DEFB 82h
	DEFB 0FEh
	DEFB 0FEh
	DEFB 0E6h
	DEFB 0E4h
	DEFB 0E0h
	DEFB 00h
	DEFB 00h
	DEFB 03h
	DEFB 03h
	DEFB 06h
	DEFB 05h
	DEFB 27h
	DEFB 36h
	DEFB 3Ch
	DEFB 3Ch
	DEFB 0E7h
	DEFB 0A5h
	DEFB 0BDh
	DEFB 0E7h
	DEFB 0A5h
	DEFB 0BDh
	DEFB 00h
	DEFB 7Ch
	DEFB 82h
	DEFB 0CAh
	DEFB 6Ah
	DEFB 0A2h
	DEFB 0FAh
	DEFB 6Ah
	DEFB 76h
	DEFB 5Eh
	DEFB 5Ah
	DEFB 7Fh
	DEFB 27h
	DEFB 2Fh
	DEFB 0D8h
	DEFB 3Fh
	DEFB 0E7h
	DEFB 0A5h
	DEFB 0BDh
	DEFB 0E7h
	DEFB 0FFh
	DEFB 0E7h
	DEFB 0C3h
	DEFB 0C3h
	DEFB 6Eh
	DEFB 7Eh
	DEFB 5Eh
	DEFB 0FEh
	DEFB 0E6h
	DEFB 0F6h
	DEFB 1Eh
	DEFB 0FEh
	DEFB 60h
	DEFB 0F0h
	DEFB 0A0h
	DEFB 0B8h
	DEFB 0A4h
	DEFB 0BCh
	DEFB 0A6h
	DEFB 0BDh
	DEFB 0A5h
	DEFB 0BDh
	DEFB 0A5h
	DEFB 0BDh
	DEFB 0A5h
	DEFB 0FDh
	DEFB 0E7h
	DEFB 0E7h
	DEFB 28h
	DEFB 3Eh
	DEFB 26h
	DEFB 0E7h
	DEFB 0BEh
	DEFB 0E7h
	DEFB 0A6h
	DEFB 0FEh
	DEFB 06h
	DEFB 1Fh
	DEFB 05h
	DEFB 0C7h
	DEFB 7Dh
	DEFB 0E7h
	DEFB 65h
	DEFB 7Fh
	DEFB 16h
	DEFB 1Fh
	DEFB 85h
	DEFB 0DFh
	DEFB 0A5h
	DEFB 0FFh
	DEFB 0A5h
	DEFB 0E7h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 0FCh
	DEFB 0F6h
	DEFB 0D6h
	DEFB 0E7h
	DEFB 0C5h
	DEFB 0FFh
	DEFB 0FBh
	DEFB 3Bh
	DEFB 57h
	DEFB 0EBh
	DEFB 83h
	DEFB 00h
	DEFB 00h
	DEFB 0FFh
	DEFB 0FBh
	DEFB 0BFh
	DEFB 0FFh
	DEFB 0BFh
	DEFB 53h
	DEFB 0BFh
	DEFB 0BFh
	DEFB 0EAh
	DEFB 0B8h
	DEFB 0B8h
	DEFB 80h
	DEFB 0B0h
	DEFB 0F4h
	DEFB 0C8h
	DEFB 0BCh
	DEFB 34h
	DEFB 7Ah
	DEFB 0FBh
	DEFB 0EDh
	DEFB 0F7h
	DEFB 0CDh
	DEFB 7Ah
	DEFB 24h
	DEFB 7Bh
	DEFB 77h
	DEFB 2Fh
	DEFB 1Fh
	DEFB 1Fh
	DEFB 3Fh
	DEFB 3Fh
	DEFB 1Fh
	DEFB 0BCh
	DEFB 0DAh
	DEFB 0D8h
	DEFB 0F7h
	DEFB 0E3h
	DEFB 0FBh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 00h
	DEFB 80h
	DEFB 0CFh
	DEFB 0CEh
	DEFB 92h
	DEFB 74h
	DEFB 77h
	DEFB 0DFh
	DEFB 67h
	DEFB 0FFh
	DEFB 1Dh
	DEFB 0DFh
	DEFB 0F5h
	DEFB 0EBh
	DEFB 5Fh
	DEFB 0FFh
	DEFB 70h
	DEFB 0F8h
	DEFB 9Fh
	DEFB 0Ch
	DEFB 61h
	DEFB 0B2h
	DEFB 0EFh
	DEFB 46h
	DEFB 24h
	DEFB 3Ch
	DEFB 0DBh
	DEFB 7Eh
	DEFB 7Eh
	DEFB 0DBh
	DEFB 3Ch
	DEFB 24h
	DEFB 42h
	DEFB 0EDh
	DEFB 0DBh
	DEFB 0B7h
	DEFB 42h
	DEFB 7Eh
	DEFB 42h
	DEFB 42h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 3Ch
	DEFB 7Eh
	DEFB 00h
	DEFB 00h
	DEFB 24h
	DEFB 18h
	DEFB 3Ch
	DEFB 5Ah
	DEFB 42h
	DEFB 5Ah
	DEFB 3Ch
	DEFB 18h
	DEFB 19h
	DEFB 22h
	DEFB 98h
	DEFB 44h
	DEFB 19h
	DEFB 22h
	DEFB 98h
	DEFB 44h
	DEFB 0E7h
	DEFB 81h
	DEFB 81h
	DEFB 18h
	DEFB 3Ch
	DEFB 81h
	DEFB 81h
	DEFB 0E7h
	DEFB 0E7h
	DEFB 81h
	DEFB 0BDh
	DEFB 3Ch
	DEFB 24h
	DEFB 0A5h
	DEFB 81h
	DEFB 0E7h
	DEFB 0E7h
	DEFB 81h
	DEFB 0A5h
	DEFB 18h
	DEFB 3Ch
	DEFB 99h
	DEFB 81h
	DEFB 0E7h
	DEFB 0E7h
	DEFB 81h
	DEFB 91h
	DEFB 48h
	DEFB 12h
	DEFB 89h
	DEFB 81h
	DEFB 0E7h
	DEFB 5Ah
	DEFB 24h
	DEFB 5Ah
	DEFB 18h
	DEFB 24h
	DEFB 3Ch
	DEFB 66h
	DEFB 0DBh
	DEFB 21h
	DEFB 44h
	DEFB 0F0h
	DEFB 22h
	DEFB 44h
	DEFB 0Fh
	DEFB 22h
	DEFB 84h
	DEFB 3Ch
	DEFB 42h
	DEFB 0FFh
	DEFB 3Ch
	DEFB 00h
	DEFB 18h
	DEFB 00h
	DEFB 7Eh
	DEFB 18h
	DEFB 0FFh
	DEFB 00h
	DEFB 99h
	DEFB 99h
	DEFB 00h
	DEFB 0FFh
	DEFB 18h
	DEFB 00h
	DEFB 3Ch
	DEFB 72h
	DEFB 72h
	DEFB 42h
	DEFB 42h
	DEFB 3Ch
	DEFB 00h
	DEFB 00h
	DEFB 18h
	DEFB 38h
	DEFB 08h
	DEFB 08h
	DEFB 08h
	DEFB 08h
	DEFB 00h
	DEFB 00h
	DEFB 7Eh
	DEFB 62h
	DEFB 02h
	DEFB 7Eh
	DEFB 40h
	DEFB 7Eh
	DEFB 00h
	DEFB 00h
	DEFB 7Eh
	DEFB 62h
	DEFB 02h
	DEFB 1Eh
	DEFB 42h
	DEFB 7Eh
	DEFB 00h
	DEFB 00h
	DEFB 1Ch
	DEFB 2Ch
	DEFB 44h
	DEFB 7Ch
	DEFB 04h
	DEFB 04h
	DEFB 00h
	DEFB 00h
	DEFB 7Eh
	DEFB 46h
	DEFB 40h
	DEFB 7Eh
	DEFB 02h
	DEFB 7Eh
	DEFB 00h
	DEFB 00h
	DEFB 7Eh
	DEFB 40h
	DEFB 7Eh
	DEFB 72h
	DEFB 62h
	DEFB 7Eh
	DEFB 00h
	DEFB 00h
	DEFB 7Eh
	DEFB 62h
	DEFB 04h
	DEFB 08h
	DEFB 18h
	DEFB 18h
	DEFB 00h
	DEFB 00h
	DEFB 3Ch
	DEFB 2Ch
	DEFB 24h
	DEFB 7Eh
	DEFB 62h
	DEFB 7Eh
	DEFB 00h
	DEFB 00h
	DEFB 7Eh
	DEFB 62h
	DEFB 7Eh
	DEFB 02h
	DEFB 06h
	DEFB 7Eh
	DEFB 00h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 00h
	DEFB 1Fh
	DEFB 38h
	DEFB 67h
	DEFB 7Eh
	DEFB 73h
	DEFB 61h
	DEFB 71h
	DEFB 00h
	DEFB 0F8h
	DEFB 1Ch
	DEFB 0E6h
	DEFB 7Eh
	DEFB 0CEh
	DEFB 86h
	DEFB 8Eh
	DEFB 79h
	DEFB 3Fh
	DEFB 37h
	DEFB 32h
	DEFB 30h
	DEFB 35h
	DEFB 1Fh
	DEFB 0Fh
	DEFB 9Eh
	DEFB 0FCh
	DEFB 0ECh
	DEFB 4Ch
	DEFB 0Ch
	DEFB 0ACh
	DEFB 0F8h
	DEFB 0F0h
	DEFB 00h
	DEFB 1Fh
	DEFB 39h
	DEFB 7Eh
	DEFB 67h
	DEFB 61h
	DEFB 61h
	DEFB 61h
	DEFB 00h
	DEFB 0F8h
	DEFB 9Ch
	DEFB 7Eh
	DEFB 0E6h
	DEFB 86h
	DEFB 86h
	DEFB 86h
	DEFB 71h
	DEFB 3Fh
	DEFB 27h
	DEFB 22h
	DEFB 20h
	DEFB 20h
	DEFB 15h
	DEFB 0Fh
	DEFB 8Eh
	DEFB 0FCh
	DEFB 0E4h
	DEFB 44h
	DEFB 04h
	DEFB 04h
	DEFB 0A8h
	DEFB 0F0h
	DEFB 09h
	DEFB 1Dh
	DEFB 0Fh
	DEFB 06h
	DEFB 04h
	DEFB 07h
	DEFB 07h
	DEFB 0Eh
	DEFB 90h
	DEFB 0B8h
	DEFB 0F0h
	DEFB 60h
	DEFB 20h
	DEFB 0E0h
	DEFB 0E0h
	DEFB 70h
	DEFB 1Ch
	DEFB 1Fh
	DEFB 1Eh
	DEFB 1Ch
	DEFB 19h
	DEFB 1Bh
	DEFB 66h
	DEFB 22h
	DEFB 38h
	DEFB 0F8h
	DEFB 78h
	DEFB 38h
	DEFB 98h
	DEFB 0D8h
	DEFB 66h
	DEFB 44h
	DEFB 09h
	DEFB 1Dh
	DEFB 0Fh
	DEFB 06h
	DEFB 04h
	DEFB 07h
	DEFB 07h
	DEFB 0Eh
	DEFB 90h
	DEFB 0BAh
	DEFB 0F0h
	DEFB 63h
	DEFB 26h
	DEFB 0ECh
	DEFB 0E2h
	DEFB 70h
	DEFB 1Ch
	DEFB 1Fh
	DEFB 1Eh
	DEFB 1Ch
	DEFB 19h
	DEFB 1Bh
	DEFB 66h
	DEFB 22h
	DEFB 38h
	DEFB 0F8h
	DEFB 78h
	DEFB 38h
	DEFB 98h
	DEFB 0D8h
	DEFB 66h
	DEFB 44h
	DEFB 09h
	DEFB 1Dh
	DEFB 0Fh
	DEFB 06h
	DEFB 04h
	DEFB 07h
	DEFB 07h
	DEFB 0Eh
	DEFB 90h
	DEFB 0B8h
	DEFB 0F0h
	DEFB 60h
	DEFB 3Ch
	DEFB 0C2h
	DEFB 0DAh
	DEFB 5Ah
	DEFB 1Ch
	DEFB 1Fh
	DEFB 1Eh
	DEFB 1Ch
	DEFB 19h
	DEFB 1Bh
	DEFB 66h
	DEFB 22h
	DEFB 42h
	DEFB 0BCh
	DEFB 78h
	DEFB 38h
	DEFB 98h
	DEFB 0D8h
	DEFB 66h
	DEFB 44h
	DEFB 09h
	DEFB 1Dh
	DEFB 0Fh
	DEFB 07h
	DEFB 04h
	DEFB 04h
	DEFB 06h
	DEFB 0Eh
	DEFB 88h
	DEFB 99h
	DEFB 80h
	DEFB 3Ch
	DEFB 42h
	DEFB 99h
	DEFB 0A5h
	DEFB 0A5h
	DEFB 1Ch
	DEFB 1Eh
	DEFB 1Eh
	DEFB 1Ch
	DEFB 19h
	DEFB 1Bh
	DEFB 66h
	DEFB 22h
	DEFB 99h
	DEFB 42h
	DEFB 3Ch
	DEFB 01h
	DEFB 98h
	DEFB 0C8h
	DEFB 66h
	DEFB 44h
	DEFB 08h
	DEFB 18h
	DEFB 09h
	DEFB 02h
	DEFB 02h
	DEFB 00h
	DEFB 00h
	DEFB 08h
	DEFB 0Ch
	DEFB 82h
	DEFB 39h
	DEFB 45h
	DEFB 3Ch
	DEFB 7Eh
	DEFB 0F7h
	DEFB 6Fh
	DEFB 1Ah
	DEFB 12h
	DEFB 12h
	DEFB 10h
	DEFB 19h
	DEFB 18h
	DEFB 66h
	DEFB 22h
	DEFB 7Eh
	DEFB 0BCh
	DEFB 99h
	DEFB 4Eh
	DEFB 30h
	DEFB 82h
	DEFB 6Ch
	DEFB 00h
	DEFB 21h
	DEFB 47h
	DEFB 06h
	DEFB 10h
	DEFB 19h
	DEFB 1Ah
	DEFB 20h
	DEFB 28h
	DEFB 0Ch
	DEFB 4Eh
	DEFB 25h
	DEFB 43h
	DEFB 05h
	DEFB 00h
	DEFB 98h
	DEFB 19h
	DEFB 02h
	DEFB 32h
	DEFB 18h
	DEFB 19h
	DEFB 08h
	DEFB 42h
	DEFB 27h
	DEFB 01h
	DEFB 82h
	DEFB 30h
	DEFB 01h
	DEFB 41h
	DEFB 17h
	DEFB 80h
	DEFB 69h
	DEFB 0C2h
	DEFB 00h
	DEFB 08h
	DEFB 00h
	DEFB 00h
	DEFB 20h
	DEFB 04h
	DEFB 00h
	DEFB 40h
	DEFB 00h
	DEFB 40h
	DEFB 04h
	DEFB 00h
	DEFB 02h
	DEFB 00h
	DEFB 00h
	DEFB 80h
	DEFB 00h
	DEFB 20h
	DEFB 04h
	DEFB 00h
	DEFB 40h
	DEFB 00h
	DEFB 08h
	DEFB 00h
	DEFB 00h
	DEFB 08h
	DEFB 00h
	DEFB 22h
	DEFB 00h
	DEFB 40h
	DEFB 08h
	DEFB 00h
	DEFB 4Eh
	DEFB 4Ch
	DEFB 78h
	DEFB 49h
	DEFB 4Ch
	DEFB 76h
	DEFB 4Bh
	DEFB 3Fh
	DEFB 72h
	DEFB 32h
	DEFB 1Eh
	DEFB 92h
	DEFB 32h
	DEFB 6Eh
	DEFB 0D2h
	DEFB 7Ch
	DEFB 02h
	DEFB 03h
	DEFB 02h
	DEFB 03h
	DEFB 02h
	DEFB 03h
	DEFB 01h
	DEFB 00h
	DEFB 0C0h
	DEFB 40h
	DEFB 0C0h
	DEFB 40h
	DEFB 0C0h
	DEFB 40h
	DEFB 80h
	DEFB 00h
	DEFB 76h
	DEFB 4Bh
	DEFB 3Fh
	DEFB 02h
	DEFB 03h
	DEFB 02h
	DEFB 03h
	DEFB 02h
	DEFB 6Eh
	DEFB 0D2h
	DEFB 7Ch
	DEFB 0C0h
	DEFB 40h
	DEFB 0C0h
	DEFB 40h
	DEFB 0C0h
	DEFB 03h
	DEFB 01h
	DEFB 04h
	DEFB 01h
	DEFB 11h
	DEFB 01h
	DEFB 45h
	DEFB 11h
	DEFB 40h
	DEFB 80h
	DEFB 20h
	DEFB 80h
	DEFB 88h
	DEFB 0A0h
	DEFB 82h
	DEFB 90h
__LABEL672:
	DEFW 0001h
	DEFW 0008h
	DEFB 01h
_tileColors:
	DEFW __LABEL673
_tileColors.__DATA__.__PTR__:
	DEFW _tileColors.__DATA__
_tileColors.__DATA__:
	DEFB 00h
	DEFB 42h
	DEFB 42h
	DEFB 46h
	DEFB 46h
	DEFB 42h
	DEFB 42h
	DEFB 46h
	DEFB 46h
	DEFB 42h
	DEFB 42h
	DEFB 46h
	DEFB 46h
	DEFB 42h
	DEFB 42h
	DEFB 46h
	DEFB 46h
	DEFB 42h
	DEFB 42h
	DEFB 46h
	DEFB 46h
	DEFB 42h
	DEFB 42h
	DEFB 46h
	DEFB 46h
	DEFB 42h
	DEFB 42h
	DEFB 46h
	DEFB 46h
	DEFB 42h
	DEFB 42h
	DEFB 46h
	DEFB 46h
	DEFB 41h
	DEFB 41h
	DEFB 41h
	DEFB 41h
	DEFB 47h
	DEFB 41h
	DEFB 41h
	DEFB 41h
	DEFB 41h
	DEFB 45h
	DEFB 45h
	DEFB 45h
	DEFB 45h
	DEFB 07h
	DEFB 47h
	DEFB 07h
	DEFB 07h
	DEFB 47h
	DEFB 07h
	DEFB 03h
	DEFB 03h
	DEFB 02h
	DEFB 03h
	DEFB 02h
	DEFB 02h
	DEFB 02h
	DEFB 02h
	DEFB 02h
	DEFB 03h
	DEFB 03h
	DEFB 02h
	DEFB 03h
	DEFB 02h
	DEFB 02h
	DEFB 03h
	DEFB 02h
	DEFB 03h
	DEFB 02h
	DEFB 02h
	DEFB 10h
	DEFB 10h
	DEFB 10h
	DEFB 10h
	DEFB 16h
	DEFB 10h
	DEFB 10h
	DEFB 10h
	DEFB 10h
	DEFB 06h
	DEFB 44h
	DEFB 03h
	DEFB 06h
	DEFB 42h
	DEFB 44h
	DEFB 06h
	DEFB 03h
	DEFB 42h
	DEFB 44h
	DEFB 05h
	DEFB 0CEh
	DEFB 46h
	DEFB 47h
	DEFB 47h
	DEFB 47h
	DEFB 47h
	DEFB 47h
	DEFB 47h
	DEFB 47h
	DEFB 47h
	DEFB 47h
	DEFB 47h
	DEFB 47h
	DEFB 38h
	DEFB 04h
	DEFB 04h
	DEFB 04h
	DEFB 04h
	DEFB 04h
	DEFB 04h
	DEFB 04h
	DEFB 04h
	DEFB 06h
	DEFB 06h
	DEFB 06h
	DEFB 06h
	DEFB 46h
	DEFB 46h
	DEFB 46h
	DEFB 46h
	DEFB 72h
	DEFB 72h
	DEFB 72h
	DEFB 72h
	DEFB 56h
	DEFB 56h
	DEFB 56h
	DEFB 56h
	DEFB 56h
	DEFB 56h
	DEFB 56h
	DEFB 56h
	DEFB 56h
	DEFB 56h
	DEFB 56h
	DEFB 56h
	DEFB 56h
	DEFB 56h
	DEFB 56h
	DEFB 56h
	DEFB 07h
	DEFB 07h
	DEFB 07h
	DEFB 07h
	DEFB 72h
	DEFB 72h
	DEFB 72h
	DEFB 72h
__LABEL673:
	DEFW 0000h
	DEFB 01h
_shots:
	DEFW __LABEL674
_shots.__DATA__.__PTR__:
	DEFW _shots.__DATA__
_shots.__DATA__:
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
__LABEL674:
	DEFW 0001h
	DEFW 0004h
	DEFB 01h
_activeMap:
	DEFW __LABEL675
_activeMap.__DATA__.__PTR__:
	DEFW _activeMap.__DATA__
_activeMap.__DATA__:
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
__LABEL675:
	DEFW 0001h
	DEFW 0014h
	DEFB 01h
_reflectDirsA:
	DEFW __LABEL676
_reflectDirsA.__DATA__.__PTR__:
	DEFW _reflectDirsA.__DATA__
_reflectDirsA.__DATA__:
	DEFB 02h
	DEFB 04h
	DEFB 01h
	DEFB 03h
__LABEL676:
	DEFW 0000h
	DEFB 01h
_reflectDirsB:
	DEFW __LABEL677
_reflectDirsB.__DATA__.__PTR__:
	DEFW _reflectDirsB.__DATA__
_reflectDirsB.__DATA__:
	DEFB 04h
	DEFB 01h
	DEFB 02h
	DEFB 03h
__LABEL677:
	DEFW 0000h
	DEFB 01h
_reflectDirsC:
	DEFW __LABEL678
_reflectDirsC.__DATA__.__PTR__:
	DEFW _reflectDirsC.__DATA__
_reflectDirsC.__DATA__:
	DEFB 02h
	DEFB 03h
	DEFB 04h
	DEFB 01h
__LABEL678:
	DEFW 0000h
	DEFB 01h
_reflectDirsD:
	DEFW __LABEL679
_reflectDirsD.__DATA__.__PTR__:
	DEFW _reflectDirsD.__DATA__
_reflectDirsD.__DATA__:
	DEFB 03h
	DEFB 01h
	DEFB 04h
	DEFB 02h
__LABEL679:
	DEFW 0000h
	DEFB 01h
_maskTable:
	DEFW __LABEL680
_maskTable.__DATA__.__PTR__:
	DEFW _maskTable.__DATA__
_maskTable.__DATA__:
	DEFB 01h
	DEFB 02h
	DEFB 04h
	DEFB 08h
	DEFB 10h
	DEFB 20h
	DEFB 40h
	DEFB 80h
__LABEL680:
	DEFW 0000h
	DEFB 01h
_bitTable:
	DEFW __LABEL681
_bitTable.__DATA__.__PTR__:
	DEFW _bitTable.__DATA__
_bitTable.__DATA__:
	DEFB 01h
	DEFB 03h
	DEFB 07h
	DEFB 0Fh
	DEFB 1Fh
	DEFB 3Fh
	DEFB 7Fh
	DEFB 00h
__LABEL681:
	DEFW 0000h
	DEFB 01h
_aliens:
	DEFW __LABEL682
_aliens.__DATA__.__PTR__:
	DEFW _aliens.__DATA__
_aliens.__DATA__:
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
__LABEL682:
	DEFW 0001h
	DEFW 0004h
	DEFB 01h
_tanks:
	DEFW __LABEL683
_tanks.__DATA__.__PTR__:
	DEFW _tanks.__DATA__
_tanks.__DATA__:
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
__LABEL683:
	DEFW 0001h
	DEFW 0004h
	DEFB 01h
_ships:
	DEFW __LABEL684
_ships.__DATA__.__PTR__:
	DEFW _ships.__DATA__
_ships.__DATA__:
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
__LABEL684:
	DEFW 0001h
	DEFW 0004h
	DEFB 01h
_hangars:
	DEFW __LABEL685
_hangars.__DATA__.__PTR__:
	DEFW _hangars.__DATA__
_hangars.__DATA__:
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
__LABEL685:
	DEFW 0001h
	DEFW 0004h
	DEFB 01h
_attribsAlienA:
	DEFW __LABEL686
_attribsAlienA.__DATA__.__PTR__:
	DEFW _attribsAlienA.__DATA__
_attribsAlienA.__DATA__:
	DEFB 00h
	DEFB 01h
	DEFB 41h
	DEFB 03h
	DEFB 04h
	DEFB 44h
__LABEL686:
	DEFW 0000h
	DEFB 01h
_attribsAlienB:
	DEFW __LABEL687
_attribsAlienB.__DATA__.__PTR__:
	DEFW _attribsAlienB.__DATA__
_attribsAlienB.__DATA__:
	DEFB 42h
	DEFB 02h
	DEFB 01h
	DEFB 00h
__LABEL687:
	DEFW 0000h
	DEFB 01h
_colorsExp:
	DEFW __LABEL688
_colorsExp.__DATA__.__PTR__:
	DEFW _colorsExp.__DATA__
_colorsExp.__DATA__:
	DEFB 42h
	DEFB 02h
	DEFB 01h
	DEFB 00h
__LABEL688:
	DEFW 0000h
	DEFB 01h
ZXBASIC_USER_DATA_END:
__MAIN_PROGRAM__:
#line 34 "C:/Users/geniw/source/repos/BattleGrid/BattleGrid/ZxBasicFiles/GuSprites.zxbas"
#line 38 "C:/Users/geniw/source/repos/BattleGrid/BattleGrid/ZxBasicFiles/GuSprites.zxbas"
#line 45 "C:/Users/geniw/source/repos/BattleGrid/BattleGrid/ZxBasicFiles/GuSprites.zxbas"
#line 52 "C:/Users/geniw/source/repos/BattleGrid/BattleGrid/ZxBasicFiles/GuSprites.zxbas"
#line 57 "C:/Users/geniw/source/repos/BattleGrid/BattleGrid/ZxBasicFiles/GuSprites.zxbas"
#line 66 "C:/Users/geniw/source/repos/BattleGrid/BattleGrid/ZxBasicFiles/GuSprites.zxbas"
#line 70 "C:/Users/geniw/source/repos/BattleGrid/BattleGrid/ZxBasicFiles/GuSprites.zxbas"
#line 80 "C:/Users/geniw/source/repos/BattleGrid/BattleGrid/ZxBasicFiles/GuSprites.zxbas"
#line 95 "C:/Users/geniw/source/repos/BattleGrid/BattleGrid/ZxBasicFiles/GuSprites.zxbas"
#line 136 "C:/Users/geniw/source/repos/BattleGrid/BattleGrid/ZxBasicFiles/GuSprites.zxbas"
#line 141 "C:/Users/geniw/source/repos/BattleGrid/BattleGrid/ZxBasicFiles/GuSprites.zxbas"
#line 147 "C:/Users/geniw/source/repos/BattleGrid/BattleGrid/ZxBasicFiles/GuSprites.zxbas"
#line 154 "C:/Users/geniw/source/repos/BattleGrid/BattleGrid/ZxBasicFiles/GuSprites.zxbas"
#line 162 "C:/Users/geniw/source/repos/BattleGrid/BattleGrid/ZxBasicFiles/GuSprites.zxbas"
#line 172 "C:/Users/geniw/source/repos/BattleGrid/BattleGrid/ZxBasicFiles/GuSprites.zxbas"
#line 178 "C:/Users/geniw/source/repos/BattleGrid/BattleGrid/ZxBasicFiles/GuSprites.zxbas"
#line 182 "C:/Users/geniw/source/repos/BattleGrid/BattleGrid/ZxBasicFiles/GuSprites.zxbas"
#line 183 "C:/Users/geniw/source/repos/BattleGrid/BattleGrid/ZxBasicFiles/GuSprites.zxbas"
#line 185 "C:/Users/geniw/source/repos/BattleGrid/BattleGrid/ZxBasicFiles/GuSprites.zxbas"
#line 189 "C:/Users/geniw/source/repos/BattleGrid/BattleGrid/ZxBasicFiles/GuSprites.zxbas"
#line 190 "C:/Users/geniw/source/repos/BattleGrid/BattleGrid/ZxBasicFiles/GuSprites.zxbas"
#line 192 "C:/Users/geniw/source/repos/BattleGrid/BattleGrid/ZxBasicFiles/GuSprites.zxbas"
		SPRITE_1x1_BUFFER_SIZE equ (6 * 8)
		SPRITE_1x2_BUFFER_SIZE equ (9 * 8)
		SPRITE_2x2_BUFFER_SIZE equ (15 * 8)
		SPRITE_1x1_SHIFTED_SIZE equ 4
		SPRITE_1x2_SHIFTED_SIZE equ 6
		SPRITE_2x2_SHIFTED_SIZE equ 9
		TOTAL_1x1_OPS equ (12 * SPRITE_1x1_SHIFTED_SIZE)
		TOTAL_1x2_OPS equ (0 * SPRITE_1x2_SHIFTED_SIZE)
		TOTAL_2x2_OPS equ (0 * SPRITE_2x2_SHIFTED_SIZE)
		TOTAL_DRAW_OPS equ ((TOTAL_1x1_OPS + TOTAL_1x2_OPS + TOTAL_2x2_OPS) * 2)
		DRAW_OP_SIZE equ 5
#line 213 "C:/Users/geniw/source/repos/BattleGrid/BattleGrid/ZxBasicFiles/GuSprites.zxbas"
		DRAW_OPS_SIZE equ (TOTAL_DRAW_OPS * DRAW_OP_SIZE)
		DRAW_OPS_DATA_SIZE equ (TOTAL_DRAW_OPS * 8)
		SPRITE_BUFFER_SIZE equ ((16 * SPRITE_1x1_BUFFER_SIZE)+(0 * SPRITE_1x2_BUFFER_SIZE)+(0 * SPRITE_2x2_BUFFER_SIZE))
		SPRITE_INDEX_SIZE equ ((16 + 0 + 0 + 1) * 2)
		jp GSPRITES_LIB_END
DRAW_OPS_A:
		defs DRAW_OPS_SIZE
DRAW_OPS_B:
		defs DRAW_OPS_SIZE
DRAW_OPS_DATA:
		defs DRAW_OPS_DATA_SIZE
CURRENT_DRAW_OPS:
		defw 0
CURRENT_CLEAR_OPS:
		defw 0
CURRENT_DRAW_COUNT:
		defb 0
CURRENT_CLEAR_COUNT:
		defb 0
DRAW_OPS_DATA_INDEX:
		defw 0
CELL_MAP_A:
		defs (32 * 24)
CELL_MAP_B:
		defs (32 * 24)
CURRENT_DRAW_MAP:
		defw 0
CURRENT_CLEAR_MAP:
		defw 0
SPRITE_BUFFER:
		defs SPRITE_BUFFER_SIZE
SPRITE_INDEX:
		defs SPRITE_INDEX_SIZE
SPRITE_COUNT:
		defb 0
#line 282 "C:/Users/geniw/source/repos/BattleGrid/BattleGrid/ZxBasicFiles/GuSprites.zxbas"
TILE_SET:
		defw 0
TILE_MAP:
		defs 768
#line 291 "C:/Users/geniw/source/repos/BattleGrid/BattleGrid/ZxBasicFiles/GuSprites.zxbas"
		PROC
INIT_GFX_LIB:
#line 301 "C:/Users/geniw/source/repos/BattleGrid/BattleGrid/ZxBasicFiles/GuSprites.zxbas"
		ld hl, DRAW_OPS_A
		ld (CURRENT_DRAW_OPS), hl
#line 303
		ld hl, DRAW_OPS_B
		ld (CURRENT_CLEAR_OPS), hl
#line 304
		ld hl, DRAW_OPS_DATA
		ld (DRAW_OPS_DATA_INDEX), hl
#line 306
		ld hl, CELL_MAP_A
		ld (CURRENT_DRAW_MAP), hl
#line 308
		ld hl, CELL_MAP_B
		ld (CURRENT_CLEAR_MAP), hl
#line 309
		ld hl, SPRITE_BUFFER
		ld (SPRITE_INDEX), hl
#line 311
		ret
		ENDP
		PROC
RESET_GFX_LIB:
		ld hl, DRAW_OPS_A
		ld (CURRENT_DRAW_OPS), hl
#line 319
		ld hl, DRAW_OPS_B
		ld (CURRENT_CLEAR_OPS), hl
#line 320
		ld hl, CELL_MAP_A
		ld (CURRENT_DRAW_MAP), hl
#line 322
		ld hl, CELL_MAP_B
		ld (CURRENT_CLEAR_MAP), hl
#line 323
		ld hl, DRAW_OPS_DATA
		ld (DRAW_OPS_DATA_INDEX), hl
#line 325
		ld hl, SPRITE_BUFFER
		ld (SPRITE_INDEX), hl
#line 327
		xor a
		ld (CURRENT_DRAW_COUNT), a
		ld (CURRENT_CLEAR_COUNT), a
		xor a
		ld de, SPRITE_BUFFER
		ld (de), a
		inc de
		ld hl, SPRITE_BUFFER
		ld bc, SPRITE_BUFFER_SIZE - 1
		ldir
#line 333
		xor a
		ld de, CELL_MAP_A
		ld (de), a
		inc de
		ld hl, CELL_MAP_A
		ld bc, 768 - 1
		ldir
#line 334
		xor a
		ld de, CELL_MAP_B
		ld (de), a
		inc de
		ld hl, CELL_MAP_B
		ld bc, 768 - 1
		ldir
#line 335
		xor a
		ld de, TILE_MAP
		ld (de), a
		inc de
		ld hl, TILE_MAP
		ld bc, 768 - 1
		ldir
#line 338
#line 339 "C:/Users/geniw/source/repos/BattleGrid/BattleGrid/ZxBasicFiles/GuSprites.zxbas"
		ret
		ENDP
		PROC
CLEAR_SCREEN:
		ld hl, DRAW_OPS_A
		ld (CURRENT_DRAW_OPS), hl
#line 347
		ld hl, DRAW_OPS_B
		ld (CURRENT_CLEAR_OPS), hl
#line 348
		ld hl, CELL_MAP_A
		ld (CURRENT_DRAW_MAP), hl
#line 350
		ld hl, CELL_MAP_B
		ld (CURRENT_CLEAR_MAP), hl
#line 351
		ld hl, DRAW_OPS_DATA
		ld (DRAW_OPS_DATA_INDEX), hl
#line 353
		xor a
		ld (CURRENT_DRAW_COUNT), a
		ld (CURRENT_CLEAR_COUNT), a
		xor a
		ld de, CELL_MAP_A
		ld (de), a
		inc de
		ld hl, CELL_MAP_A
		ld bc, 768 - 1
		ldir
#line 359
		xor a
		ld de, CELL_MAP_B
		ld (de), a
		inc de
		ld hl, CELL_MAP_B
		ld bc, 768 - 1
		ldir
#line 360
		xor a
		ld de, TILE_MAP
		ld (de), a
		inc de
		ld hl, TILE_MAP
		ld bc, 768 - 1
		ldir
#line 363
#line 364 "C:/Users/geniw/source/repos/BattleGrid/BattleGrid/ZxBasicFiles/GuSprites.zxbas"
		ret
		ENDP
		PROC
		LOCAL RENDER_LOOP, END_RENDER, RESTORE_STACK
RENDER_FRAME:
#line 375 "C:/Users/geniw/source/repos/BattleGrid/BattleGrid/ZxBasicFiles/GuSprites.zxbas"
		halt
#line 379 "C:/Users/geniw/source/repos/BattleGrid/BattleGrid/ZxBasicFiles/GuSprites.zxbas"
		ld a, (CURRENT_DRAW_COUNT)
		cp 0
		jp z, END_RENDER
		ld hl, (CURRENT_DRAW_OPS)
		push hl
RENDER_LOOP:
		pop hl
		ld e, (hl)
		inc hl
		ld d, (hl)
		inc hl
#line 393
		ld c, (hl)
		inc hl
		ld b, (hl)
		inc hl
#line 394
		inc hl
#line 398 "C:/Users/geniw/source/repos/BattleGrid/BattleGrid/ZxBasicFiles/GuSprites.zxbas"
		push hl
		ld h, b
		ld l, c
#line 402
		ld (RESTORE_STACK + 1), sp
		ld sp, hl
		ex de, hl
		pop de
		ld (hl), e
		inc h
		ld (hl), d
		inc h
		pop de
		ld (hl), e
		inc h
		ld (hl), d
		inc h
		pop de
		ld (hl), e
		inc h
		ld (hl), d
		inc h
		pop de
		ld (hl), e
		inc h
		ld (hl), d
RESTORE_STACK:
		ld sp, 0
		ld hl, CURRENT_DRAW_COUNT
		dec (hl)
		jp nz, RENDER_LOOP
		pop bc
END_RENDER:
		ld bc, (CURRENT_DRAW_OPS)
		ld de, (CURRENT_CLEAR_OPS)
		ld (CURRENT_DRAW_OPS), de
		ld (CURRENT_CLEAR_OPS), bc
		ld de, (CURRENT_DRAW_MAP)
		ld bc, (CURRENT_CLEAR_MAP)
		ld (CURRENT_DRAW_MAP), bc
		ld (CURRENT_CLEAR_MAP), de
		xor a
		push de
		ld (de), a
		inc de
		pop hl
		ld bc, 767
		ldir
		ld a, (CURRENT_CLEAR_COUNT)
		ld (CURRENT_DRAW_COUNT), a
		xor a
		ld (CURRENT_CLEAR_COUNT), a
		ld hl, DRAW_OPS_DATA
		ld (DRAW_OPS_DATA_INDEX), hl
#line 466
		ret
		ENDP
		PROC
CREATE_SPRITE_BUFFER:
		ld a, (SPRITE_COUNT)
		add a, a
		ld e, a
		ld d, 0
		ld hl, SPRITE_INDEX
		add hl, de
		ld e, (hl)
		inc hl
		ld d, (hl)
		inc hl
#line 482
		push de
		ex de, hl
		add hl, bc
		ex de, hl
		ld (hl), e
		inc hl
		ld (hl), d
		inc hl
#line 490
		ld hl, SPRITE_COUNT
		inc (hl)
		pop hl
		ret
		ENDP
		PROC
		LOCAL LOOP
CREATE_1x1_SPRITE:
		push hl
		ld bc, SPRITE_1x1_BUFFER_SIZE
		call CREATE_SPRITE_BUFFER
		ld de, 4
		add hl, de
		pop de
		push de
		ex de, hl
		ldi
		ldi
		ldi
		ldi
		ldi
		ldi
		ldi
		ldi
#line 518
		ld hl, 8
		add hl, de
		ex de, hl
		pop hl
		ld ixh, d
		ld ixl, e
		ld b, 8
LOOP:
		ld e, (hl)
		ld d, 0
		inc hl
		ex de, hl
		add hl, hl
		add hl, hl
		add hl, hl
		add hl, hl
#line 539
		ex de, hl
		ld (ix+0), d
		ld (ix+16), e
		inc ix
		djnz LOOP
		ld a, (SPRITE_COUNT)
		ret
		ENDP
#line 553 "C:/Users/geniw/source/repos/BattleGrid/BattleGrid/ZxBasicFiles/GuSprites.zxbas"
#line 611 "C:/Users/geniw/source/repos/BattleGrid/BattleGrid/ZxBasicFiles/GuSprites.zxbas"
#line 680 "C:/Users/geniw/source/repos/BattleGrid/BattleGrid/ZxBasicFiles/GuSprites.zxbas"
		PROC
		LOCAL EXISTING_OP, REAL_EXISTING_OP
CREATE_DRAW_OP:
		push hl
		push bc
		ld l, c
		ld h, 0
		add hl, hl
		add hl, hl
		add hl, hl
		add hl, hl
		add hl, hl
#line 694
		ld c, b
		ld b, 0
		add hl, bc
		ld de, (CURRENT_DRAW_MAP)
		push hl
		add hl, de
		ld a, (hl)
		and a
		jp nz, EXISTING_OP
		ld a, (CURRENT_DRAW_COUNT)
		inc a
		ld (CURRENT_DRAW_COUNT), a
		ld (hl), a
		dec a
		ld l, a
		ld h, 0
		ld d, h
		ld e, l
#line 722
		add hl, hl
		add hl, hl
#line 723
		add hl, de
#line 728 "C:/Users/geniw/source/repos/BattleGrid/BattleGrid/ZxBasicFiles/GuSprites.zxbas"
		ld bc, (CURRENT_DRAW_OPS)
		add hl, bc
		pop de
		pop bc
		push de
		ld a, c
		and %00011000
		or  %01000000
		ld d, a
		ld a, c
		and %00000111
		rla
		rla
		rla
		rla
		rla
		or b
		ld e, a
		ld ixh, d
		ld ixl, e
		ld (hl), e
		inc hl
		ld (hl), d
		inc hl
#line 754
		ld de, (DRAW_OPS_DATA_INDEX)
		ld iyh, d
		ld iyl, e
		ld (hl), e
		inc hl
		ld (hl), d
		inc hl
#line 761
		ld (hl), 1
#line 767 "C:/Users/geniw/source/repos/BattleGrid/BattleGrid/ZxBasicFiles/GuSprites.zxbas"
		ld l, 8
		ld h, 0
		add hl, de
		ld (DRAW_OPS_DATA_INDEX), hl
		pop bc
		ld hl, (CURRENT_CLEAR_MAP)
		add hl, bc
		ld a, (CURRENT_CLEAR_COUNT)
		inc a
		ld (CURRENT_CLEAR_COUNT), a
		ld (hl), a
		dec a
		ld l, a
		ld h, 0
		ld d, h
		ld e, l
#line 793
		add hl, hl
		add hl, hl
#line 794
		add hl, de
#line 801 "C:/Users/geniw/source/repos/BattleGrid/BattleGrid/ZxBasicFiles/GuSprites.zxbas"
		ld de, (CURRENT_CLEAR_OPS)
		add hl, de
		ld d, ixh
		ld e, ixl
		ld (hl), e
		inc hl
		ld (hl), d
		inc hl
#line 809
		ex de, hl
		ld hl, TILE_MAP
		add hl, bc
		ld a, (hl)
		ld l, a
		ld h, 0
		add hl, hl
		add hl, hl
		add hl, hl
#line 821
		ld bc, (TILE_SET)
		add hl, bc
		ex de, hl
		ld (hl), e
		inc hl
		ld (hl), d
		inc hl
#line 827
		ld (hl), 2
#line 838 "C:/Users/geniw/source/repos/BattleGrid/BattleGrid/ZxBasicFiles/GuSprites.zxbas"
		pop hl
		ld b, iyh
		ld c, iyl
		ld a, (de)
		or (hl)
		ld (bc), a
		inc bc
		inc de
		inc hl
		ld a, (de)
		or (hl)
		ld (bc), a
		inc bc
		inc de
		inc hl
		ld a, (de)
		or (hl)
		ld (bc), a
		inc bc
		inc de
		inc hl
		ld a, (de)
		or (hl)
		ld (bc), a
		inc bc
		inc de
		inc hl
		ld a, (de)
		or (hl)
		ld (bc), a
		inc bc
		inc de
		inc hl
		ld a, (de)
		or (hl)
		ld (bc), a
		inc bc
		inc de
		inc hl
		ld a, (de)
		or (hl)
		ld (bc), a
		inc bc
		inc de
		inc hl
		ld a, (de)
		or (hl)
		ld (bc), a
#line 907 "C:/Users/geniw/source/repos/BattleGrid/BattleGrid/ZxBasicFiles/GuSprites.zxbas"
		ret
EXISTING_OP:
		dec a
		ld l, a
		ld h, 0
		ld d, h
		ld e, l
#line 920
		add hl, hl
		add hl, hl
#line 921
		add hl, de
#line 926 "C:/Users/geniw/source/repos/BattleGrid/BattleGrid/ZxBasicFiles/GuSprites.zxbas"
		ld bc, (CURRENT_DRAW_OPS)
		add hl, bc
		ld c, (hl)
		inc hl
		ld b, (hl)
		inc hl
#line 932
		push hl
		push bc
		ld e, (hl)
		inc hl
		ld d, (hl)
		inc hl
#line 937
		push de
		ld a, (hl)
		and 2
		jp z, REAL_EXISTING_OP
		ld (hl), 1
#line 954 "C:/Users/geniw/source/repos/BattleGrid/BattleGrid/ZxBasicFiles/GuSprites.zxbas"
		pop af
#line 968 "C:/Users/geniw/source/repos/BattleGrid/BattleGrid/ZxBasicFiles/GuSprites.zxbas"
		pop bc
		pop de
		pop hl
		push de
		push af
#line 977 "C:/Users/geniw/source/repos/BattleGrid/BattleGrid/ZxBasicFiles/GuSprites.zxbas"
		ld de, (CURRENT_CLEAR_MAP)
		add hl, de
		ld a, (CURRENT_CLEAR_COUNT)
		inc a
		ld (hl), a
		ld (CURRENT_CLEAR_COUNT), a
		dec a
		ld l, a
		ld h, 0
		ld d, h
		ld e, l
#line 999
		add hl, hl
		add hl, hl
#line 1000
		add hl, de
#line 1005 "C:/Users/geniw/source/repos/BattleGrid/BattleGrid/ZxBasicFiles/GuSprites.zxbas"
		ld de, (CURRENT_CLEAR_OPS)
		add hl, de
		ld (hl), c
		inc hl
		ld (hl), b
		inc hl
#line 1010
		pop de
		ld (hl), e
		inc hl
		ld (hl), d
		inc hl
#line 1015
		ld (hl), 2
#line 1026 "C:/Users/geniw/source/repos/BattleGrid/BattleGrid/ZxBasicFiles/GuSprites.zxbas"
		pop hl
		push de
#line 1032 "C:/Users/geniw/source/repos/BattleGrid/BattleGrid/ZxBasicFiles/GuSprites.zxbas"
		ld de, (DRAW_OPS_DATA_INDEX)
		ld (hl), e
		inc hl
		ld (hl), d
		inc hl
#line 1038
		ld hl, 8
		add hl, de
		ld (DRAW_OPS_DATA_INDEX), hl
		pop bc
#line 1047 "C:/Users/geniw/source/repos/BattleGrid/BattleGrid/ZxBasicFiles/GuSprites.zxbas"
		pop hl
		pop hl
		ld a, (bc)
		or (hl)
		ld (de), a
		inc bc
		inc de
		inc hl
		ld a, (bc)
		or (hl)
		ld (de), a
		inc bc
		inc de
		inc hl
		ld a, (bc)
		or (hl)
		ld (de), a
		inc bc
		inc de
		inc hl
		ld a, (bc)
		or (hl)
		ld (de), a
		inc bc
		inc de
		inc hl
		ld a, (bc)
		or (hl)
		ld (de), a
		inc bc
		inc de
		inc hl
		ld a, (bc)
		or (hl)
		ld (de), a
		inc bc
		inc de
		inc hl
		ld a, (bc)
		or (hl)
		ld (de), a
		inc bc
		inc de
		inc hl
		ld a, (bc)
		or (hl)
		ld (de), a
#line 1107 "C:/Users/geniw/source/repos/BattleGrid/BattleGrid/ZxBasicFiles/GuSprites.zxbas"
		ret
REAL_EXISTING_OP:
		pop hl
		pop hl
		pop hl
		pop hl
		pop hl
#line 1120 "C:/Users/geniw/source/repos/BattleGrid/BattleGrid/ZxBasicFiles/GuSprites.zxbas"
		pop hl
		ex de, hl
		ld a, (de)
		or (hl)
		ld (hl),  a
		inc de
		inc hl
		ld a, (de)
		or (hl)
		ld (hl),  a
		inc de
		inc hl
		ld a, (de)
		or (hl)
		ld (hl),  a
		inc de
		inc hl
		ld a, (de)
		or (hl)
		ld (hl),  a
		inc de
		inc hl
		ld a, (de)
		or (hl)
		ld (hl),  a
		inc de
		inc hl
		ld a, (de)
		or (hl)
		ld (hl),  a
		inc de
		inc hl
		ld a, (de)
		or (hl)
		ld (hl),  a
		inc de
		inc hl
		ld a, (de)
		or (hl)
		ld (hl),  a
#line 1126
		ret
		ENDP
		PROC
		LOCAL LOOP
DRAW_SPRITE_COLUMN:
		LOOP
		push hl
		push bc
		ex af, af'
		call CREATE_DRAW_OP
		pop bc
		pop hl
		inc c
		ld de, 8
		add hl, de
		ex af, af'
		dec a
		jr nz, LOOP
		ret
		ENDP
		PROC
		LOCAL TEST_SHIFTS, HORIZONTAL_SHIFT, VERTICAL_SHIFT
DRAW_1x1_SPRITE:
		dec a
		add a, a
		ld l, a
		ld h, 0
		ld de, SPRITE_INDEX
		add hl, de
		ld e, (hl)
		inc hl
		ld d, (hl)
		inc hl
#line 1173
		ld a, b
		or c
		and 1
		jp nz, TEST_SHIFTS
		srl b
		srl c
		ld hl, 4
		add hl, de
		call CREATE_DRAW_OP
		ret
TEST_SHIFTS:
		ld a, c
		and 1
		jp z, HORIZONTAL_SHIFT
		ld a, b
		and 1
		jp z, VERTICAL_SHIFT
		srl b
		srl c
		ld hl, 16
		add hl, de
		push bc
		ld a, 2
		call DRAW_SPRITE_COLUMN
		ld a,2
		pop bc
		inc b
		call DRAW_SPRITE_COLUMN
		ret
HORIZONTAL_SHIFT:
		srl b
		srl c
		ld hl, 20
		add hl, de
		push bc
		push hl
		call CREATE_DRAW_OP
		pop hl
		pop bc
		inc b
		ld de, 16
		add hl, de
		call CREATE_DRAW_OP
		ret
VERTICAL_SHIFT:
		srl b
		srl c
		ex de, hl
		ld a, 2
		call DRAW_SPRITE_COLUMN
		ret
		ENDP
#line 1258 "C:/Users/geniw/source/repos/BattleGrid/BattleGrid/ZxBasicFiles/GuSprites.zxbas"
#line 1353 "C:/Users/geniw/source/repos/BattleGrid/BattleGrid/ZxBasicFiles/GuSprites.zxbas"
#line 1476 "C:/Users/geniw/source/repos/BattleGrid/BattleGrid/ZxBasicFiles/GuSprites.zxbas"
		PROC
SET_TILEMAP:
		ld de, TILE_SET
		ex de, hl
		ld (hl), e
		inc hl
		ld (hl), d
		inc hl
#line 1484
		ret
		ENDP
		PROC
SET_TILE:
		add hl, hl
		add hl, hl
		add hl, hl
		add hl, hl
		add hl, hl
#line 1493
		add hl, de
		ex de, hl
		ld hl, TILE_MAP
		add hl, de
		ld (hl), a
		ld hl, $5800
		add hl, de
		ld (hl), c
		ld l, a
		ld h, 0
		add hl, hl
		add hl, hl
		add hl, hl
#line 1512
		ld bc, (TILE_SET)
		add hl, bc
		ld a, d
		rla
		rla
		rla
		or %01000000
		ld d, a
		ld a, (hl)
		ld (de), a
		inc hl
		inc d
		ld a, (hl)
		ld (de), a
		inc hl
		inc d
		ld a, (hl)
		ld (de), a
		inc hl
		inc d
		ld a, (hl)
		ld (de), a
		inc hl
		inc d
		ld a, (hl)
		ld (de), a
		inc hl
		inc d
		ld a, (hl)
		ld (de), a
		inc hl
		inc d
		ld a, (hl)
		ld (de), a
		inc hl
		inc d
		ld a, (hl)
		ld (de), a
		ret
		ENDP
		PROC
		LOCAL REAL_OP, NO_OP, END_SET
SET_TILE_CHECKED:
		add hl, hl
		add hl, hl
		add hl, hl
		add hl, hl
		add hl, hl
#line 1565
		add hl, de
		push hl
		ex de, hl
		ld hl, TILE_MAP
		add hl, de
		ld (hl), a
		ld hl, $5800
		add hl, de
		ld (hl), c
		ld l, a
		ld h, 0
		add hl, hl
		add hl, hl
		add hl, hl
#line 1586
		ld bc, (TILE_SET)
		add hl, bc
		push hl
		pop bc
		pop hl
		push hl
		push de
		push bc
		ld de, (CURRENT_DRAW_MAP)
		add hl, de
		ld a, (hl)
		and a
		jp z, NO_OP
REAL_OP:
		dec a
		ld l, a
		ld h, 0
		ld d, h
		ld e, l
#line 1615
		add hl, hl
		add hl, hl
#line 1616
		add hl, de
		ld bc, (CURRENT_DRAW_OPS)
		add hl, bc
		inc hl
		inc hl
		pop de
		ld (hl), e
		inc hl
		ld (hl), d
		inc hl
#line 1628
		ld a, 2
		ld (hl), a
		pop de
		pop de
		jp END_SET
NO_OP:
		pop hl
		pop de
		pop bc
		ld a, d
		rla
		rla
		rla
		or %01000000
		ld d, a
		ld a, (hl)
		ld (de), a
		inc hl
		inc d
		ld a, (hl)
		ld (de), a
		inc hl
		inc d
		ld a, (hl)
		ld (de), a
		inc hl
		inc d
		ld a, (hl)
		ld (de), a
		inc hl
		inc d
		ld a, (hl)
		ld (de), a
		inc hl
		inc d
		ld a, (hl)
		ld (de), a
		inc hl
		inc d
		ld a, (hl)
		ld (de), a
		inc hl
		inc d
		ld a, (hl)
		ld (de), a
END_SET:
		ret
		ENDP
		PROC
GET_TILE:
		add hl, hl
		add hl, hl
		add hl, hl
		add hl, hl
		add hl, hl
#line 1691
		add hl, de
		ex de, hl
		ld hl, TILE_MAP
		add hl, de
		ld a, (hl)
		ret
		ENDP
#line 1705 "C:/Users/geniw/source/repos/BattleGrid/BattleGrid/ZxBasicFiles/GuSprites.zxbas"
GSPRITES_LIB_END:
#line 1579 "C:/Users/geniw/source/repos/BattleGrid/BattleGrid/ZxBasicFiles/GuSprites.zxbas"
__LABEL__defines:
__LABEL__macros:
__LABEL__vars:
__LABEL__init:
	call _InstallHandler
	call _InitFastRnd
	ld a, 7
	call INK
	xor a
	call PAPER
	call COPY_ATTR
	xor a
	call BORDER
	ld a, 1
	call BRIGHT
	call COPY_ATTR
	call CLS
__LABEL__funcs:
__LABEL__main:
	call _InitGraphics
	call _InitInterface
	call _DrawGrid
	call _InitLevel
__LABEL0:
	ld hl, 0
	ld (_frameCounter), hl
	call _UpdateCursor
	call _UpdateAliens
	call _UpdateTanks
	call _UpdateShips
	call _UpdateHangars
	call _UpdatePlayer
	call _UpdateFire
	call _TestCollisions
	ld a, 42
	push af
	ld a, (_playerX)
	push af
	ld a, (_playerSprite)
	call _Draw1x1Sprite
	ld a, (_activeShots)
	or a
	jp z, __LABEL3
	ld a, 1
	ld (_buc), a
	jp __LABEL4
__LABEL7:
	ld a, (_buc)
	ld l, a
	ld h, 0
	ex de, hl
	ld hl, _maskTable.__DATA__
	add hl, de
	dec hl
	ld a, (_activeShots)
	and (hl)
	jp z, __LABEL8
	ld hl, 3
	push hl
	ld a, (_buc)
	ld l, a
	dec hl
	push hl
	ld hl, _shots
	call __ARRAY
	ld a, (hl)
	sub 255
	jp z, __LABEL11
	ld hl, 1
	push hl
	ld a, (_buc)
	ld l, a
	dec hl
	push hl
	ld hl, _shots
	call __ARRAY
	ld a, (hl)
	push af
	ld hl, 0
	push hl
	ld a, (_buc)
	ld l, a
	dec hl
	push hl
	ld hl, _shots
	call __ARRAY
	ld a, (hl)
	push af
	ld hl, 3
	push hl
	ld a, (_buc)
	ld l, a
	dec hl
	push hl
	ld hl, _shots
	call __ARRAY
	ld a, (hl)
	add a, 8
	call _Draw1x1Sprite
	jp __LABEL8
__LABEL11:
	ld hl, 2
	push hl
	ld a, (_buc)
	ld l, a
	dec hl
	push hl
	ld hl, _shots
	call __ARRAY
	ld a, (hl)
	ld h, 3
	call __LTI8
	or a
	jp z, __LABEL13
	ld hl, 1
	push hl
	ld a, (_buc)
	ld l, a
	dec hl
	push hl
	ld hl, _shots
	call __ARRAY
	ld a, (hl)
	and 1
	jp z, __LABEL15
	ld hl, 1
	push hl
	ld a, (_buc)
	ld l, a
	dec hl
	push hl
	ld hl, _shots
	call __ARRAY
	ld a, (hl)
	push af
	ld hl, 0
	push hl
	ld a, (_buc)
	ld l, a
	dec hl
	push hl
	ld hl, _shots
	call __ARRAY
	ld a, (hl)
	push af
	ld a, 4
	call _Draw1x1Sprite
	jp __LABEL8
__LABEL15:
	ld hl, 1
	push hl
	ld a, (_buc)
	ld l, a
	dec hl
	push hl
	ld hl, _shots
	call __ARRAY
	ld a, (hl)
	push af
	ld hl, 0
	push hl
	ld a, (_buc)
	ld l, a
	dec hl
	push hl
	ld hl, _shots
	call __ARRAY
	ld a, (hl)
	push af
	ld a, 5
	call _Draw1x1Sprite
__LABEL16:
	jp __LABEL8
__LABEL13:
	ld hl, 0
	push hl
	ld a, (_buc)
	ld l, a
	dec hl
	push hl
	ld hl, _shots
	call __ARRAY
	ld a, (hl)
	and 1
	jp z, __LABEL17
	ld hl, 1
	push hl
	ld a, (_buc)
	ld l, a
	dec hl
	push hl
	ld hl, _shots
	call __ARRAY
	ld a, (hl)
	push af
	ld hl, 0
	push hl
	ld a, (_buc)
	ld l, a
	dec hl
	push hl
	ld hl, _shots
	call __ARRAY
	ld a, (hl)
	push af
	ld a, 6
	call _Draw1x1Sprite
	jp __LABEL8
__LABEL17:
	ld hl, 1
	push hl
	ld a, (_buc)
	ld l, a
	dec hl
	push hl
	ld hl, _shots
	call __ARRAY
	ld a, (hl)
	push af
	ld hl, 0
	push hl
	ld a, (_buc)
	ld l, a
	dec hl
	push hl
	ld hl, _shots
	call __ARRAY
	ld a, (hl)
	push af
	ld a, 7
	call _Draw1x1Sprite
__LABEL8:
	ld hl, _buc
	inc (hl)
__LABEL4:
	ld a, 3
	ld hl, (_buc - 1)
	cp h
	jp nc, __LABEL7
__LABEL3:
	ld a, (_cursorVisible)
	or a
	jp z, __LABEL20
	ld a, (_cursorY)
	add a, a
	add a, 4
	push af
	ld a, (_cursorX)
	add a, a
	add a, 2
	push af
	ld a, 12
	call _Draw1x1Sprite
__LABEL20:
	ld a, (_activeAliens)
	or a
	jp z, __LABEL22
	ld a, 1
	ld (_buc), a
	jp __LABEL23
__LABEL26:
	ld a, (_buc)
	ld l, a
	ld h, 0
	ex de, hl
	ld hl, _maskTable.__DATA__
	add hl, de
	dec hl
	ld a, (_activeAliens)
	and (hl)
	jp z, __LABEL27
	ld hl, 3
	push hl
	ld a, (_buc)
	ld l, a
	dec hl
	push hl
	ld hl, _aliens
	call __ARRAY
	ld a, (hl)
	sub 255
	jp z, __LABEL30
	ld hl, 1
	push hl
	ld a, (_buc)
	ld l, a
	dec hl
	push hl
	ld hl, _aliens
	call __ARRAY
	ld a, (hl)
	push af
	ld hl, 0
	push hl
	ld a, (_buc)
	ld l, a
	dec hl
	push hl
	ld hl, _aliens
	call __ARRAY
	ld a, (hl)
	push af
	ld hl, 3
	push hl
	ld a, (_buc)
	ld l, a
	dec hl
	push hl
	ld hl, _aliens
	call __ARRAY
	ld a, (hl)
	add a, 8
	call _Draw1x1Sprite
	jp __LABEL27
__LABEL30:
	ld hl, 0
	push hl
	ld a, (_buc)
	ld l, a
	dec hl
	push hl
	ld hl, _aliens
	call __ARRAY
	ld a, (hl)
	and 1
	jp z, __LABEL32
	ld hl, 1
	push hl
	ld a, (_buc)
	ld l, a
	dec hl
	push hl
	ld hl, _aliens
	call __ARRAY
	ld a, (hl)
	push af
	ld hl, 0
	push hl
	ld a, (_buc)
	ld l, a
	dec hl
	push hl
	ld hl, _aliens
	call __ARRAY
	ld a, (hl)
	push af
	ld a, 14
	call _Draw1x1Sprite
	jp __LABEL27
__LABEL32:
	ld hl, 1
	push hl
	ld a, (_buc)
	ld l, a
	dec hl
	push hl
	ld hl, _aliens
	call __ARRAY
	ld a, (hl)
	push af
	ld hl, 0
	push hl
	ld a, (_buc)
	ld l, a
	dec hl
	push hl
	ld hl, _aliens
	call __ARRAY
	ld a, (hl)
	push af
	ld a, 13
	call _Draw1x1Sprite
__LABEL27:
	ld hl, _buc
	inc (hl)
__LABEL23:
	ld a, 4
	ld hl, (_buc - 1)
	cp h
	jp nc, __LABEL26
__LABEL22:
	ld a, (_activeTanks)
	or a
	jp z, __LABEL35
	ld a, 1
	ld (_buc), a
	jp __LABEL36
__LABEL39:
	ld a, (_buc)
	ld l, a
	ld h, 0
	ex de, hl
	ld hl, _maskTable.__DATA__
	add hl, de
	dec hl
	ld a, (_activeTanks)
	and (hl)
	jp z, __LABEL40
	ld hl, 3
	push hl
	ld a, (_buc)
	ld l, a
	dec hl
	push hl
	ld hl, _tanks
	call __ARRAY
	ld a, (hl)
	sub 255
	jp z, __LABEL43
	ld hl, 1
	push hl
	ld a, (_buc)
	ld l, a
	dec hl
	push hl
	ld hl, _tanks
	call __ARRAY
	ld a, (hl)
	push af
	ld hl, 0
	push hl
	ld a, (_buc)
	ld l, a
	dec hl
	push hl
	ld hl, _tanks
	call __ARRAY
	ld a, (hl)
	push af
	ld hl, 3
	push hl
	ld a, (_buc)
	ld l, a
	dec hl
	push hl
	ld hl, _tanks
	call __ARRAY
	ld a, (hl)
	add a, 8
	call _Draw1x1Sprite
	jp __LABEL40
__LABEL43:
	ld hl, 2
	push hl
	ld a, (_buc)
	ld l, a
	dec hl
	push hl
	ld hl, _tanks
	call __ARRAY
	ld a, (hl)
	and 1
	jp z, __LABEL45
	ld hl, 1
	push hl
	ld a, (_buc)
	ld l, a
	dec hl
	push hl
	ld hl, _tanks
	call __ARRAY
	ld a, (hl)
	push af
	ld hl, 0
	push hl
	ld a, (_buc)
	ld l, a
	dec hl
	push hl
	ld hl, _tanks
	call __ARRAY
	ld a, (hl)
	push af
	ld a, 16
	call _Draw1x1Sprite
	jp __LABEL40
__LABEL45:
	ld hl, 1
	push hl
	ld a, (_buc)
	ld l, a
	dec hl
	push hl
	ld hl, _tanks
	call __ARRAY
	ld a, (hl)
	push af
	ld hl, 0
	push hl
	ld a, (_buc)
	ld l, a
	dec hl
	push hl
	ld hl, _tanks
	call __ARRAY
	ld a, (hl)
	push af
	ld a, 15
	call _Draw1x1Sprite
__LABEL40:
	ld hl, _buc
	inc (hl)
__LABEL36:
	ld a, 2
	ld hl, (_buc - 1)
	cp h
	jp nc, __LABEL39
__LABEL35:
	call _RenderFrame
	ld a, (_dead)
	or a
	jp z, __LABEL53
	ld a, (_dead)
	dec a
	jp nz, __LABEL49
	call _PlayDeathAlien
	jp __LABEL50
__LABEL49:
	ld a, (_dead)
	sub 2
	jp nz, __LABEL51
	call _PlayDeathTank
	jp __LABEL50
__LABEL51:
	call _PlayDeathShot
__LABEL50:
	call _DrawGrid
	call _InitLevel
__LABEL53:
	ld de, 2
	ld hl, (_frameCounter)
	or a
	sbc hl, de
	jp c, __LABEL53
	jp __LABEL0
__END_PROGRAM:
	di
	ld hl, (__CALL_BACK__)
	ld sp, hl
	exx
	pop hl
	pop iy
	pop ix
	exx
	ei
	ret
_InitGFXLib:
#line 1714 "C:/Users/geniw/source/repos/BattleGrid/BattleGrid/ZxBasicFiles/GuSprites.zxbas"
		call INIT_GFX_LIB
#line 1718 "C:/Users/geniw/source/repos/BattleGrid/BattleGrid/ZxBasicFiles/GuSprites.zxbas"
_InitGFXLib__leave:
	ret
_RenderFrame:
#line 1734 "C:/Users/geniw/source/repos/BattleGrid/BattleGrid/ZxBasicFiles/GuSprites.zxbas"
		call RENDER_FRAME
#line 1738 "C:/Users/geniw/source/repos/BattleGrid/BattleGrid/ZxBasicFiles/GuSprites.zxbas"
_RenderFrame__leave:
	ret
_Create1x1Sprite:
#line 1746 "C:/Users/geniw/source/repos/BattleGrid/BattleGrid/ZxBasicFiles/GuSprites.zxbas"
		push ix
		push iy
		call CREATE_1x1_SPRITE
		pop iy
		pop ix
#line 1754 "C:/Users/geniw/source/repos/BattleGrid/BattleGrid/ZxBasicFiles/GuSprites.zxbas"
_Create1x1Sprite__leave:
	ret
_Draw1x1Sprite:
#line 1760 "C:/Users/geniw/source/repos/BattleGrid/BattleGrid/ZxBasicFiles/GuSprites.zxbas"
		exx
		pop hl
		exx
		pop bc
		pop de
		exx
		push hl
		exx
		push ix
		push iy
		ld c, d
		call DRAW_1x1_SPRITE
		pop iy
		pop ix
#line 1778 "C:/Users/geniw/source/repos/BattleGrid/BattleGrid/ZxBasicFiles/GuSprites.zxbas"
_Draw1x1Sprite__leave:
	ret
_SetTileset:
#line 1893 "C:/Users/geniw/source/repos/BattleGrid/BattleGrid/ZxBasicFiles/GuSprites.zxbas"
		call SET_TILEMAP
#line 1895 "C:/Users/geniw/source/repos/BattleGrid/BattleGrid/ZxBasicFiles/GuSprites.zxbas"
_SetTileset__leave:
	ret
_SetTile:
#line 1901 "C:/Users/geniw/source/repos/BattleGrid/BattleGrid/ZxBasicFiles/GuSprites.zxbas"
		exx
		pop hl
		exx
		pop bc
		pop de
		pop hl
		exx
		push hl
		exx
		call SET_TILE
#line 1912 "C:/Users/geniw/source/repos/BattleGrid/BattleGrid/ZxBasicFiles/GuSprites.zxbas"
_SetTile__leave:
	ret
_SetTileChecked:
#line 1918 "C:/Users/geniw/source/repos/BattleGrid/BattleGrid/ZxBasicFiles/GuSprites.zxbas"
		exx
		pop hl
		exx
		pop bc
		pop de
		pop hl
		exx
		push hl
		exx
		call SET_TILE_CHECKED
#line 1929 "C:/Users/geniw/source/repos/BattleGrid/BattleGrid/ZxBasicFiles/GuSprites.zxbas"
_SetTileChecked__leave:
	ret
_MultiKeys:
#line 43 "C:/zxbasic/src/arch/zx48k/library/keys.bas"
		ld a, h
		in a, (0FEh)
		cpl
		and l
#line 48 "C:/zxbasic/src/arch/zx48k/library/keys.bas"
_MultiKeys__leave:
	ret
_InitFastRnd:
#line 5 "C:/Users/geniw/source/repos/BattleGrid/BattleGrid/ZxBasicFiles/FastRND.zxbas"
		PROC
		LOCAL NOT_EMPTY_L, TEST_H, NOT_EMPTY_H, LOAD_SEED
		ld hl, ($5C78)
		ld a, l
		and $FF
		jp nz, NOT_EMPTY_L
		ld a, r
		ld l, a
		jp TEST_H
NOT_EMPTY_L:
		ld a, r
		xor l
		ld l, a
TEST_H:
		ld h, a
		and $FF
		jp nz, NOT_EMPTY_H
		ld a, r
		ld h, a
		jp LOAD_SEED
NOT_EMPTY_H:
		ld a, r
		xor h
		ld h, a
LOAD_SEED:
		ld      (FAST_RAND + 1),hl
		ENDP
#line 33 "C:/Users/geniw/source/repos/BattleGrid/BattleGrid/ZxBasicFiles/FastRND.zxbas"
_InitFastRnd__leave:
	ret
_FastRnd:
#line 39 "C:/Users/geniw/source/repos/BattleGrid/BattleGrid/ZxBasicFiles/FastRND.zxbas"
FAST_RAND:
		ld hl,$FFFF
		ld a,r
		ld d,a
		ld e,(hl)
		add hl,de
		add a,l
		xor h
		ld (FAST_RAND + 1),hl
#line 52 "C:/Users/geniw/source/repos/BattleGrid/BattleGrid/ZxBasicFiles/FastRND.zxbas"
_FastRnd__leave:
	ret
_PlayFX:
#line 6 "C:/Users/geniw/source/repos/BattleGrid/BattleGrid/ZxBasicFiles/BeepFX.zxbas"
play:
		ld hl,sfxData
		di
		push ix
		push iy
		ld b,0
		ld c,a
		add hl,bc
		add hl,bc
		ld e,(hl)
		inc hl
		ld d,(hl)
		push de
		pop ix
		ld a,(23624)
		rra
		rra
		rra
		and 7
readData:
		ld a,(ix+0)
		ld c,(ix+1)
		ld b,(ix+2)
		ld e,(ix+3)
		ld d,(ix+4)
		push de
		pop iy
		dec a
		jr z,sfxRoutineTone
		dec a
		jr z,sfxRoutineNoise
		dec a
		jr z,sfxRoutineSample
		pop iy
		pop ix
		ei
		ret
sfxRoutineSample:
		ex de,hl
sfxRS0:
		ld e,8
		ld d,(hl)
		inc hl
sfxRS1:
		ld a,(ix+5)
sfxRS2:
		dec a
		jr nz,sfxRS2
		rl d
		sbc a,a
		and 16
sfxRoutineSampleBorder:
		or 0
		out (254),a
		dec e
		jr nz,sfxRS1
		dec bc
		ld a,b
		or c
		jr nz,sfxRS0
		ld c,6
nextData:
		add ix,bc
		jr readData
sfxRoutineTone:
		ld e,(ix+5)
		ld d,(ix+6)
		ld a,(ix+9)
		ld (sfxRoutineToneDuty+1),a
		ld hl,0
sfxRT0:
		push bc
		push iy
		pop bc
sfxRT1:
		add hl,de
		ld a,h
sfxRoutineToneDuty:
		cp 0
		sbc a,a
		and 16
sfxRoutineToneBorder:
		push de
		push hl
		push af
		ld a, r
		and 3
		ld de, _borderColors.__DATA__
		ld l, a
		ld h, 0
		add hl, de
		ld l, (hl)
		pop af
		or l
		pop hl
		pop de
		out (254),a
		dec bc
		ld a,b
		or c
		jr nz,sfxRT1
		ld a,(sfxRoutineToneDuty+1)
		add a,(ix+10)
		ld (sfxRoutineToneDuty+1),a
		ld c,(ix+7)
		ld b,(ix+8)
		ex de,hl
		add hl,bc
		ex de,hl
		pop bc
		dec bc
		ld a,b
		or c
		jr nz,sfxRT0
		ld c,11
		jp nextData
sfxRoutineNoise:
		ld e,(ix+5)
		ld d,1
		ld h,d
		ld l,d
sfxRN0:
		push bc
		push iy
		pop bc
sfxRN1:
		ld a,(hl)
		and 16
sfxRoutineNoiseBorder:
		push de
		push hl
		push af
		ld a, r
		and 3
		ld de, _borderColors.__DATA__
		ld l, a
		ld h, 0
		add hl, de
		ld l, (hl)
		pop af
		or l
		pop hl
		pop de
		out (254),a
		dec d
		jr nz,sfxRN2
		ld d,e
		inc hl
		ld a,h
		and 31
		ld h,a
sfxRN2:
		dec bc
		ld a,b
		or c
		jr nz,sfxRN1
		ld a,e
		add a,(ix+6)
		ld e,a
		pop bc
		dec bc
		ld a,b
		or c
		jr nz,sfxRN0
		ld c,7
		jp nextData
sfxData:
SoundEffectsData:
		defw SoundEffect0Data
		defw SoundEffect1Data
		defw SoundEffect2Data
		defw SoundEffect3Data
		defw SoundEffect4Data
		defw SoundEffect5Data
		defw SoundEffect6Data
		defw SoundEffect7Data
SoundEffect0Data:
		defb 2
		defw 10,1000,3074
		defb 0
SoundEffect1Data:
		defb 1
		defw 10,150,3000,220,32576
		defb 0
SoundEffect2Data:
		defb 2
		defw 5,350,100
		defb 0
SoundEffect3Data:
		defb 1
		defw 10,250,5500,65486,128
		defb 2
		defw 5,500,25
		defb 0
SoundEffect4Data:
		defb 1
		defw 10,1000,8000,0,1664
		defb 2
		defw 2,1000,100
		defb 0
SoundEffect5Data:
		defb 2
		defw 10,400,261
		defb 0
SoundEffect6Data:
		defb 2
		defw 2,2000,64262
		defb 0
SoundEffect7Data:
		defb 2
		defw 1,2000,1
		defb 0
#line 269 "C:/Users/geniw/source/repos/BattleGrid/BattleGrid/ZxBasicFiles/BeepFX.zxbas"
	ld a, (_borderColors.__DATA__ + -1)
	ld hl, (_borderColors.__DATA__ + 0 - 1)
	add a, h
_PlayFX__leave:
	ret
_BombEffect:
	ld a, 2
	ld (_borderColors.__DATA__ + 0), a
	xor a
	ld (_borderColors.__DATA__ + 1), a
	ld a, 2
	ld (_borderColors.__DATA__ + 2), a
	xor a
	ld (_borderColors.__DATA__ + 3), a
	call _PlayFX
	xor a
	call BORDER
_BombEffect__leave:
	ret
_DeflectorEffect:
	ld a, 1
	ld (_borderColors.__DATA__ + 0), a
	ld a, 5
	ld (_borderColors.__DATA__ + 1), a
	ld a, 1
	ld (_borderColors.__DATA__ + 2), a
	ld a, 5
	ld (_borderColors.__DATA__ + 3), a
	ld a, 1
	call _PlayFX
	xor a
	call BORDER
_DeflectorEffect__leave:
	ret
_ExplodeAnimEffect:
	ld a, 2
	ld (_borderColors.__DATA__ + 0), a
	ld a, 6
	ld (_borderColors.__DATA__ + 1), a
	ld a, 2
	ld (_borderColors.__DATA__ + 2), a
	ld a, 6
	ld (_borderColors.__DATA__ + 3), a
	ld a, 2
	call _PlayFX
	xor a
	call BORDER
_ExplodeAnimEffect__leave:
	ret
_KilledAlienEffect:
	ld a, 4
	ld (_borderColors.__DATA__ + 0), a
	ld (_borderColors.__DATA__ + 1), a
	ld a, 2
	ld (_borderColors.__DATA__ + 2), a
	ld (_borderColors.__DATA__ + 3), a
	ld a, 3
	call _PlayFX
	xor a
	call BORDER
_KilledAlienEffect__leave:
	ret
_AlienDeathEffect:
	ld a, 4
	ld (_borderColors.__DATA__ + 0), a
	ld (_borderColors.__DATA__ + 1), a
	ld a, 5
	ld (_borderColors.__DATA__ + 2), a
	ld (_borderColors.__DATA__ + 3), a
	ld a, 4
	call _PlayFX
	xor a
	call BORDER
_AlienDeathEffect__leave:
	ret
_BuildTankDestroyedEffect:
	xor a
	ld (_borderColors.__DATA__ + 0), a
	ld (_borderColors.__DATA__ + 1), a
	ld a, 7
	ld (_borderColors.__DATA__ + 2), a
	ld (_borderColors.__DATA__ + 3), a
	ld a, 5
	call _PlayFX
	xor a
	call BORDER
_BuildTankDestroyedEffect__leave:
	ret
_CrateDestroyedEffect:
	ld a, 3
	ld (_borderColors.__DATA__ + 0), a
	ld a, 6
	ld (_borderColors.__DATA__ + 1), a
	ld (_borderColors.__DATA__ + 2), a
	ld a, 2
	ld (_borderColors.__DATA__ + 3), a
	ld a, 6
	call _PlayFX
	xor a
	call BORDER
_CrateDestroyedEffect__leave:
	ret
_MinePlacedEffect:
	ld a, 5
	ld (_borderColors.__DATA__ + 0), a
	ld a, 6
	ld (_borderColors.__DATA__ + 1), a
	ld (_borderColors.__DATA__ + 2), a
	ld a, 5
	ld (_borderColors.__DATA__ + 3), a
	ld a, 7
	call _PlayFX
	xor a
	call BORDER
_MinePlacedEffect__leave:
	ret
_DoPause:
	push ix
	ld ix, 0
	add ix, sp
	ld hl, 1
	dec hl
	ld (_frameCounter), hl
__LABEL55:
	ld l, (ix+4)
	ld h, (ix+5)
	ex de, hl
	ld hl, (_frameCounter)
	or a
	sbc hl, de
	jp c, __LABEL55
_DoPause__leave:
	ld sp, ix
	pop ix
	exx
	pop hl
	ex (sp), hl
	exx
	ret
_InstallHandler:
#line 16 "C:/Users/geniw/source/repos/BattleGrid/BattleGrid/ZxBasicFiles/InterruptInstaller.zxbas"
		ld hl, INT_HANDLER
		ld (_intHandlerAddress), hl
		di
		ld a, $fe
		ld i, a
		im 2
		ei
		ret
INT_HANDLER:
		push hl
		ld hl, (_frameCounter)
		inc hl
		ld (_frameCounter), hl
		pop hl
		ei
		ret
#line 37 "C:/Users/geniw/source/repos/BattleGrid/BattleGrid/ZxBasicFiles/InterruptInstaller.zxbas"
_InstallHandler__leave:
	ret
_AnyKey:
#line 43 "C:/Users/geniw/source/repos/BattleGrid/BattleGrid/ZxBasicFiles/InterruptInstaller.zxbas"
		ld a, $FE
		in a, (0FEh)
		ld b,a
		ld a, $F7
		in a, (0FEh)
		and b
		ld b,a
		ld a, $DF
		in a, (0FEh)
		and b
		ld b,a
		ld a, $BF
		in a, (0FEh)
		and b
		ld b,a
		ld a, $7F
		in a, (0FEh)
		and b
		cpl
#line 68 "C:/Users/geniw/source/repos/BattleGrid/BattleGrid/ZxBasicFiles/InterruptInstaller.zxbas"
_AnyKey__leave:
	ret
_printZoomedTile:
	push ix
	ld ix, 0
	add ix, sp
	ld hl, 0
	push hl
	push hl
	push hl
	inc sp
	ld l, (ix+8)
	ld h, (ix+9)
	add hl, hl
	add hl, hl
	add hl, hl
	ld de, _tileSet.__DATA__
	add hl, de
	ld (ix-5), l
	ld (ix-4), h
	ld a, (ix+7)
	ld (ix-3), a
	jp __LABEL57
__LABEL60:
	ld l, (ix-5)
	ld h, (ix-4)
	ld a, (hl)
	ld (ix-1), a
	ld a, (ix+5)
	ld (ix-2), a
	ld a, (ix-1)
	and 128
	jp z, __LABEL62
	ld a, (ix-3)
	ld l, a
	ld h, 0
	push hl
	ld a, (ix-2)
	ld l, a
	push hl
	ld a, (ix+11)
	ld l, a
	push hl
	ld a, 105
	call _SetTile
	jp __LABEL63
__LABEL62:
	ld a, (ix-3)
	ld l, a
	ld h, 0
	push hl
	ld a, (ix-2)
	ld l, a
	push hl
	ld a, (ix+11)
	ld l, a
	push hl
	xor a
	call _SetTile
__LABEL63:
	inc (ix-2)
	ld a, (ix-1)
	and 64
	jp z, __LABEL64
	ld a, (ix-3)
	ld l, a
	ld h, 0
	push hl
	ld a, (ix-2)
	ld l, a
	push hl
	ld a, (ix+11)
	ld l, a
	push hl
	ld a, 105
	call _SetTile
	jp __LABEL65
__LABEL64:
	ld a, (ix-3)
	ld l, a
	ld h, 0
	push hl
	ld a, (ix-2)
	ld l, a
	push hl
	ld a, (ix+11)
	ld l, a
	push hl
	xor a
	call _SetTile
__LABEL65:
	inc (ix-2)
	ld a, (ix-1)
	and 32
	jp z, __LABEL66
	ld a, (ix-3)
	ld l, a
	ld h, 0
	push hl
	ld a, (ix-2)
	ld l, a
	push hl
	ld a, (ix+11)
	ld l, a
	push hl
	ld a, 105
	call _SetTile
	jp __LABEL67
__LABEL66:
	ld a, (ix-3)
	ld l, a
	ld h, 0
	push hl
	ld a, (ix-2)
	ld l, a
	push hl
	ld a, (ix+11)
	ld l, a
	push hl
	xor a
	call _SetTile
__LABEL67:
	inc (ix-2)
	ld a, (ix-1)
	and 16
	jp z, __LABEL68
	ld a, (ix-3)
	ld l, a
	ld h, 0
	push hl
	ld a, (ix-2)
	ld l, a
	push hl
	ld a, (ix+11)
	ld l, a
	push hl
	ld a, 105
	call _SetTile
	jp __LABEL69
__LABEL68:
	ld a, (ix-3)
	ld l, a
	ld h, 0
	push hl
	ld a, (ix-2)
	ld l, a
	push hl
	ld a, (ix+11)
	ld l, a
	push hl
	xor a
	call _SetTile
__LABEL69:
	inc (ix-2)
	ld a, (ix-1)
	and 8
	jp z, __LABEL70
	ld a, (ix-3)
	ld l, a
	ld h, 0
	push hl
	ld a, (ix-2)
	ld l, a
	push hl
	ld a, (ix+11)
	ld l, a
	push hl
	ld a, 105
	call _SetTile
	jp __LABEL71
__LABEL70:
	ld a, (ix-3)
	ld l, a
	ld h, 0
	push hl
	ld a, (ix-2)
	ld l, a
	push hl
	ld a, (ix+11)
	ld l, a
	push hl
	xor a
	call _SetTile
__LABEL71:
	inc (ix-2)
	ld a, (ix-1)
	and 4
	jp z, __LABEL72
	ld a, (ix-3)
	ld l, a
	ld h, 0
	push hl
	ld a, (ix-2)
	ld l, a
	push hl
	ld a, (ix+11)
	ld l, a
	push hl
	ld a, 105
	call _SetTile
	jp __LABEL73
__LABEL72:
	ld a, (ix-3)
	ld l, a
	ld h, 0
	push hl
	ld a, (ix-2)
	ld l, a
	push hl
	ld a, (ix+11)
	ld l, a
	push hl
	xor a
	call _SetTile
__LABEL73:
	inc (ix-2)
	ld a, (ix-1)
	and 2
	jp z, __LABEL74
	ld a, (ix-3)
	ld l, a
	ld h, 0
	push hl
	ld a, (ix-2)
	ld l, a
	push hl
	ld a, (ix+11)
	ld l, a
	push hl
	ld a, 105
	call _SetTile
	jp __LABEL75
__LABEL74:
	ld a, (ix-3)
	ld l, a
	ld h, 0
	push hl
	ld a, (ix-2)
	ld l, a
	push hl
	ld a, (ix+11)
	ld l, a
	push hl
	xor a
	call _SetTile
__LABEL75:
	inc (ix-2)
	ld a, (ix-1)
	and 1
	jp z, __LABEL76
	ld a, (ix-3)
	ld l, a
	ld h, 0
	push hl
	ld a, (ix-2)
	ld l, a
	push hl
	ld a, (ix+11)
	ld l, a
	push hl
	ld a, 105
	call _SetTile
	jp __LABEL77
__LABEL76:
	ld a, (ix-3)
	ld l, a
	ld h, 0
	push hl
	ld a, (ix-2)
	ld l, a
	push hl
	ld a, (ix+11)
	ld l, a
	push hl
	xor a
	call _SetTile
__LABEL77:
	ld l, (ix-5)
	ld h, (ix-4)
	inc hl
	ld (ix-5), l
	ld (ix-4), h
	inc (ix-3)
__LABEL57:
	ld h, (ix-3)
	ld a, (ix+7)
	add a, 7
	cp h
	jp nc, __LABEL60
_printZoomedTile__leave:
	ld sp, ix
	pop ix
	exx
	pop hl
	pop bc
	pop bc
	pop bc
	ex (sp), hl
	exx
	ret
_ShowZoomedFrame:
	push ix
	ld ix, 0
	add ix, sp
	ld a, (ix+7)
	push af
	ld a, (ix+5)
	ld l, a
	ld h, 0
	push hl
	ld a, 4
	push af
	ld a, 3
	push af
	call _printZoomedTile
	ld a, (ix+7)
	push af
	ld a, (ix+5)
	inc a
	ld l, a
	ld h, 0
	push hl
	ld a, 4
	push af
	ld a, 11
	push af
	call _printZoomedTile
	ld a, (ix+7)
	push af
	ld a, (ix+5)
	add a, 2
	ld l, a
	ld h, 0
	push hl
	ld a, 12
	push af
	ld a, 3
	push af
	call _printZoomedTile
	ld a, (ix+7)
	push af
	ld a, (ix+5)
	add a, 3
	ld l, a
	ld h, 0
	push hl
	ld a, 12
	push af
	ld a, 11
	push af
	call _printZoomedTile
_ShowZoomedFrame__leave:
	ld sp, ix
	pop ix
	exx
	pop hl
	pop bc
	ex (sp), hl
	exx
	ret
_PlayDeathAlien:
	push ix
	ld ix, 0
	add ix, sp
	ld hl, 0
	push hl
	inc sp
	ld (ix-1), 1
	jp __LABEL78
__LABEL81:
	ld a, (ix-1)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld hl, _attribsAlienA
	call __ARRAY
	ld a, (hl)
	push af
	ld a, 106
	push af
	call _ShowZoomedFrame
	inc (ix-1)
__LABEL78:
	ld a, 6
	cp (ix-1)
	jp nc, __LABEL81
	ld hl, 50
	push hl
	call _DoPause
	ld a, 68
	push af
	ld a, 110
	push af
	call _ShowZoomedFrame
	call _AlienDeathEffect
	ld hl, 5
	push hl
	call _DoPause
	ld (ix-1), 1
	jp __LABEL83
__LABEL86:
	ld a, (ix-1)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld hl, _attribsAlienB
	call __ARRAY
	ld a, (hl)
	push af
	ld a, 110
	push af
	call _ShowZoomedFrame
	inc (ix-1)
__LABEL83:
	ld a, 4
	cp (ix-1)
	jp nc, __LABEL86
__LABEL88:
	ld de, 150
	ld hl, (_frameCounter)
	or a
	sbc hl, de
	jp c, __LABEL88
_PlayDeathAlien__leave:
	ld sp, ix
	pop ix
	ret
_PlayDeathShot:
	push ix
	ld ix, 0
	add ix, sp
	ld hl, 0
	push hl
	ld (ix-1), 114
	ld a, 6
	push af
	ld a, 114
	push af
	call _ShowZoomedFrame
	ld hl, 30
	push hl
	call _DoPause
	ld (ix-2), 1
	jp __LABEL90
__LABEL93:
	ld a, (ix-1)
	inc a
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld hl, _tileColors
	call __ARRAY
	ld a, (hl)
	push af
	ld a, (ix-1)
	push af
	call _ShowZoomedFrame
	ld a, (ix-2)
	cp 3
	jp nc, __LABEL95
	ld hl, 7
	push hl
	call _DoPause
	jp __LABEL96
__LABEL95:
	call _ExplodeAnimEffect
__LABEL96:
	ld a, (ix-1)
	add a, 4
	ld (ix-1), a
	inc (ix-2)
__LABEL90:
	ld a, 7
	cp (ix-2)
	jp nc, __LABEL93
	ld (ix-2), 1
	jp __LABEL97
__LABEL100:
	ld a, (ix-2)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld hl, _colorsExp
	call __ARRAY
	ld a, (hl)
	push af
	ld a, 138
	push af
	call _ShowZoomedFrame
	ld hl, 10
	push hl
	call _DoPause
	inc (ix-2)
__LABEL97:
	ld a, 4
	cp (ix-2)
	jp nc, __LABEL100
	ld hl, 100
	push hl
	call _DoPause
_PlayDeathShot__leave:
	ld sp, ix
	pop ix
	ret
_PlayDeathTank:
	ld a, 1
	push af
	ld a, 142
	push af
	call _ShowZoomedFrame
	ld hl, 10
	push hl
	call _DoPause
	ld a, 7
	push af
	ld a, 142
	push af
	call _ShowZoomedFrame
	ld hl, 10
	push hl
	call _DoPause
	ld a, 71
	push af
	ld a, 142
	push af
	call _ShowZoomedFrame
	ld hl, 30
	push hl
	call _DoPause
	ld a, 114
	push af
	ld a, 146
	push af
	call _ShowZoomedFrame
	call _ExplodeAnimEffect
	ld a, 71
	push af
	ld a, 142
	push af
	call _ShowZoomedFrame
	ld hl, 30
	push hl
	call _DoPause
	xor a
	push af
	ld a, 142
	push af
	call _ShowZoomedFrame
	ld hl, 10
	push hl
	call _DoPause
	call _PlayDeathShot
_PlayDeathTank__leave:
	ret
_GridObject:
	push ix
	ld ix, 0
	add ix, sp
	ld a, (ix+5)
	push af
	ld a, (ix+9)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld a, (ix+7)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld hl, _activeMap
	call __ARRAY
	pop af
	ld (hl), a
	ld a, (ix+9)
	inc a
	ld l, a
	ld h, 0
	push hl
	ld a, (ix+7)
	ld l, a
	push hl
	ld a, (ix+5)
	inc a
	ld l, a
	dec hl
	push hl
	ld hl, _tileColors
	call __ARRAY
	ld a, (hl)
	ld l, a
	ld h, 0
	push hl
	ld a, (ix+5)
	call _SetTileChecked
_GridObject__leave:
	ld sp, ix
	pop ix
	exx
	pop hl
	pop bc
	pop bc
	ex (sp), hl
	exx
	ret
_ClearGridCell:
	push ix
	ld ix, 0
	add ix, sp
	ld a, (ix+7)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld a, (ix+5)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld hl, _activeMap
	call __ARRAY
	ld (hl), 0
	ld a, (ix+7)
	inc a
	ld l, a
	ld h, 0
	push hl
	ld a, (ix+5)
	ld l, a
	push hl
	ld hl, 71
	push hl
	ld a, 37
	call _SetTileChecked
_ClearGridCell__leave:
	ld sp, ix
	pop ix
	exx
	pop hl
	pop bc
	ex (sp), hl
	exx
	ret
_FindEmptyBit:
#line 477 "C:\Users\geniw\source\repos\BattleGrid\BattleGrid\ZxBasicFiles\BattleGrid.zxbas"
		ld b, 0
febloop:
		inc b
		srl a
		jp c, febloop
		ld a, b
#line 486 "C:\Users\geniw\source\repos\BattleGrid\BattleGrid\ZxBasicFiles\BattleGrid.zxbas"
_FindEmptyBit__leave:
	ret
_InitGraphics:
	call _InitGFXLib
	ld hl, _tileSet.__DATA__
	call _SetTileset
	ld hl, (_spriteSet.__DATA__) + (0)
	call _Create1x1Sprite
	ld hl, (_spriteSet.__DATA__) + (8)
	call _Create1x1Sprite
	ld hl, (_spriteSet.__DATA__) + (16)
	call _Create1x1Sprite
	ld hl, (_spriteSet.__DATA__) + (24)
	call _Create1x1Sprite
	ld hl, (_spriteSet.__DATA__) + (32)
	call _Create1x1Sprite
	ld hl, (_spriteSet.__DATA__) + (40)
	call _Create1x1Sprite
	ld hl, (_spriteSet.__DATA__) + (48)
	call _Create1x1Sprite
	ld hl, (_spriteSet.__DATA__) + (56)
	call _Create1x1Sprite
	ld hl, (_spriteSet.__DATA__) + (64)
	call _Create1x1Sprite
	ld hl, (_spriteSet.__DATA__) + (72)
	call _Create1x1Sprite
	ld hl, (_spriteSet.__DATA__) + (80)
	call _Create1x1Sprite
	ld hl, (_spriteSet.__DATA__) + (88)
	call _Create1x1Sprite
	ld hl, (_spriteSet.__DATA__) + (96)
	call _Create1x1Sprite
	ld hl, (_spriteSet.__DATA__) + (104)
	call _Create1x1Sprite
	ld hl, (_spriteSet.__DATA__) + (112)
	call _Create1x1Sprite
	ld hl, (_spriteSet.__DATA__) + (120)
	call _Create1x1Sprite
_InitGraphics__leave:
	ret
_PrintPaddedNumber:
	push ix
	ld ix, 0
	add ix, sp
	ld hl, 0
	push hl
	push hl
	ld l, (ix+8)
	ld h, (ix+9)
	ld de, 0
	call __U32TOFREG
	call __STR_FAST
	ld d, h
	ld e, l
	ld bc, -4
	call __PSTORE_STR2
	ld l, (ix-4)
	ld h, (ix-3)
	call __STRLEN
	ld a, l
	ld (ix-1), a
	sub (ix+11)
	ccf
	jp nc, __LABEL102
	ld l, (ix-4)
	ld h, (ix-3)
	push hl
	ld hl, 0
	push hl
	ld a, (ix+11)
	ld l, a
	dec hl
	push hl
	xor a
	call __STRSLICE
	ld d, h
	ld e, l
	ld bc, -4
	call __PSTORE_STR2
	jp __LABEL103
__LABEL102:
	ld (ix-2), 1
	jp __LABEL104
__LABEL107:
	ld l, (ix-4)
	ld h, (ix-3)
	ex de, hl
	ld hl, __LABEL109
	call __ADDSTR
	ld d, h
	ld e, l
	ld bc, -4
	call __PSTORE_STR2
	inc (ix-2)
__LABEL104:
	ld h, (ix-2)
	ld a, (ix+11)
	sub (ix-1)
	cp h
	jp nc, __LABEL107
__LABEL103:
	ld (ix-1), 1
	jp __LABEL110
__LABEL113:
	ld a, (ix+7)
	ld l, a
	ld h, 0
	push hl
	ld a, (ix+5)
	add a, (ix-1)
	dec a
	ld l, a
	push hl
	ld l, (ix-4)
	ld h, (ix-3)
	push hl
	ld a, (ix-1)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld l, a
	ld h, 0
	dec hl
	push hl
	xor a
	call __STRSLICE
	ld a, 1
	call __ASC
	add a, 95
	sub 48
	inc a
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld hl, _tileColors
	call __ARRAY
	ld a, (hl)
	ld l, a
	ld h, 0
	push hl
	ld l, (ix-4)
	ld h, (ix-3)
	push hl
	ld a, (ix-1)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld l, a
	ld h, 0
	dec hl
	push hl
	xor a
	call __STRSLICE
	ld a, 1
	call __ASC
	add a, 95
	sub 48
	call _SetTile
	inc (ix-1)
__LABEL110:
	ld a, (ix+11)
	cp (ix-1)
	jp nc, __LABEL113
_PrintPaddedNumber__leave:
	ex af, af'
	exx
	ld l, (ix-4)
	ld h, (ix-3)
	call __MEM_FREE
	ex af, af'
	exx
	ld sp, ix
	pop ix
	exx
	pop hl
	pop bc
	pop bc
	pop bc
	ex (sp), hl
	exx
	ret
_InitInterface:
	push ix
	ld ix, 0
	add ix, sp
	ld hl, 0
	push hl
	inc sp
	ld (ix-1), 0
	jp __LABEL115
__LABEL118:
	ld hl, 2
	push hl
	ld a, (ix-1)
	srl a
	srl a
	add a, 23
	ld l, a
	ld h, 0
	push hl
	ld a, (ix-1)
	inc a
	inc a
	ld l, a
	dec hl
	push hl
	ld hl, _tileColors
	call __ARRAY
	ld a, (hl)
	ld l, a
	ld h, 0
	push hl
	ld a, (ix-1)
	inc a
	call _SetTile
	ld hl, 3
	push hl
	ld a, (ix-1)
	srl a
	srl a
	add a, 23
	ld l, a
	ld h, 0
	push hl
	ld a, (ix-1)
	inc a
	add a, 2
	ld l, a
	dec hl
	push hl
	ld hl, _tileColors
	call __ARRAY
	ld a, (hl)
	ld l, a
	ld h, 0
	push hl
	ld a, (ix-1)
	inc a
	inc a
	call _SetTile
	ld hl, 4
	push hl
	ld a, (ix-1)
	srl a
	srl a
	add a, 23
	ld l, a
	ld h, 0
	push hl
	ld a, (ix-1)
	inc a
	add a, 3
	ld l, a
	dec hl
	push hl
	ld hl, _tileColors
	call __ARRAY
	ld a, (hl)
	ld l, a
	ld h, 0
	push hl
	ld a, (ix-1)
	inc a
	add a, 2
	call _SetTile
	ld hl, 5
	push hl
	ld a, (ix-1)
	srl a
	srl a
	add a, 23
	ld l, a
	ld h, 0
	push hl
	ld a, (ix-1)
	inc a
	add a, 4
	ld l, a
	dec hl
	push hl
	ld hl, _tileColors
	call __ARRAY
	ld a, (hl)
	ld l, a
	ld h, 0
	push hl
	ld a, (ix-1)
	inc a
	add a, 3
	call _SetTile
	ld a, (ix-1)
	add a, 4
	ld (ix-1), a
__LABEL115:
	ld a, 31
	cp (ix-1)
	jp nc, __LABEL118
	ld hl, 18
	push hl
	ld hl, 24
	push hl
	ld a, (_tileColors.__DATA__ + 83)
	ld l, a
	push hl
	ld a, 83
	call _SetTile
	ld hl, 18
	push hl
	ld hl, 28
	push hl
	ld a, (_tileColors.__DATA__ + 84)
	ld l, a
	push hl
	ld a, 84
	call _SetTile
	ld hl, 20
	push hl
	ld hl, 24
	push hl
	ld a, (_tileColors.__DATA__ + 85)
	ld l, a
	push hl
	ld a, 85
	call _SetTile
	ld hl, 20
	push hl
	ld hl, 28
	push hl
	ld a, (_tileColors.__DATA__ + 86)
	ld l, a
	push hl
	ld a, 86
	call _SetTile
	ld a, 18
	push af
	ld a, 25
	call PRINT_AT
	ld hl, __LABEL120
	xor a
	call __PRINTSTR
	call PRINT_EOL
	ld a, 18
	push af
	ld a, 29
	call PRINT_AT
	ld hl, __LABEL120
	xor a
	call __PRINTSTR
	call PRINT_EOL
	ld a, 20
	push af
	ld a, 25
	call PRINT_AT
	ld hl, __LABEL120
	xor a
	call __PRINTSTR
	call PRINT_EOL
	ld a, 20
	push af
	ld a, 29
	call PRINT_AT
	ld hl, __LABEL120
	xor a
	call __PRINTSTR
	call PRINT_EOL
	ld a, 9
	push af
	ld a, 24
	call PRINT_AT
	ld hl, __LABEL121
	xor a
	call __PRINTSTR
	call PRINT_EOL
	ld a, 12
	push af
	ld a, 24
	call PRINT_AT
	ld hl, __LABEL122
	xor a
	call __PRINTSTR
	call PRINT_EOL
	ld a, 15
	push af
	ld a, 24
	call PRINT_AT
	ld hl, __LABEL123
	xor a
	call __PRINTSTR
	call PRINT_EOL
_InitInterface__leave:
	ld sp, ix
	pop ix
	ret
_DrawGrid:
	push ix
	ld ix, 0
	add ix, sp
	ld hl, 0
	push hl
	push hl
	inc sp
	ld (ix-1), 1
	jp __LABEL124
__LABEL127:
	ld (ix-2), 1
	jp __LABEL129
__LABEL132:
	ld a, (ix-2)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld a, (ix-1)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld hl, _activeMap
	call __ARRAY
	ld (hl), 0
	inc (ix-2)
__LABEL129:
	ld a, 20
	cp (ix-2)
	jp nc, __LABEL132
	inc (ix-1)
__LABEL124:
	ld a, 20
	cp (ix-1)
	jp nc, __LABEL127
	ld hl, 1
	push hl
	dec hl
	push hl
	ld a, (_tileColors.__DATA__ + 33)
	ld l, a
	push hl
	ld a, 33
	call _SetTile
	ld hl, 1
	push hl
	ld hl, 21
	push hl
	ld a, (_tileColors.__DATA__ + 39)
	ld l, a
	push hl
	ld a, 39
	call _SetTile
	ld hl, 22
	push hl
	ld hl, 0
	push hl
	ld a, (_tileColors.__DATA__ + 35)
	ld l, a
	push hl
	ld a, 35
	call _SetTile
	ld hl, 22
	push hl
	dec hl
	push hl
	ld a, (_tileColors.__DATA__ + 41)
	ld l, a
	push hl
	ld a, 41
	call _SetTile
	ld (ix-1), 1
	jp __LABEL134
__LABEL137:
	ld hl, 1
	push hl
	ld a, (ix-1)
	ld l, a
	push hl
	ld a, (_tileColors.__DATA__ + 36)
	ld l, a
	push hl
	ld a, 36
	call _SetTile
	ld hl, 22
	push hl
	ld a, (ix-1)
	ld l, a
	push hl
	ld a, (_tileColors.__DATA__ + 38)
	ld l, a
	push hl
	ld a, 38
	call _SetTile
	inc (ix-1)
__LABEL134:
	ld a, 20
	cp (ix-1)
	jp nc, __LABEL137
	ld (ix-2), 2
	jp __LABEL139
__LABEL142:
	ld a, (ix-2)
	ld l, a
	ld h, 0
	push hl
	ld hl, 0
	push hl
	ld a, (_tileColors.__DATA__ + 34)
	ld l, a
	push hl
	ld a, 34
	call _SetTile
	ld a, (ix-2)
	ld l, a
	ld h, 0
	push hl
	ld hl, 21
	push hl
	ld a, (_tileColors.__DATA__ + 39)
	ld l, a
	push hl
	ld a, 40
	call _SetTile
	ld a, (ix-2)
	sub 21
	jp nz, __LABEL144
	ld (ix-3), 70
	jp __LABEL145
__LABEL144:
	ld (ix-3), 71
__LABEL145:
	ld (ix-1), 1
	jp __LABEL146
__LABEL149:
	ld a, (ix-2)
	ld l, a
	ld h, 0
	push hl
	ld a, (ix-1)
	ld l, a
	push hl
	ld a, (ix-3)
	ld l, a
	push hl
	ld a, 37
	call _SetTile
	inc (ix-1)
__LABEL146:
	ld a, 20
	cp (ix-1)
	jp nc, __LABEL149
	inc (ix-2)
__LABEL139:
	ld a, 21
	cp (ix-2)
	jp nc, __LABEL142
_DrawGrid__leave:
	ld sp, ix
	pop ix
	ret
_InitLevel:
	push ix
	ld ix, 0
	add ix, sp
	ld hl, 0
	push hl
	inc sp
	xor a
	ld (_activeShots), a
	ld (_activeAliens), a
	ld (_activeTanks), a
	ld (_activeShips), a
	ld (_activeHangars), a
	ld (_activeTowers), a
	ld (_availableBlockers), a
	ld (_availableBombs), a
	ld (_availableMines), a
	ld (_availableChargedShots), a
	ld (_cursorTool), a
	ld hl, 18
	push hl
	ld hl, 26
	push hl
	ld a, (_tileColors.__DATA__ + 95)
	ld l, a
	push hl
	ld a, 95
	call _SetTile
	ld hl, 18
	push hl
	ld hl, 30
	push hl
	ld a, (_tileColors.__DATA__ + 95)
	ld l, a
	push hl
	ld a, 95
	call _SetTile
	ld hl, 20
	push hl
	ld hl, 26
	push hl
	ld a, (_tileColors.__DATA__ + 95)
	ld l, a
	push hl
	ld a, 95
	call _SetTile
	ld hl, 20
	push hl
	ld hl, 30
	push hl
	ld a, (_tileColors.__DATA__ + 95)
	ld l, a
	push hl
	ld a, 95
	call _SetTile
	ld a, 20
	ld (_playerX), a
	xor a
	ld (_dead), a
	ld a, 128
	ld (_tankProbability), a
	ld a, 2
	push af
	ld hl, 1
	push hl
	ld a, 10
	push af
	ld a, 24
	push af
	call _PrintPaddedNumber
	ld a, 6
	push af
	ld hl, 0
	push hl
	ld a, 13
	push af
	ld a, 24
	push af
	call _PrintPaddedNumber
	ld a, 16
	push af
	ld a, 24
	call PRINT_AT
	ld hl, __LABEL151
	xor a
	call __PRINTSTR
	call PRINT_EOL
	ld a, 255
	ld (_shots.__DATA__ + 3), a
	ld (_shots.__DATA__ + 7), a
	ld (_shots.__DATA__ + 11), a
	ld a, 3
	push af
	push af
	ld a, 82
	push af
	call _GridObject
	ld a, 3
	push af
	ld a, 17
	push af
	ld a, 82
	push af
	call _GridObject
	ld a, 10
	push af
	ld a, 5
	push af
	ld a, 42
	push af
	call _GridObject
	ld a, 1
	push af
	ld a, 5
	push af
	ld a, 43
	push af
	call _GridObject
	ld a, 1
	push af
	ld a, 3
	push af
	ld a, 44
	push af
	call _GridObject
	ld a, 10
	push af
	ld a, 15
	push af
	ld a, 45
	push af
	call _GridObject
	ld a, 3
	push af
	ld a, 1
	push af
	ld a, 42
	push af
	call _GridObject
	ld a, 10
	push af
	ld a, 1
	push af
	ld a, 43
	push af
	call _GridObject
	ld a, 11
	push af
	ld a, 9
	push af
	ld a, 46
	push af
	call _GridObject
	ld a, 11
	push af
	ld a, 10
	push af
	ld a, 47
	push af
	call _GridObject
	ld a, 11
	push af
	push af
	ld a, 47
	push af
	call _GridObject
	ld a, 11
	push af
	ld a, 12
	push af
	ld a, 48
	push af
	call _GridObject
	ld a, 13
	push af
	ld a, 9
	push af
	ld a, 52
	push af
	call _GridObject
	ld a, 13
	push af
	ld a, 10
	push af
	ld a, 53
	push af
	call _GridObject
	ld a, 13
	push af
	ld a, 11
	push af
	ld a, 53
	push af
	call _GridObject
	ld a, 13
	push af
	ld a, 12
	push af
	ld a, 54
	push af
	call _GridObject
	ld a, 14
	push af
	ld a, 9
	push af
	ld a, 55
	push af
	call _GridObject
	ld a, 14
	push af
	ld a, 10
	push af
	ld a, 56
	push af
	call _GridObject
	ld a, 14
	push af
	ld a, 11
	push af
	ld a, 56
	push af
	call _GridObject
	ld a, 14
	push af
	ld a, 12
	push af
	ld a, 57
	push af
	call _GridObject
	ld a, 15
	push af
	ld a, 9
	push af
	ld a, 58
	push af
	call _GridObject
	ld a, 15
	push af
	ld a, 10
	push af
	ld a, 59
	push af
	call _GridObject
	ld a, 15
	push af
	ld a, 11
	push af
	ld a, 59
	push af
	call _GridObject
	ld a, 15
	push af
	ld a, 12
	push af
	ld a, 60
	push af
	call _GridObject
	ld a, 14
	push af
	ld a, 1
	push af
	ld a, 61
	push af
	call _GridObject
	ld a, 14
	push af
	ld a, 2
	push af
	ld a, 62
	push af
	call _GridObject
	ld a, 14
	push af
	ld a, 3
	push af
	ld a, 63
	push af
	call _GridObject
	ld a, 15
	push af
	ld a, 1
	push af
	ld a, 64
	push af
	call _GridObject
	ld a, 15
	push af
	ld a, 2
	push af
	ld a, 65
	push af
	call _GridObject
	ld a, 15
	push af
	ld a, 3
	push af
	ld a, 66
	push af
	call _GridObject
	ld a, 17
	push af
	ld a, 1
	push af
	ld a, 69
	push af
	call _GridObject
	ld a, 17
	push af
	ld a, 2
	push af
	ld a, 70
	push af
	call _GridObject
	ld a, 17
	push af
	ld a, 5
	push af
	ld a, 67
	push af
	call _GridObject
	ld a, 18
	push af
	ld a, 5
	push af
	ld a, 68
	push af
	call _GridObject
	ld (ix-1), 13
	jp __LABEL152
__LABEL155:
	ld a, 14
	push af
	ld a, (ix-1)
	push af
	ld a, 92
	push af
	call _GridObject
	inc (ix-1)
__LABEL152:
	ld a, 19
	cp (ix-1)
	jp nc, __LABEL155
	ld a, 14
	push af
	ld a, 20
	push af
	ld a, 49
	push af
	call _GridObject
	ld a, 15
	push af
	ld a, 20
	push af
	ld a, 50
	push af
	call _GridObject
	ld a, 16
	push af
	ld a, 20
	push af
	ld a, 51
	push af
	call _GridObject
	ld a, 16
	push af
	ld a, 10
	push af
	ld a, 84
	push af
	call _GridObject
	ld a, 16
	push af
	ld a, 11
	push af
	ld a, 84
	push af
	call _GridObject
	ld a, 17
	push af
	ld a, 8
	push af
	ld a, 88
	push af
	call _GridObject
	ld a, 17
	push af
	ld a, 10
	push af
	ld a, 87
	push af
	call _GridObject
	ld a, 17
	push af
	ld a, 12
	push af
	ld a, 89
	push af
	call _GridObject
	ld a, 17
	push af
	ld a, 14
	push af
	ld a, 90
	push af
	call _GridObject
	ld a, 10
	push af
	push af
	ld a, 91
	push af
	call _GridObject
	ld hl, _activeTowers
	inc (hl)
	ld a, 7
	push af
	ld a, 20
	push af
	ld a, 71
	push af
	call _GridObject
	ld a, 5
	push af
	ld a, 1
	push af
	ld a, 81
	push af
	call _GridObject
	ld a, 5
	push af
	ld a, 9
	push af
	ld a, 72
	push af
	call _GridObject
	ld a, 5
	push af
	ld a, 10
	push af
	ld a, 73
	push af
	call _GridObject
	ld a, 5
	push af
	ld a, 11
	push af
	ld a, 74
	push af
	call _GridObject
	ld a, 6
	push af
	ld a, 9
	push af
	ld a, 75
	push af
	call _GridObject
	ld a, 6
	push af
	ld a, 10
	push af
	ld a, 76
	push af
	call _GridObject
	ld a, 6
	push af
	ld a, 11
	push af
	ld a, 77
	push af
	call _GridObject
	ld a, 7
	push af
	ld a, 9
	push af
	ld a, 78
	push af
	call _GridObject
	ld a, 7
	push af
	ld a, 10
	push af
	ld a, 79
	push af
	call _GridObject
	ld a, 7
	push af
	ld a, 11
	push af
	ld a, 80
	push af
	call _GridObject
	ld a, (_activeShips)
	call _FindEmptyBit
	ld (ix-1), a
	ld l, a
	ld h, 0
	ex de, hl
	ld hl, _maskTable.__DATA__
	add hl, de
	dec hl
	ld a, (_activeShips)
	or (hl)
	ld (_activeShips), a
	ld hl, 0
	push hl
	ld a, (ix-1)
	ld l, a
	dec hl
	push hl
	ld hl, _ships
	call __ARRAY
	ld (hl), 7
	ld hl, 1
	push hl
	ld a, (ix-1)
	ld l, a
	dec hl
	push hl
	ld hl, _ships
	call __ARRAY
	ld (hl), 1
	ld hl, 2
	push hl
	ld a, (ix-1)
	ld l, a
	dec hl
	push hl
	ld hl, _ships
	call __ARRAY
	ld (hl), 3
	ld hl, 3
	push hl
	ld a, (ix-1)
	ld l, a
	dec hl
	push hl
	ld hl, _ships
	call __ARRAY
	ld (hl), 50
	ld a, 1
	push af
	ld a, 7
	push af
	ld a, 93
	push af
	call _GridObject
	ld a, (_activeShips)
	call _FindEmptyBit
	ld (ix-1), a
	ld l, a
	ld h, 0
	ex de, hl
	ld hl, _maskTable.__DATA__
	add hl, de
	dec hl
	ld a, (_activeShips)
	or (hl)
	ld (_activeShips), a
	ld hl, 0
	push hl
	ld a, (ix-1)
	ld l, a
	dec hl
	push hl
	ld hl, _ships
	call __ARRAY
	ld (hl), 13
	ld hl, 1
	push hl
	ld a, (ix-1)
	ld l, a
	dec hl
	push hl
	ld hl, _ships
	call __ARRAY
	ld (hl), 1
	ld hl, 2
	push hl
	ld a, (ix-1)
	ld l, a
	dec hl
	push hl
	ld hl, _ships
	call __ARRAY
	ld (hl), 1
	ld hl, 3
	push hl
	ld a, (ix-1)
	ld l, a
	dec hl
	push hl
	ld hl, _ships
	call __ARRAY
	ld (hl), 50
	ld a, 1
	push af
	ld a, 13
	push af
	ld a, 93
	push af
	call _GridObject
	ld a, (_activeHangars)
	call _FindEmptyBit
	ld (ix-1), a
	ld l, a
	ld h, 0
	ex de, hl
	ld hl, _maskTable.__DATA__
	add hl, de
	dec hl
	ld a, (_activeHangars)
	or (hl)
	ld (_activeHangars), a
	ld hl, 0
	push hl
	ld a, (ix-1)
	ld l, a
	dec hl
	push hl
	ld hl, _hangars
	call __ARRAY
	ld (hl), 10
	ld hl, 1
	push hl
	ld a, (ix-1)
	ld l, a
	dec hl
	push hl
	ld hl, _hangars
	call __ARRAY
	ld (hl), 1
	ld hl, 2
	push hl
	ld a, (ix-1)
	ld l, a
	dec hl
	push hl
	ld hl, _hangars
	call __ARRAY
	ld (hl), 2
	ld hl, 3
	push hl
	ld a, (ix-1)
	ld l, a
	dec hl
	push hl
	ld hl, _hangars
	call __ARRAY
	ld (hl), 150
	ld a, 1
	push af
	ld a, 10
	push af
	ld a, 94
	push af
	call _GridObject
_InitLevel__leave:
	ld sp, ix
	pop ix
	ret
_UpdatePlayer:
	ld a, (_dead)
	or a
	jp nz, _UpdatePlayer__leave
	ld a, 1
	ld (_playerSprite), a
	ld hl, 65026
	call _MultiKeys
	or a
	jp z, __LABEL159
	ld a, 255
	ld (_dir), a
	ld a, 3
	ld (_playerSprite), a
	ld a, 2
	ld hl, (_playerX - 1)
	cp h
	jp nc, _UpdatePlayer__leave
	ld hl, _playerX
	dec (hl)
__LABEL162:
	jp _UpdatePlayer__leave
__LABEL159:
	ld hl, 65032
	call _MultiKeys
	or a
	jp z, __LABEL163
	ld a, 1
	ld (_dir), a
	ld a, 2
	ld (_playerSprite), a
	ld a, (_playerX)
	cp 40
	jp nc, _UpdatePlayer__leave
	ld hl, _playerX
	inc (hl)
__LABEL166:
	jp _UpdatePlayer__leave
__LABEL163:
	ld a, (_playerX)
	and 1
	jp nz, __LABEL167
	xor a
	ld (_dir), a
	ld a, 1
	ld (_playerSprite), a
	jp _UpdatePlayer__leave
__LABEL167:
	ld a, (_playerX)
	ld h, a
	ld a, (_dir)
	add a, h
	ld (_playerX), a
_UpdatePlayer__leave:
	ret
_CheckShotItems:
	push ix
	ld ix, 0
	add ix, sp
	ld hl, 0
	push hl
	push hl
	ld a, (ix+9)
	ld l, a
	dec hl
	push hl
	ld a, (ix+7)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld hl, _activeMap
	call __ARRAY
	ld a, (hl)
	or a
	jp z, _CheckShotItems__leave
	ld a, (ix+9)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld a, (ix+7)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld hl, _activeMap
	call __ARRAY
	ld a, (hl)
	ld (ix-4), a
	ld a, (ix+5)
	sub 255
	jp z, __LABEL172
	ld a, (ix-4)
	sub 82
	jp nz, __LABEL174
	ld a, (ix+5)
	ld l, a
	ld h, 0
	ex de, hl
	ld hl, _maskTable.__DATA__
	add hl, de
	dec hl
	ld a, (_activeShots)
	xor (hl)
	jp nz, __LABEL175
	ld a, 7
	ld (_activeShots), a
	ld hl, 0
	push hl
	ld a, (ix+5)
	ld l, a
	dec hl
	push hl
	ld hl, _shots
	call __ARRAY
	ld a, (hl)
	ld (ix-1), a
	ld hl, 1
	push hl
	ld a, (ix+5)
	ld l, a
	dec hl
	push hl
	ld hl, _shots
	call __ARRAY
	ld a, (hl)
	ld (ix-2), a
	ld hl, 2
	push hl
	ld a, (ix+5)
	ld l, a
	dec hl
	push hl
	ld hl, _shots
	call __ARRAY
	ld a, (hl)
	ld (ix-3), a
	dec a
	jp nz, __LABEL177
	ld a, 1
	ld (_shots.__DATA__ + 2), a
	ld a, 3
	ld (_shots.__DATA__ + 6), a
	ld a, 4
	ld (_shots.__DATA__ + 10), a
	jp __LABEL178
__LABEL177:
	ld a, (ix-3)
	sub 2
	jp nz, __LABEL179
	ld a, 2
	ld (_shots.__DATA__ + 2), a
	ld a, 3
	ld (_shots.__DATA__ + 6), a
	ld a, 4
	ld (_shots.__DATA__ + 10), a
	jp __LABEL178
__LABEL179:
	ld a, (ix-3)
	sub 3
	jp nz, __LABEL181
	ld a, 1
	ld (_shots.__DATA__ + 2), a
	ld a, 2
	ld (_shots.__DATA__ + 6), a
	ld a, 3
	ld (_shots.__DATA__ + 10), a
	jp __LABEL178
__LABEL181:
	ld a, (ix-3)
	sub 4
	jp nz, __LABEL178
	ld a, 1
	ld (_shots.__DATA__ + 2), a
	ld a, 2
	ld (_shots.__DATA__ + 6), a
	ld a, 4
	ld (_shots.__DATA__ + 10), a
__LABEL178:
	ld a, (ix-1)
	ld (_shots.__DATA__ + 0), a
	ld (_shots.__DATA__ + 4), a
	ld (_shots.__DATA__ + 8), a
	ld a, (ix-2)
	ld (_shots.__DATA__ + 1), a
	ld (_shots.__DATA__ + 5), a
	ld (_shots.__DATA__ + 9), a
	jp _CheckShotItems__leave
__LABEL175:
	ld hl, 3
	push hl
	ld a, (ix+5)
	ld l, a
	dec hl
	push hl
	ld hl, _shots
	call __ARRAY
	ld (hl), 0
__LABEL176:
	jp _CheckShotItems__leave
__LABEL174:
	ld a, (ix-4)
	sub 42
	ccf
	jp nc, __LABEL186
	ld a, 45
	sub (ix-4)
	ccf
	jp nc, __LABEL186
	ld a, (ix-4)
	sub 42
	jp nz, __LABEL189
	ld hl, 2
	push hl
	ld a, (ix+5)
	ld l, a
	dec hl
	push hl
	ld hl, _shots
	call __ARRAY
	ld a, (hl)
	ld l, a
	add a, a
	sbc a, a
	ld h, a
	ex de, hl
	ld hl, (_reflectDirsA.__DATA__) & 0xFFFF
	add hl, de
	dec hl
	ld a, (hl)
	push af
	ld hl, 2
	push hl
	ld a, (ix+5)
	ld l, a
	dec hl
	push hl
	ld hl, _shots
	call __ARRAY
	pop af
	ld (hl), a
	jp _CheckShotItems__leave
__LABEL189:
	ld a, (ix-4)
	sub 43
	jp nz, __LABEL191
	ld hl, 2
	push hl
	ld a, (ix+5)
	ld l, a
	dec hl
	push hl
	ld hl, _shots
	call __ARRAY
	ld a, (hl)
	ld l, a
	add a, a
	sbc a, a
	ld h, a
	ex de, hl
	ld hl, (_reflectDirsB.__DATA__) & 0xFFFF
	add hl, de
	dec hl
	ld a, (hl)
	push af
	ld hl, 2
	push hl
	ld a, (ix+5)
	ld l, a
	dec hl
	push hl
	ld hl, _shots
	call __ARRAY
	pop af
	ld (hl), a
	jp _CheckShotItems__leave
__LABEL191:
	ld a, (ix-4)
	sub 44
	jp nz, __LABEL193
	ld hl, 2
	push hl
	ld a, (ix+5)
	ld l, a
	dec hl
	push hl
	ld hl, _shots
	call __ARRAY
	ld a, (hl)
	ld l, a
	add a, a
	sbc a, a
	ld h, a
	ex de, hl
	ld hl, (_reflectDirsC.__DATA__) & 0xFFFF
	add hl, de
	dec hl
	ld a, (hl)
	push af
	ld hl, 2
	push hl
	ld a, (ix+5)
	ld l, a
	dec hl
	push hl
	ld hl, _shots
	call __ARRAY
	pop af
	ld (hl), a
	jp _CheckShotItems__leave
__LABEL193:
	ld hl, 2
	push hl
	ld a, (ix+5)
	ld l, a
	dec hl
	push hl
	ld hl, _shots
	call __ARRAY
	ld a, (hl)
	ld l, a
	add a, a
	sbc a, a
	ld h, a
	ex de, hl
	ld hl, (_reflectDirsD.__DATA__) & 0xFFFF
	add hl, de
	dec hl
	ld a, (hl)
	push af
	ld hl, 2
	push hl
	ld a, (ix+5)
	ld l, a
	dec hl
	push hl
	ld hl, _shots
	call __ARRAY
	pop af
	ld (hl), a
__LABEL190:
	jp _CheckShotItems__leave
__LABEL186:
	ld a, (ix-4)
	sub 46
	ccf
	jp nc, __LABEL196
	ld a, 80
	sub (ix-4)
	ccf
	jp nc, __LABEL196
	ld hl, 3
	push hl
	ld a, (ix+5)
	ld l, a
	dec hl
	push hl
	ld hl, _shots
	call __ARRAY
	ld (hl), 0
	jp _CheckShotItems__leave
__LABEL196:
	ld a, (ix-4)
	sub 92
	jp nz, __LABEL200
	ld hl, 3
	push hl
	ld a, (ix+5)
	ld l, a
	dec hl
	push hl
	ld hl, _shots
	call __ARRAY
	ld (hl), 0
	jp _CheckShotItems__leave
__LABEL200:
	ld a, (ix-4)
	sub 87
	ccf
	jp nc, __LABEL172
	ld a, 90
	sub (ix-4)
	ccf
	jp nc, __LABEL172
	ld a, (ix+9)
	push af
	ld a, (ix+7)
	push af
	call _ClearGridCell
	call _CrateDestroyedEffect
	ld hl, 3
	push hl
	ld a, (ix+5)
	ld l, a
	dec hl
	push hl
	ld hl, _shots
	call __ARRAY
	ld (hl), 0
	ld a, (ix-4)
	sub 87
	jp nz, __LABEL205
	ld hl, _availableMines
	inc (hl)
	ld hl, 18
	push hl
	ld hl, 30
	push hl
	ld a, (_availableMines)
	add a, 95
	inc a
	ld l, a
	dec hl
	push hl
	ld hl, _tileColors
	call __ARRAY
	ld a, (hl)
	ld l, a
	ld h, 0
	push hl
	ld a, (_availableMines)
	add a, 95
	call _SetTile
	jp _CheckShotItems__leave
__LABEL205:
	ld a, (ix-4)
	sub 89
	jp nz, __LABEL207
	ld hl, _availableBombs
	inc (hl)
	ld hl, 20
	push hl
	ld hl, 26
	push hl
	ld a, (_availableBombs)
	add a, 95
	inc a
	ld l, a
	dec hl
	push hl
	ld hl, _tileColors
	call __ARRAY
	ld a, (hl)
	ld l, a
	ld h, 0
	push hl
	ld a, (_availableBombs)
	add a, 95
	call _SetTile
	jp _CheckShotItems__leave
__LABEL207:
	ld a, (ix-4)
	sub 88
	jp nz, __LABEL209
	ld hl, _availableBlockers
	inc (hl)
	ld hl, 18
	push hl
	ld hl, 26
	push hl
	ld a, (_availableBlockers)
	add a, 95
	inc a
	ld l, a
	dec hl
	push hl
	ld hl, _tileColors
	call __ARRAY
	ld a, (hl)
	ld l, a
	ld h, 0
	push hl
	ld a, (_availableBlockers)
	add a, 95
	call _SetTile
	jp _CheckShotItems__leave
__LABEL209:
	ld a, (ix-4)
	sub 90
	jp nz, _CheckShotItems__leave
	ld hl, _availableChargedShots
	inc (hl)
	ld hl, 20
	push hl
	ld hl, 30
	push hl
	ld a, (_availableChargedShots)
	add a, 95
	inc a
	ld l, a
	dec hl
	push hl
	ld hl, _tileColors
	call __ARRAY
	ld a, (hl)
	ld l, a
	ld h, 0
	push hl
	ld a, (_availableChargedShots)
	add a, 95
	call _SetTile
__LABEL206:
	jp _CheckShotItems__leave
__LABEL172:
	ld a, (ix-4)
	sub 91
	jp nz, __LABEL214
	ld a, (ix+5)
	sub 255
	jp z, __LABEL216
	ld a, (ix+9)
	push af
	ld a, (ix+7)
	push af
	call _ClearGridCell
	call _BuildTankDestroyedEffect
	ld hl, 3
	push hl
	ld a, (ix+5)
	ld l, a
	dec hl
	push hl
	ld hl, _shots
	call __ARRAY
	ld (hl), 0
__LABEL216:
	ld hl, _activeTowers
	dec (hl)
	ld a, (_activeTowers)
	or a
	jp nz, _CheckShotItems__leave
	ld (ix-1), 1
	jp __LABEL219
__LABEL222:
	ld (ix-2), 1
	jp __LABEL224
__LABEL227:
	ld a, (ix-2)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld a, (ix-1)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld hl, _activeMap
	call __ARRAY
	ld a, (hl)
	sub 92
	jp nz, __LABEL228
	ld a, (ix-2)
	push af
	ld a, (ix-1)
	push af
	call _ClearGridCell
__LABEL228:
	inc (ix-2)
__LABEL224:
	ld a, 20
	cp (ix-2)
	jp nc, __LABEL227
	inc (ix-1)
__LABEL219:
	ld a, 20
	cp (ix-1)
	jp nc, __LABEL222
__LABEL218:
	jp _CheckShotItems__leave
__LABEL214:
	ld a, (ix-4)
	sub 93
	jp nz, __LABEL232
	ld a, (ix+5)
	sub 255
	jp z, __LABEL234
	ld a, (ix+9)
	push af
	ld a, (ix+7)
	push af
	call _ClearGridCell
	ld hl, 3
	push hl
	ld a, (ix+5)
	ld l, a
	dec hl
	push hl
	ld hl, _shots
	call __ARRAY
	ld (hl), 0
	call _BuildTankDestroyedEffect
__LABEL234:
	ld (ix-4), 1
	jp __LABEL235
__LABEL238:
	ld hl, 0
	push hl
	ld a, (ix-4)
	ld l, a
	dec hl
	push hl
	ld hl, _ships
	call __ARRAY
	ld a, (hl)
	sub (ix+7)
	jp nz, __LABEL239
	ld hl, 1
	push hl
	ld a, (ix-4)
	ld l, a
	dec hl
	push hl
	ld hl, _ships
	call __ARRAY
	ld a, (hl)
	sub (ix+9)
	jp nz, __LABEL239
	ld a, (ix-4)
	ld l, a
	ld h, 0
	ex de, hl
	ld hl, _maskTable.__DATA__
	add hl, de
	dec hl
	ld a, (_activeShips)
	xor (hl)
	ld (_activeShips), a
	jp _CheckShotItems__leave
__LABEL239:
	inc (ix-4)
__LABEL235:
	ld a, 4
	cp (ix-4)
	jp nc, __LABEL238
__LABEL232:
	ld a, (ix-4)
	sub 94
	jp nz, _CheckShotItems__leave
	ld a, (ix+5)
	sub 255
	jp z, __LABEL247
	ld a, (ix+9)
	push af
	ld a, (ix+7)
	push af
	call _ClearGridCell
	ld hl, 3
	push hl
	ld a, (ix+5)
	ld l, a
	dec hl
	push hl
	ld hl, _shots
	call __ARRAY
	ld (hl), 0
	call _BuildTankDestroyedEffect
__LABEL247:
	ld (ix-4), 1
	jp __LABEL248
__LABEL251:
	ld hl, 0
	push hl
	ld a, (ix-4)
	ld l, a
	dec hl
	push hl
	ld hl, _hangars
	call __ARRAY
	ld a, (hl)
	sub (ix+7)
	jp nz, __LABEL252
	ld hl, 1
	push hl
	ld a, (ix-4)
	ld l, a
	dec hl
	push hl
	ld hl, _hangars
	call __ARRAY
	ld a, (hl)
	sub (ix+9)
	jp nz, __LABEL252
	ld a, (ix-4)
	ld l, a
	ld h, 0
	ex de, hl
	ld hl, _maskTable.__DATA__
	add hl, de
	dec hl
	ld a, (_activeHangars)
	xor (hl)
	ld (_activeHangars), a
	jp _CheckShotItems__leave
__LABEL252:
	inc (ix-4)
__LABEL248:
	ld a, 2
	cp (ix-4)
	jp nc, __LABEL251
_CheckShotItems__leave:
	ld sp, ix
	pop ix
	exx
	pop hl
	pop bc
	pop bc
	ex (sp), hl
	exx
	ret
_UpdateFire:
	push ix
	ld ix, 0
	add ix, sp
	ld hl, -7
	add hl, sp
	ld sp, hl
	ld (hl), 0
	ld bc, 6
	ld d, h
	ld e, l
	inc de
	ldir
	ld a, (_activeShots)
	or a
	jp nz, __LABEL257
	ld a, (_dir)
	or a
	jp nz, _UpdateFire__leave
	ld hl, 65028
	call _MultiKeys
	or a
	jp z, _UpdateFire__leave
	ld a, (_playerX)
	ld (_shots.__DATA__ + 0), a
	ld a, 40
	ld (_shots.__DATA__ + 1), a
	ld a, 1
	ld (_shots.__DATA__ + 2), a
	ld (_activeShots), a
__LABEL260:
	jp _UpdateFire__leave
__LABEL257:
	ld a, (_activeShots)
	ld (ix-7), a
	ld (ix-1), 1
	jp __LABEL263
__LABEL266:
	ld a, (ix-1)
	ld l, a
	add a, a
	sbc a, a
	ld h, a
	ex de, hl
	ld hl, (_maskTable.__DATA__) & 0xFFFF
	add hl, de
	dec hl
	ld a, (hl)
	ld (ix-6), a
	ld a, (ix-7)
	and (ix-6)
	jp z, __LABEL267
	ld hl, 3
	push hl
	ld a, (ix-1)
	ld l, a
	add a, a
	sbc a, a
	ld h, a
	dec hl
	push hl
	ld hl, _shots
	call __ARRAY
	ld a, (hl)
	ld (ix-5), a
	sub 255
	jp z, __LABEL270
	inc (ix-5)
	ld a, (ix-5)
	sub 4
	jp nz, __LABEL273
	ld (ix-5), 255
	ld a, (_activeShots)
	xor (ix-6)
	ld (_activeShots), a
__LABEL273:
	ld a, (ix-5)
	push af
	ld hl, 3
	push hl
	ld a, (ix-1)
	ld l, a
	add a, a
	sbc a, a
	ld h, a
	dec hl
	push hl
	ld hl, _shots
	call __ARRAY
	pop af
	ld (hl), a
	jp __LABEL267
__LABEL270:
	ld hl, 0
	push hl
	ld a, (ix-1)
	ld l, a
	add a, a
	sbc a, a
	ld h, a
	dec hl
	push hl
	ld hl, _shots
	call __ARRAY
	ld a, (hl)
	ld (ix-2), a
	ld hl, 1
	push hl
	ld a, (ix-1)
	ld l, a
	add a, a
	sbc a, a
	ld h, a
	dec hl
	push hl
	ld hl, _shots
	call __ARRAY
	ld a, (hl)
	ld (ix-3), a
	ld hl, 2
	push hl
	ld a, (ix-1)
	ld l, a
	add a, a
	sbc a, a
	ld h, a
	dec hl
	push hl
	ld hl, _shots
	call __ARRAY
	ld a, (hl)
	ld (ix-4), a
	dec a
	jp nz, __LABEL274
	ld a, (ix-3)
	ld h, 4
	call __LEI8
	or a
	jp z, __LABEL276
	ld hl, 3
	push hl
	ld a, (ix-1)
	ld l, a
	add a, a
	sbc a, a
	ld h, a
	dec hl
	push hl
	ld hl, _shots
	call __ARRAY
	ld (hl), 0
	ld (ix-3), 4
	jp __LABEL275
__LABEL276:
	dec (ix-3)
__LABEL277:
	jp __LABEL275
__LABEL274:
	ld a, (ix-4)
	sub 2
	jp nz, __LABEL278
	ld h, (ix-3)
	ld a, 42
	call __LEI8
	or a
	jp z, __LABEL280
	ld hl, 3
	push hl
	ld a, (ix-1)
	ld l, a
	add a, a
	sbc a, a
	ld h, a
	dec hl
	push hl
	ld hl, _shots
	call __ARRAY
	ld (hl), 0
	ld (ix-3), 42
	jp __LABEL275
__LABEL280:
	inc (ix-3)
__LABEL281:
	jp __LABEL275
__LABEL278:
	ld a, (ix-4)
	sub 3
	jp nz, __LABEL282
	ld a, (ix-2)
	ld h, 2
	call __LEI8
	or a
	jp z, __LABEL284
	ld hl, 3
	push hl
	ld a, (ix-1)
	ld l, a
	add a, a
	sbc a, a
	ld h, a
	dec hl
	push hl
	ld hl, _shots
	call __ARRAY
	ld (hl), 0
	ld (ix-2), 2
	jp __LABEL275
__LABEL284:
	dec (ix-2)
__LABEL285:
	jp __LABEL275
__LABEL282:
	ld a, (ix-4)
	sub 4
	jp nz, __LABEL275
	ld h, (ix-2)
	ld a, 40
	call __LEI8
	or a
	jp z, __LABEL288
	ld hl, 3
	push hl
	ld a, (ix-1)
	ld l, a
	add a, a
	sbc a, a
	ld h, a
	dec hl
	push hl
	ld hl, _shots
	call __ARRAY
	ld (hl), 0
	ld (ix-2), 40
	jp __LABEL275
__LABEL288:
	inc (ix-2)
__LABEL275:
	ld a, (ix-2)
	push af
	ld hl, 0
	push hl
	ld a, (ix-1)
	ld l, a
	add a, a
	sbc a, a
	ld h, a
	dec hl
	push hl
	ld hl, _shots
	call __ARRAY
	pop af
	ld (hl), a
	ld a, (ix-3)
	push af
	ld hl, 1
	push hl
	ld a, (ix-1)
	ld l, a
	add a, a
	sbc a, a
	ld h, a
	dec hl
	push hl
	ld hl, _shots
	call __ARRAY
	pop af
	ld (hl), a
	ld hl, 3
	push hl
	ld a, (ix-1)
	ld l, a
	add a, a
	sbc a, a
	ld h, a
	dec hl
	push hl
	ld hl, _shots
	call __ARRAY
	ld a, (hl)
	sub 255
	jp nz, __LABEL267
	ld a, (ix-2)
	and 1
	ld d, a
	ld a, (ix-3)
	and 1
	or d
	jp nz, __LABEL267
	ld a, (ix-3)
	sra a
	dec a
	push af
	ld a, (ix-2)
	sra a
	push af
	ld a, (ix-1)
	push af
	call _CheckShotItems
__LABEL267:
	inc (ix-1)
__LABEL263:
	ld h, (ix-1)
	ld a, 3
	call __LTI8
	or a
	jp z, __LABEL266
_UpdateFire__leave:
	ld sp, ix
	pop ix
	ret
_CheckCursorAction:
	push ix
	ld ix, 0
	add ix, sp
	ld hl, 0
	push hl
	push hl
	push hl
	push ix
	pop hl
	ld bc, -5
	add hl, bc
	ex de, hl
	ld hl, __LABEL665
	ld bc, 1
	ldir
	ld a, (_cursorTool)
	or a
	jp nz, __LABEL294
	ld a, (ix+7)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld a, (ix+5)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld hl, _activeMap
	call __ARRAY
	ld a, (hl)
	ld (ix-1), a
	or a
	jp z, _CheckCursorAction__leave
	ld a, (ix-1)
	sub 42
	jp nz, __LABEL298
	ld a, (ix+7)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld a, (ix+5)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld hl, _activeMap
	call __ARRAY
	ld (hl), 43
	ld (ix-1), 0
	jp __LABEL297
__LABEL298:
	ld a, (ix-1)
	sub 43
	jp nz, __LABEL300
	ld a, (ix+7)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld a, (ix+5)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld hl, _activeMap
	call __ARRAY
	ld (hl), 45
	ld (ix-1), 0
	jp __LABEL297
__LABEL300:
	ld a, (ix-1)
	sub 45
	jp nz, __LABEL302
	ld a, (ix+7)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld a, (ix+5)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld hl, _activeMap
	call __ARRAY
	ld (hl), 44
	ld (ix-1), 0
	jp __LABEL297
__LABEL302:
	ld a, (ix-1)
	sub 44
	jp nz, __LABEL297
	ld a, (ix+7)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld a, (ix+5)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld hl, _activeMap
	call __ARRAY
	ld (hl), 42
	ld (ix-1), 0
__LABEL297:
	ld a, (ix-1)
	or a
	jp nz, _CheckCursorAction__leave
	ld a, (ix+7)
	inc a
	ld l, a
	ld h, 0
	push hl
	ld a, (ix+5)
	ld l, a
	push hl
	ld a, (_tileColors.__DATA__ + 42)
	ld l, a
	push hl
	ld a, (ix+7)
	ld l, a
	dec hl
	push hl
	ld a, (ix+5)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld hl, _activeMap
	call __ARRAY
	ld a, (hl)
	call _SetTileChecked
	call _DeflectorEffect
__LABEL307:
	jp _CheckCursorAction__leave
__LABEL294:
	ld a, (_cursorTool)
	sub 2
	jp nz, __LABEL308
	xor a
	ld hl, (_availableMines - 1)
	cp h
	jp nc, _CheckCursorAction__leave
	ld a, (ix+7)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld a, (ix+5)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld hl, _activeMap
	call __ARRAY
	ld a, (hl)
	or a
	jp nz, _CheckCursorAction__leave
	ld hl, _availableMines
	dec (hl)
	ld hl, 18
	push hl
	ld hl, 30
	push hl
	ld a, (_availableMines)
	add a, 95
	inc a
	ld l, a
	dec hl
	push hl
	ld hl, _tileColors
	call __ARRAY
	ld a, (hl)
	ld l, a
	ld h, 0
	push hl
	ld a, (_availableMines)
	add a, 95
	call _SetTile
	ld a, (ix+7)
	push af
	ld a, (ix+5)
	push af
	ld a, 84
	push af
	call _GridObject
	call _MinePlacedEffect
__LABEL311:
	jp _CheckCursorAction__leave
__LABEL308:
	ld a, (_cursorTool)
	dec a
	jp nz, __LABEL314
	xor a
	ld hl, (_availableBlockers - 1)
	cp h
	jp nc, _CheckCursorAction__leave
	ld a, (ix+7)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld a, (ix+5)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld hl, _activeMap
	call __ARRAY
	ld a, (hl)
	or a
	jp nz, _CheckCursorAction__leave
	ld hl, _availableBlockers
	dec (hl)
	ld hl, 18
	push hl
	ld hl, 26
	push hl
	ld a, (_availableBlockers)
	add a, 95
	inc a
	ld l, a
	dec hl
	push hl
	ld hl, _tileColors
	call __ARRAY
	ld a, (hl)
	ld l, a
	ld h, 0
	push hl
	ld a, (_availableBlockers)
	add a, 95
	call _SetTile
	ld a, (ix+7)
	push af
	ld a, (ix+5)
	push af
	ld a, 83
	push af
	call _GridObject
	call _MinePlacedEffect
__LABEL317:
	jp _CheckCursorAction__leave
__LABEL314:
	ld a, (_cursorTool)
	sub 3
	jp nz, _CheckCursorAction__leave
	xor a
	ld hl, (_availableBombs - 1)
	cp h
	jp nc, _CheckCursorAction__leave
	ld hl, _availableBombs
	dec (hl)
	ld hl, 20
	push hl
	ld hl, 26
	push hl
	ld a, (_availableBombs)
	add a, 95
	inc a
	ld l, a
	dec hl
	push hl
	ld hl, _tileColors
	call __ARRAY
	ld a, (hl)
	ld l, a
	ld h, 0
	push hl
	ld a, (_availableBombs)
	add a, 95
	call _SetTile
	call _BombEffect
	ld a, (ix+7)
	dec a
	ld (ix-3), a
	jp __LABEL324
__LABEL327:
	ld a, (ix+5)
	dec a
	ld (ix-2), a
	jp __LABEL329
__LABEL332:
	inc (ix-5)
	ld a, (ix-2)
	cp 1
	jp c, __LABEL333
	ld a, (ix-3)
	cp 1
	jp c, __LABEL333
	ld a, 20
	cp (ix-2)
	jp c, __LABEL333
	cp (ix-2)
	jp c, __LABEL333
	ld a, (ix-3)
	push af
	ld a, (ix-2)
	push af
	ld a, 255
	push af
	call _CheckShotItems
	ld a, (ix-3)
	push af
	ld a, (ix-2)
	push af
	ld a, (ix-5)
	add a, 72
	push af
	call _GridObject
	ld a, (_activeAliens)
	or a
	jp z, __LABEL343
	ld (ix-4), 1
	jp __LABEL344
__LABEL347:
	ld a, (ix-4)
	ld l, a
	ld h, 0
	ex de, hl
	ld hl, _maskTable.__DATA__
	add hl, de
	dec hl
	ld a, (hl)
	ld (ix-6), a
	ld h, a
	ld a, (_activeAliens)
	and h
	jp z, __LABEL348
	ld hl, 0
	push hl
	ld a, (ix-4)
	ld l, a
	dec hl
	push hl
	ld hl, _aliens
	call __ARRAY
	ld a, (hl)
	sub (ix-2)
	jp nz, __LABEL348
	ld hl, 1
	push hl
	ld a, (ix-4)
	ld l, a
	dec hl
	push hl
	ld hl, _aliens
	call __ARRAY
	ld a, (hl)
	sub (ix-3)
	jp nz, __LABEL348
	ld a, (_activeAliens)
	xor (ix-6)
	ld (_activeAliens), a
__LABEL348:
	inc (ix-4)
__LABEL344:
	ld a, 4
	cp (ix-4)
	jp nc, __LABEL347
__LABEL343:
	ld a, (_activeTanks)
	or a
	jp z, __LABEL333
	ld (ix-4), 1
	jp __LABEL357
__LABEL360:
	ld a, (ix-4)
	ld l, a
	ld h, 0
	ex de, hl
	ld hl, _maskTable.__DATA__
	add hl, de
	dec hl
	ld a, (hl)
	ld (ix-6), a
	ld h, a
	ld a, (_activeTanks)
	and h
	jp z, __LABEL361
	ld hl, 0
	push hl
	ld a, (ix-4)
	ld l, a
	dec hl
	push hl
	ld hl, _tanks
	call __ARRAY
	ld a, (hl)
	sub (ix-2)
	jp nz, __LABEL361
	ld hl, 1
	push hl
	ld a, (ix-4)
	ld l, a
	dec hl
	push hl
	ld hl, _tanks
	call __ARRAY
	ld a, (hl)
	sub (ix-3)
	jp nz, __LABEL361
	ld a, (_activeTanks)
	xor (ix-6)
	ld (_activeTanks), a
__LABEL361:
	inc (ix-4)
__LABEL357:
	ld a, 2
	cp (ix-4)
	jp nc, __LABEL360
__LABEL333:
	inc (ix-2)
__LABEL329:
	ld h, (ix-2)
	ld a, (ix+5)
	inc a
	cp h
	jp nc, __LABEL332
	inc (ix-3)
__LABEL324:
	ld h, (ix-3)
	ld a, (ix+7)
	inc a
	cp h
	jp nc, __LABEL327
_CheckCursorAction__leave:
	ld sp, ix
	pop ix
	exx
	pop hl
	pop bc
	ex (sp), hl
	exx
	ret
_UpdateCursor:
	ld hl, 63233
	call _MultiKeys
	or a
	jp z, __LABEL368
	xor a
	ld (_cursorTool), a
	ld a, 16
	push af
	ld a, 24
	call PRINT_AT
	ld hl, __LABEL151
	xor a
	call __PRINTSTR
	call PRINT_EOL
	jp __LABEL369
__LABEL368:
	ld hl, 63234
	call _MultiKeys
	or a
	jp z, __LABEL370
	ld a, 1
	ld (_cursorTool), a
	ld a, 16
	push af
	ld a, 24
	call PRINT_AT
	ld hl, __LABEL372
	xor a
	call __PRINTSTR
	call PRINT_EOL
	jp __LABEL369
__LABEL370:
	ld hl, 63236
	call _MultiKeys
	or a
	jp z, __LABEL373
	ld a, 2
	ld (_cursorTool), a
	ld a, 16
	push af
	ld a, 24
	call PRINT_AT
	ld hl, __LABEL375
	xor a
	call __PRINTSTR
	call PRINT_EOL
	jp __LABEL369
__LABEL373:
	ld hl, 63240
	call _MultiKeys
	or a
	jp z, __LABEL376
	ld a, 3
	ld (_cursorTool), a
	ld a, 16
	push af
	ld a, 24
	call PRINT_AT
	ld hl, __LABEL378
	xor a
	call __PRINTSTR
	call PRINT_EOL
	jp __LABEL369
__LABEL376:
	ld hl, 63248
	call _MultiKeys
	or a
	jp z, __LABEL369
	ld a, 4
	ld (_cursorTool), a
	ld a, 16
	push af
	ld a, 24
	call PRINT_AT
	ld hl, __LABEL381
	xor a
	call __PRINTSTR
	call PRINT_EOL
__LABEL369:
	ld hl, _cursorFrames
	dec (hl)
	ld a, (_cursorMoved)
	sub 1
	sbc a, a
	ld d, a
	ld a, (_cursorFrames)
	sub 1
	sbc a, a
	or d
	jp z, __LABEL382
	xor a
	ld hl, (_cursorX - 1)
	cp h
	jp nc, __LABEL385
	ld hl, 48904
	call _MultiKeys
	or a
	jp z, __LABEL385
	ld hl, _cursorX
	dec (hl)
	ld a, 1
	ld (_cursorMoved), a
	ld (_cursorVisible), a
	ld a, 5
	ld (_cursorFrames), a
	jp __LABEL__CHECKCURSORFRAMES
__LABEL385:
	ld a, (_cursorX)
	cp 19
	jp nc, __LABEL389
	ld hl, 48898
	call _MultiKeys
	or a
	jp z, __LABEL389
	ld hl, _cursorX
	inc (hl)
	ld a, 1
	ld (_cursorMoved), a
	ld (_cursorVisible), a
	ld a, 5
	ld (_cursorFrames), a
	jp __LABEL__CHECKCURSORFRAMES
__LABEL389:
	xor a
	ld hl, (_cursorY - 1)
	cp h
	jp nc, __LABEL393
	ld hl, 57092
	call _MultiKeys
	or a
	jp z, __LABEL393
	ld hl, _cursorY
	dec (hl)
	ld a, 1
	ld (_cursorMoved), a
	ld (_cursorVisible), a
	ld a, 5
	ld (_cursorFrames), a
	jp __LABEL__CHECKCURSORFRAMES
__LABEL393:
	ld a, (_cursorY)
	cp 19
	jp nc, __LABEL397
	ld hl, 48900
	call _MultiKeys
	or a
	jp z, __LABEL397
	ld hl, _cursorY
	inc (hl)
	ld a, 1
	ld (_cursorMoved), a
	ld (_cursorVisible), a
	ld a, 5
	ld (_cursorFrames), a
	jp __LABEL__CHECKCURSORFRAMES
__LABEL397:
	ld hl, 32513
	call _MultiKeys
	or a
	jp z, __LABEL400
	ld a, (_cursorY)
	inc a
	push af
	ld a, (_cursorX)
	inc a
	push af
	call _CheckCursorAction
	ld a, 1
	ld (_cursorMoved), a
	ld (_cursorVisible), a
	ld a, 5
	ld (_cursorFrames), a
	jp __LABEL__CHECKCURSORFRAMES
__LABEL400:
	xor a
	ld (_cursorMoved), a
__LABEL401:
	jp __LABEL__CHECKCURSORFRAMES
__LABEL382:
	call _AnyKey
	or a
	jp z, __LABEL__CHECKCURSORFRAMES
	xor a
	ld (_cursorMoved), a
__LABEL__CHECKCURSORFRAMES:
	ld a, (_cursorFrames)
	or a
	jp nz, _UpdateCursor__leave
	ld a, (_cursorVisible)
	sub 1
	sbc a, a
	ld (_cursorVisible), a
	ld a, 10
	ld (_cursorFrames), a
_UpdateCursor__leave:
	ret
_LineOfSight:
	push ix
	ld ix, 0
	add ix, sp
	ld hl, 0
	push hl
	push hl
	inc sp
	ld l, (ix+4)
	ld h, (ix+5)
	dec hl
	ld de, 20
	call __MUL16_FAST
	ex de, hl
	ld hl, _activeMap.__DATA__
	add hl, de
	push hl
	ld l, (ix+6)
	ld h, (ix+7)
	ex de, hl
	pop hl
	add hl, de
	ld (ix-3), l
	ld (ix-2), h
	ld (ix-1), 1
	jp __LABEL406
__LABEL409:
	ld l, (ix-3)
	ld h, (ix-2)
	ld a, (hl)
	push af
	sub 92
	ld h, a
	pop af
	or a
	jr z, __LABEL666
	ld a, h
__LABEL666:
	push af
	ld h, (ix-2)
	ld a, (hl)
	sub 81
	ld h, a
	pop af
	or a
	jr z, __LABEL667
	ld a, h
__LABEL667:
	or a
	jp z, __LABEL412
	xor a
	jp _LineOfSight__leave
__LABEL412:
	ld h, (ix-2)
	inc hl
	ld (ix-3), l
	ld (ix-2), h
	inc (ix-1)
__LABEL406:
	ld a, (ix-1)
	push af
	ld l, (ix+6)
	ld h, (ix+7)
	ex de, hl
	ld hl, 19
	or a
	sbc hl, de
	ld a, l
	pop hl
	cp h
	jp nc, __LABEL409
	ld a, 1
_LineOfSight__leave:
	ld sp, ix
	pop ix
	exx
	pop hl
	pop bc
	ex (sp), hl
	exx
	ret
_UpdateAliens:
	push ix
	ld ix, 0
	add ix, sp
	ld hl, -9
	add hl, sp
	ld sp, hl
	ld (hl), 0
	ld bc, 8
	ld d, h
	ld e, l
	inc de
	ldir
	ld a, (_activeAliens)
	or a
	jp z, _UpdateAliens__leave
	ld hl, _alienFrame
	dec (hl)
	ld a, (_alienFrame)
	or a
	jp nz, _UpdateAliens__leave
	ld a, 5
	ld (_alienFrame), a
	ld (ix-1), 1
	jp __LABEL417
__LABEL420:
	ld a, (ix-1)
	ld l, a
	ld h, 0
	ex de, hl
	ld hl, _maskTable.__DATA__
	add hl, de
	dec hl
	ld a, (hl)
	ld (ix-8), a
	ld h, a
	ld a, (_activeAliens)
	and h
	jp z, __LABEL421
	ld hl, 3
	push hl
	ld a, (ix-1)
	ld l, a
	dec hl
	push hl
	ld hl, _aliens
	call __ARRAY
	ld a, (hl)
	ld (ix-2), a
	sub 255
	jp z, __LABEL424
	inc (ix-2)
	ld a, (ix-2)
	sub 4
	jp nz, __LABEL427
	ld (ix-2), 255
	ld a, (_activeAliens)
	xor (ix-8)
	ld (_activeAliens), a
__LABEL427:
	ld a, (ix-2)
	push af
	ld hl, 3
	push hl
	ld a, (ix-1)
	ld l, a
	dec hl
	push hl
	ld hl, _aliens
	call __ARRAY
	pop af
	ld (hl), a
	jp __LABEL421
__LABEL424:
	ld hl, 0
	push hl
	ld a, (ix-1)
	ld l, a
	dec hl
	push hl
	ld hl, _aliens
	call __ARRAY
	ld a, (hl)
	ld (ix-3), a
	ld hl, 1
	push hl
	ld a, (ix-1)
	ld l, a
	dec hl
	push hl
	ld hl, _aliens
	call __ARRAY
	ld a, (hl)
	ld (ix-4), a
	ld hl, 2
	push hl
	ld a, (ix-1)
	ld l, a
	dec hl
	push hl
	ld hl, _aliens
	call __ARRAY
	ld a, (hl)
	ld (ix-5), a
	ld a, (ix-3)
	and 1
	jp z, __LABEL428
	ld a, (ix-3)
	add a, (ix-5)
	ld (ix-3), a
	jp __LABEL__ENDTESTCELL
__LABEL428:
	ld a, (ix-3)
	sra a
	ld (ix-6), a
	ld a, (ix-4)
	sra a
	dec a
	ld (ix-7), a
__LABEL__TESTALIENCONTINUE:
	ld h, (ix-6)
	ld a, 1
	call __LTI8
	or a
	jp z, __LABEL431
	ld a, (ix-5)
	sub 255
	jp z, __LABEL__ALIENCONTINUE
__LABEL431:
	ld a, (ix-6)
	ld h, 20
	call __LTI8
	or a
	jp z, __LABEL__TESTALIENDOWN
	ld a, (ix-5)
	dec a
	jp z, __LABEL__ALIENCONTINUE
__LABEL__TESTALIENDOWN:
	ld a, (ix-7)
	ld h, 20
	call __LTI8
	or a
	jp z, __LABEL__TESTALIENINVERT
	ld a, (ix-7)
	inc a
	ld l, a
	add a, a
	sbc a, a
	ld h, a
	dec hl
	push hl
	ld a, (ix-6)
	ld l, a
	add a, a
	sbc a, a
	ld h, a
	dec hl
	push hl
	ld hl, _activeMap
	call __ARRAY
	ld a, (hl)
	ld (ix-9), a
	sub 1
	sbc a, a
	ld d, a
	ld a, (ix-9)
	sub 92
	sub 1
	sbc a, a
	or d
	jp z, __LABEL440
	ld a, (ix-5)
	neg
	ld (ix-5), a
	ld a, (ix-4)
	add a, 2
	ld (ix-4), a
	jp __LABEL__ENDTESTCELL
__LABEL440:
	ld a, (ix-9)
	sub 84
	jp nz, __LABEL__TESTALIENINVERT
	ld a, (ix-7)
	inc a
	push af
	ld a, (ix-6)
	push af
	call _ClearGridCell
	ld hl, 3
	push hl
	ld a, (ix-1)
	ld l, a
	dec hl
	push hl
	ld hl, _aliens
	call __ARRAY
	ld (hl), 0
	jp __LABEL__ENDTESTCELL
__LABEL__TESTALIENINVERT:
	ld h, (ix-6)
	ld a, 1
	call __LTI8
	or a
	jp z, __LABEL445
	ld a, (ix-5)
	dec a
	jp z, __LABEL__ALIENINVERT
__LABEL445:
	ld a, (ix-6)
	ld h, 20
	call __LTI8
	or a
	jp z, __LABEL__EXPLODEALIEN
	ld a, (ix-5)
	sub 255
	jp z, __LABEL__ALIENINVERT
__LABEL__EXPLODEALIEN:
	ld hl, 3
	push hl
	ld a, (ix-1)
	ld l, a
	dec hl
	push hl
	ld hl, _aliens
	call __ARRAY
	ld (hl), 0
	jp __LABEL__ENDTESTCELL
__LABEL__ALIENCONTINUE:
	ld a, (ix-7)
	ld l, a
	add a, a
	sbc a, a
	ld h, a
	dec hl
	push hl
	ld a, (ix-6)
	add a, (ix-5)
	ld l, a
	add a, a
	sbc a, a
	ld h, a
	dec hl
	push hl
	ld hl, _activeMap
	call __ARRAY
	ld a, (hl)
	ld (ix-9), a
	sub 1
	sbc a, a
	ld d, a
	ld a, (ix-9)
	sub 92
	sub 1
	sbc a, a
	or d
	jp z, __LABEL452
	ld a, (ix-3)
	add a, (ix-5)
	ld (ix-3), a
	jp __LABEL__ENDTESTCELL
__LABEL452:
	ld a, (ix-9)
	sub 84
	jp nz, __LABEL__TESTALIENDOWN
	ld a, (ix-7)
	push af
	ld a, (ix-6)
	add a, (ix-5)
	push af
	call _ClearGridCell
	ld hl, 3
	push hl
	ld a, (ix-1)
	ld l, a
	dec hl
	push hl
	ld hl, _aliens
	call __ARRAY
	ld (hl), 0
	jp __LABEL__ENDTESTCELL
__LABEL453:
	jp __LABEL__TESTALIENDOWN
__LABEL__ALIENINVERT:
	ld a, (ix-7)
	ld l, a
	add a, a
	sbc a, a
	ld h, a
	dec hl
	push hl
	ld a, (ix-6)
	sub (ix-5)
	ld l, a
	add a, a
	sbc a, a
	ld h, a
	dec hl
	push hl
	ld hl, _activeMap
	call __ARRAY
	ld a, (hl)
	ld (ix-9), a
	sub 1
	sbc a, a
	ld d, a
	ld a, (ix-9)
	sub 92
	sub 1
	sbc a, a
	or d
	jp z, __LABEL456
	ld a, (ix-5)
	neg
	ld (ix-5), a
	ld a, (ix-3)
	add a, (ix-5)
	ld (ix-3), a
	jp __LABEL__ENDTESTCELL
__LABEL456:
	ld a, (ix-9)
	sub 84
	jp nz, __LABEL__EXPLODEALIEN
	ld a, (ix-7)
	push af
	ld a, (ix-6)
	sub (ix-5)
	push af
	call _ClearGridCell
	ld hl, 3
	push hl
	ld a, (ix-1)
	ld l, a
	dec hl
	push hl
	ld hl, _aliens
	call __ARRAY
	ld (hl), 0
	jp __LABEL__ENDTESTCELL
__LABEL457:
	jp __LABEL__EXPLODEALIEN
__LABEL__ENDTESTCELL:
	ld a, (ix-3)
	push af
	ld hl, 0
	push hl
	ld a, (ix-1)
	ld l, a
	dec hl
	push hl
	ld hl, _aliens
	call __ARRAY
	pop af
	ld (hl), a
	ld a, (ix-4)
	push af
	ld hl, 1
	push hl
	ld a, (ix-1)
	ld l, a
	dec hl
	push hl
	ld hl, _aliens
	call __ARRAY
	pop af
	ld (hl), a
	ld a, (ix-5)
	push af
	ld hl, 2
	push hl
	ld a, (ix-1)
	ld l, a
	dec hl
	push hl
	ld hl, _aliens
	call __ARRAY
	pop af
	ld (hl), a
	ld a, (ix-4)
	sub 42
	jp nz, __LABEL460
	ld a, 1
	ld (_dead), a
	jp __LABEL421
__LABEL460:
	ld hl, 3
	push hl
	ld a, (ix-1)
	ld l, a
	dec hl
	push hl
	ld hl, _aliens
	call __ARRAY
	ld a, (hl)
	or a
	jp nz, __LABEL421
	call _KilledAlienEffect
__LABEL421:
	inc (ix-1)
__LABEL417:
	ld a, 4
	cp (ix-1)
	jp nc, __LABEL420
_UpdateAliens__leave:
	ld sp, ix
	pop ix
	ret
_UpdateTanks:
	push ix
	ld ix, 0
	add ix, sp
	ld hl, -12
	add hl, sp
	ld sp, hl
	ld (hl), 0
	ld bc, 11
	ld d, h
	ld e, l
	inc de
	ldir
	ld a, (_activeTanks)
	or a
	jp z, _UpdateTanks__leave
	ld hl, _tankFrame
	dec (hl)
	ld a, (_tankFrame)
	or a
	jp nz, _UpdateTanks__leave
	ld a, 3
	ld (_tankFrame), a
	ld (ix-1), 1
	jp __LABEL468
__LABEL471:
	ld a, (ix-1)
	ld l, a
	ld h, 0
	ex de, hl
	ld hl, _maskTable.__DATA__
	add hl, de
	dec hl
	ld a, (hl)
	ld (ix-8), a
	ld h, a
	ld a, (_activeTanks)
	and h
	jp z, __LABEL472
	ld hl, 3
	push hl
	ld a, (ix-1)
	ld l, a
	dec hl
	push hl
	ld hl, _tanks
	call __ARRAY
	ld a, (hl)
	ld (ix-2), a
	sub 255
	jp z, __LABEL475
	inc (ix-2)
	ld a, (ix-2)
	sub 4
	jp nz, __LABEL478
	ld (ix-2), 255
	ld a, (_activeTanks)
	xor (ix-8)
	ld (_activeTanks), a
__LABEL478:
	ld a, (ix-2)
	push af
	ld hl, 3
	push hl
	ld a, (ix-1)
	ld l, a
	dec hl
	push hl
	ld hl, _tanks
	call __ARRAY
	pop af
	ld (hl), a
	jp __LABEL472
__LABEL475:
	ld hl, 0
	push hl
	ld a, (ix-1)
	ld l, a
	dec hl
	push hl
	ld hl, _tanks
	call __ARRAY
	ld a, (hl)
	ld (ix-3), a
	ld hl, 1
	push hl
	ld a, (ix-1)
	ld l, a
	dec hl
	push hl
	ld hl, _tanks
	call __ARRAY
	ld a, (hl)
	ld (ix-4), a
	ld hl, 2
	push hl
	ld a, (ix-1)
	ld l, a
	dec hl
	push hl
	ld hl, _tanks
	call __ARRAY
	ld a, (hl)
	ld (ix-5), a
	ld a, (ix-3)
	sra a
	ld (ix-6), a
	ld a, (ix-4)
	sra a
	dec a
	ld (ix-7), a
	ld a, (ix-3)
	inc a
	ld h, a
	ld a, (_playerX)
	call __LEI8
	push af
	ld a, (ix-3)
	dec a
	ld hl, (_playerX - 1)
	call __LEI8
	ld h, a
	pop af
	or a
	jr z, __LABEL668
	ld a, h
__LABEL668:
	or a
	jp z, __LABEL480
	ld a, (ix-7)
	ld l, a
	add a, a
	sbc a, a
	ld h, a
	push hl
	ld a, (_playerX)
	srl a
	ld l, a
	ld h, 0
	push hl
	call _LineOfSight
	or a
	jp z, __LABEL480
	call _FastRnd
	ld h, a
	ld a, (_tankProbability)
	sub h
	ccf
	jp nc, __LABEL480
	ld a, 2
	ld (_dead), a
	jp _UpdateTanks__leave
__LABEL480:
	ld a, (ix-3)
	and 1
	ld d, a
	ld a, (ix-4)
	and 1
	or d
	jp z, __LABEL485
	ld a, (ix-5)
	dec a
	jp nz, __LABEL487
	inc (ix-3)
	jp __LABEL__ENDTESTCELLTANK
__LABEL487:
	ld a, (ix-5)
	sub 2
	jp nz, __LABEL489
	inc (ix-4)
	jp __LABEL__ENDTESTCELLTANK
__LABEL489:
	ld a, (ix-5)
	sub 3
	jp nz, __LABEL491
	dec (ix-3)
	jp __LABEL__ENDTESTCELLTANK
__LABEL491:
	ld a, (ix-5)
	sub 4
	jp nz, __LABEL__ENDTESTCELLTANK
	dec (ix-4)
__LABEL488:
	jp __LABEL__ENDTESTCELLTANK
__LABEL485:
	ld h, (ix-6)
	ld a, 1
	call __LTI8
	or a
	jp z, __LABEL495
	ld a, (ix-7)
	ld l, a
	add a, a
	sbc a, a
	ld h, a
	dec hl
	push hl
	ld a, (ix-6)
	dec a
	ld l, a
	add a, a
	sbc a, a
	ld h, a
	dec hl
	push hl
	ld hl, _activeMap
	call __ARRAY
	ld a, (hl)
	ld (ix-11), a
	jp __LABEL496
__LABEL495:
	ld (ix-11), 255
__LABEL496:
	ld a, (ix-6)
	ld h, 20
	call __LTI8
	or a
	jp z, __LABEL497
	ld a, (ix-7)
	ld l, a
	add a, a
	sbc a, a
	ld h, a
	dec hl
	push hl
	ld a, (ix-6)
	inc a
	ld l, a
	add a, a
	sbc a, a
	ld h, a
	dec hl
	push hl
	ld hl, _activeMap
	call __ARRAY
	ld a, (hl)
	ld (ix-12), a
	jp __LABEL498
__LABEL497:
	ld (ix-12), 255
__LABEL498:
	ld h, (ix-7)
	ld a, 1
	call __LTI8
	or a
	jp z, __LABEL499
	ld a, (ix-7)
	dec a
	ld l, a
	add a, a
	sbc a, a
	ld h, a
	dec hl
	push hl
	ld a, (ix-6)
	ld l, a
	add a, a
	sbc a, a
	ld h, a
	dec hl
	push hl
	ld hl, _activeMap
	call __ARRAY
	ld a, (hl)
	ld (ix-9), a
	jp __LABEL500
__LABEL499:
	ld (ix-9), 255
__LABEL500:
	ld a, (ix-7)
	ld h, 19
	call __LTI8
	or a
	jp z, __LABEL501
	ld a, (ix-7)
	inc a
	ld l, a
	add a, a
	sbc a, a
	ld h, a
	dec hl
	push hl
	ld a, (ix-6)
	ld l, a
	add a, a
	sbc a, a
	ld h, a
	dec hl
	push hl
	ld hl, _activeMap
	call __ARRAY
	ld a, (hl)
	ld (ix-10), a
	jp __LABEL502
__LABEL501:
	ld (ix-10), 255
__LABEL502:
	ld a, (ix-11)
	sub 92
	sub 1
	sbc a, a
	ld d, a
	ld a, (ix-11)
	sub 81
	sub 1
	sbc a, a
	or d
	jp z, __LABEL504
	ld (ix-11), 0
__LABEL504:
	ld a, (ix-12)
	sub 92
	sub 1
	sbc a, a
	ld d, a
	ld a, (ix-12)
	sub 81
	sub 1
	sbc a, a
	or d
	jp z, __LABEL506
	ld (ix-12), 0
__LABEL506:
	ld a, (ix-9)
	sub 92
	sub 1
	sbc a, a
	ld d, a
	ld a, (ix-9)
	sub 81
	sub 1
	sbc a, a
	or d
	jp z, __LABEL508
	ld (ix-9), 0
__LABEL508:
	ld a, (ix-10)
	sub 92
	sub 1
	sbc a, a
	ld d, a
	ld a, (ix-10)
	sub 81
	sub 1
	sbc a, a
	or d
	jp z, __LABEL__TESTTANKLOOP
	ld (ix-10), 0
__LABEL__TESTTANKLOOP:
	ld a, (ix-11)
	sub 255
	jp nz, __LABEL512
	ld a, (ix-12)
	sub 255
	jp nz, __LABEL512
	ld a, (ix-9)
	sub 255
	jp nz, __LABEL512
	ld a, (ix-10)
	sub 255
	jp nz, __LABEL512
	ld hl, 3
	push hl
	ld a, (ix-1)
	ld l, a
	dec hl
	push hl
	ld hl, _tanks
	call __ARRAY
	ld (hl), 0
	jp __LABEL__ENDTESTCELLTANK
__LABEL512:
	ld a, (ix-5)
	dec a
	jp nz, __LABEL520
	ld a, (ix-12)
	or a
	jp nz, __LABEL521
	inc (ix-3)
	jp __LABEL__ENDTESTCELLTANK
__LABEL521:
	ld a, (ix-12)
	sub 84
	jp nz, __LABEL523
	call _BuildTankDestroyedEffect
	ld a, (ix-7)
	push af
	ld a, (ix-6)
	inc a
	push af
	call _ClearGridCell
	ld hl, 3
	push hl
	ld a, (ix-1)
	ld l, a
	dec hl
	push hl
	ld hl, _tanks
	call __ARRAY
	ld (hl), 0
	jp __LABEL__ENDTESTCELLTANK
__LABEL523:
	ld (ix-12), 255
	ld (ix-5), 2
	jp __LABEL__TESTTANKLOOP
__LABEL520:
	ld a, (ix-5)
	sub 2
	jp nz, __LABEL526
	ld a, (ix-10)
	or a
	jp nz, __LABEL527
	inc (ix-4)
	jp __LABEL__ENDTESTCELLTANK
__LABEL527:
	ld a, (ix-10)
	sub 84
	jp nz, __LABEL529
	call _BuildTankDestroyedEffect
	ld a, (ix-7)
	inc a
	push af
	ld a, (ix-6)
	push af
	call _ClearGridCell
	ld hl, 3
	push hl
	ld a, (ix-1)
	ld l, a
	dec hl
	push hl
	ld hl, _tanks
	call __ARRAY
	ld (hl), 0
	jp __LABEL__ENDTESTCELLTANK
__LABEL529:
	ld (ix-10), 255
	ld (ix-5), 3
	jp __LABEL__TESTTANKLOOP
__LABEL526:
	ld a, (ix-5)
	sub 3
	jp nz, __LABEL532
	ld a, (ix-11)
	or a
	jp nz, __LABEL533
	dec (ix-3)
	jp __LABEL__ENDTESTCELLTANK
__LABEL533:
	ld a, (ix-11)
	sub 84
	jp nz, __LABEL535
	call _BuildTankDestroyedEffect
	ld a, (ix-7)
	push af
	ld a, (ix-6)
	dec a
	push af
	call _ClearGridCell
	ld hl, 3
	push hl
	ld a, (ix-1)
	ld l, a
	dec hl
	push hl
	ld hl, _tanks
	call __ARRAY
	ld (hl), 0
	jp __LABEL__ENDTESTCELLTANK
__LABEL535:
	ld (ix-11), 255
	ld (ix-5), 4
	jp __LABEL__TESTTANKLOOP
__LABEL532:
	ld a, (ix-5)
	sub 4
	jp nz, __LABEL__ENDTESTCELLTANK
	ld a, (ix-9)
	or a
	jp nz, __LABEL539
	dec (ix-4)
	jp __LABEL__ENDTESTCELLTANK
__LABEL539:
	ld a, (ix-9)
	sub 84
	jp nz, __LABEL541
	call _BuildTankDestroyedEffect
	ld a, (ix-7)
	dec a
	push af
	ld a, (ix-6)
	push af
	call _ClearGridCell
	ld hl, 3
	push hl
	ld a, (ix-1)
	ld l, a
	dec hl
	push hl
	ld hl, _tanks
	call __ARRAY
	ld (hl), 0
	jp __LABEL__ENDTESTCELLTANK
__LABEL541:
	ld (ix-9), 255
	ld (ix-5), 1
	jp __LABEL__TESTTANKLOOP
__LABEL__ENDTESTCELLTANK:
	ld a, (ix-3)
	push af
	ld hl, 0
	push hl
	ld a, (ix-1)
	ld l, a
	dec hl
	push hl
	ld hl, _tanks
	call __ARRAY
	pop af
	ld (hl), a
	ld a, (ix-4)
	push af
	ld hl, 1
	push hl
	ld a, (ix-1)
	ld l, a
	dec hl
	push hl
	ld hl, _tanks
	call __ARRAY
	pop af
	ld (hl), a
	ld a, (ix-5)
	push af
	ld hl, 2
	push hl
	ld a, (ix-1)
	ld l, a
	dec hl
	push hl
	ld hl, _tanks
	call __ARRAY
	pop af
	ld (hl), a
	ld a, (ix-3)
	inc a
	ld h, a
	ld a, (_playerX)
	call __LEI8
	push af
	ld a, (ix-3)
	dec a
	ld hl, (_playerX - 1)
	call __LEI8
	ld h, a
	pop af
	or a
	jr z, __LABEL669
	ld a, h
__LABEL669:
	or a
	jp z, __LABEL472
	ld a, (ix-3)
	sra a
	ld (ix-6), a
	ld a, (ix-4)
	sra a
	dec a
	ld (ix-7), a
	ld l, a
	add a, a
	sbc a, a
	ld h, a
	push hl
	ld a, (_playerX)
	srl a
	ld l, a
	ld h, 0
	push hl
	call _LineOfSight
	or a
	jp z, __LABEL472
	call _FastRnd
	ld h, a
	ld a, (_tankProbability)
	sub h
	ccf
	jp nc, __LABEL472
	ld a, 2
	ld (_dead), a
	jp _UpdateTanks__leave
__LABEL472:
	inc (ix-1)
__LABEL468:
	ld a, 2
	cp (ix-1)
	jp nc, __LABEL471
_UpdateTanks__leave:
	ld sp, ix
	pop ix
	ret
_TestCollisions:
	push ix
	ld ix, 0
	add ix, sp
	ld hl, -12
	add hl, sp
	ld sp, hl
	ld (hl), 0
	ld bc, 11
	ld d, h
	ld e, l
	inc de
	ldir
	ld a, (_activeShots)
	or a
	jp z, _TestCollisions__leave
	ld a, (_shots.__DATA__ + 0)
	ld (ix-2), a
	ld a, (_shots.__DATA__ + 1)
	ld (ix-3), a
	ld a, (_activeShots)
	and 1
	ld (ix-8), a
	ld a, (_shots.__DATA__ + 4)
	ld (ix-4), a
	ld a, (_shots.__DATA__ + 5)
	ld (ix-5), a
	ld a, (_activeShots)
	and 2
	ld (ix-9), a
	ld a, (_shots.__DATA__ + 8)
	ld (ix-6), a
	ld a, (_shots.__DATA__ + 9)
	ld (ix-7), a
	ld a, (_activeShots)
	and 4
	ld (ix-10), a
	ld a, (_activeAliens)
	or a
	jp z, __LABEL552
	ld (ix-1), 1
	jp __LABEL553
__LABEL556:
	ld a, (ix-1)
	ld l, a
	ld h, 0
	ex de, hl
	ld hl, _maskTable.__DATA__
	add hl, de
	dec hl
	ld a, (_activeAliens)
	and (hl)
	jp z, __LABEL557
	ld hl, 0
	push hl
	ld a, (ix-1)
	ld l, a
	dec hl
	push hl
	ld hl, _aliens
	call __ARRAY
	ld a, (hl)
	ld (ix-11), a
	ld hl, 1
	push hl
	ld a, (ix-1)
	ld l, a
	dec hl
	push hl
	ld hl, _aliens
	call __ARRAY
	ld a, (hl)
	ld (ix-12), a
	ld a, (ix-8)
	or a
	jp z, __LABEL561
	ld a, (ix-11)
	sub (ix-2)
	jp nz, __LABEL561
	ld a, (ix-12)
	sub (ix-3)
	jp nz, __LABEL561
	ld hl, 3
	push hl
	ld a, (ix-1)
	ld l, a
	dec hl
	push hl
	ld hl, _aliens
	call __ARRAY
	ld (hl), 0
	ld a, (_activeShots)
	and 254
	ld (_activeShots), a
	call _KilledAlienEffect
	jp __LABEL557
__LABEL561:
	ld a, (ix-9)
	or a
	jp z, __LABEL567
	ld a, (ix-11)
	sub (ix-4)
	jp nz, __LABEL567
	ld a, (ix-12)
	sub (ix-5)
	jp nz, __LABEL567
	ld hl, 3
	push hl
	ld a, (ix-1)
	ld l, a
	dec hl
	push hl
	ld hl, _aliens
	call __ARRAY
	ld (hl), 0
	ld a, (_activeShots)
	and 253
	ld (_activeShots), a
	call _KilledAlienEffect
	jp __LABEL557
__LABEL567:
	ld a, (ix-10)
	or a
	jp z, __LABEL557
	ld a, (ix-11)
	sub (ix-6)
	jp nz, __LABEL557
	ld a, (ix-12)
	sub (ix-7)
	jp nz, __LABEL557
	ld hl, 3
	push hl
	ld a, (ix-1)
	ld l, a
	dec hl
	push hl
	ld hl, _aliens
	call __ARRAY
	ld (hl), 0
	ld a, (_activeShots)
	and 251
	ld (_activeShots), a
	call _KilledAlienEffect
__LABEL557:
	inc (ix-1)
__LABEL553:
	ld a, 4
	cp (ix-1)
	jp nc, __LABEL556
__LABEL552:
	ld a, (_activeTanks)
	or a
	jp z, __LABEL579
	ld (ix-1), 1
	jp __LABEL580
__LABEL583:
	ld a, (ix-1)
	ld l, a
	ld h, 0
	ex de, hl
	ld hl, _maskTable.__DATA__
	add hl, de
	dec hl
	ld a, (_activeTanks)
	and (hl)
	jp z, __LABEL584
	ld hl, 0
	push hl
	ld a, (ix-1)
	ld l, a
	dec hl
	push hl
	ld hl, _tanks
	call __ARRAY
	ld a, (hl)
	ld (ix-11), a
	ld hl, 1
	push hl
	ld a, (ix-1)
	ld l, a
	dec hl
	push hl
	ld hl, _tanks
	call __ARRAY
	ld a, (hl)
	ld (ix-12), a
	ld a, (ix-8)
	or a
	jp z, __LABEL588
	ld a, (ix-11)
	sub (ix-2)
	jp nz, __LABEL588
	ld a, (ix-12)
	sub (ix-3)
	jp nz, __LABEL588
	ld hl, 3
	push hl
	ld a, (ix-1)
	ld l, a
	dec hl
	push hl
	ld hl, _tanks
	call __ARRAY
	ld (hl), 0
	ld a, (_activeShots)
	and 254
	ld (_activeShots), a
	call _BuildTankDestroyedEffect
	jp __LABEL584
__LABEL588:
	ld a, (ix-9)
	or a
	jp z, __LABEL594
	ld a, (ix-11)
	sub (ix-4)
	jp nz, __LABEL594
	ld a, (ix-12)
	sub (ix-5)
	jp nz, __LABEL594
	ld hl, 3
	push hl
	ld a, (ix-1)
	ld l, a
	dec hl
	push hl
	ld hl, _tanks
	call __ARRAY
	ld (hl), 0
	ld a, (_activeShots)
	and 253
	ld (_activeShots), a
	call _BuildTankDestroyedEffect
	jp __LABEL584
__LABEL594:
	ld a, (ix-10)
	or a
	jp z, __LABEL584
	ld a, (ix-11)
	sub (ix-6)
	jp nz, __LABEL584
	ld a, (ix-12)
	sub (ix-7)
	jp nz, __LABEL584
	ld hl, 3
	push hl
	ld a, (ix-1)
	ld l, a
	dec hl
	push hl
	ld hl, _tanks
	call __ARRAY
	ld (hl), 0
	ld a, (_activeShots)
	and 251
	ld (_activeShots), a
	call _BuildTankDestroyedEffect
__LABEL584:
	inc (ix-1)
__LABEL580:
	ld a, 2
	cp (ix-1)
	jp nc, __LABEL583
__LABEL579:
	ld a, (ix-8)
	or a
	jp z, __LABEL606
	ld a, (_playerX)
	sub (ix-2)
	jp nz, __LABEL606
	ld a, 42
	sub (ix-3)
	jp nz, __LABEL606
	ld a, 3
	ld (_dead), a
	ld a, (_activeShots)
	and 254
	ld (_activeShots), a
	jp _TestCollisions__leave
__LABEL606:
	ld a, (ix-9)
	or a
	jp z, __LABEL612
	ld a, (_playerX)
	sub (ix-4)
	jp nz, __LABEL612
	ld a, 42
	sub (ix-5)
	jp nz, __LABEL612
	ld a, 3
	ld (_dead), a
	ld a, (_activeShots)
	and 253
	ld (_activeShots), a
	jp _TestCollisions__leave
__LABEL612:
	ld a, (ix-10)
	or a
	jp z, _TestCollisions__leave
	ld a, (_playerX)
	sub (ix-6)
	jp nz, _TestCollisions__leave
	ld a, 42
	sub (ix-7)
	jp nz, _TestCollisions__leave
	ld a, 3
	ld (_dead), a
	ld a, (_activeShots)
	and 251
	ld (_activeShots), a
_TestCollisions__leave:
	ld sp, ix
	pop ix
	ret
_UpdateShips:
	push ix
	ld ix, 0
	add ix, sp
	ld hl, 0
	push hl
	push hl
	push hl
	inc sp
	ld a, (_activeShips)
	or a
	jp z, _UpdateShips__leave
	ld a, (_freezingShip)
	ld (ix-1), a
	jp __LABEL625
__LABEL628:
	ld a, (ix-1)
	ld l, a
	ld h, 0
	ex de, hl
	ld hl, _maskTable.__DATA__
	add hl, de
	dec hl
	ld a, (_activeShips)
	and (hl)
	jp z, __LABEL629
	ld hl, 3
	push hl
	ld a, (ix-1)
	ld l, a
	dec hl
	push hl
	ld hl, _ships
	call __ARRAY
	ld a, (hl)
	ld h, a
	xor a
	cp h
	jp nc, __LABEL632
	ld hl, 3
	push hl
	ld a, (ix-1)
	ld l, a
	dec hl
	push hl
	ld hl, _ships
	call __ARRAY
	ld a, (hl)
	dec a
	push af
	ld hl, 3
	push hl
	ld a, (ix-1)
	ld l, a
	dec hl
	push hl
	ld hl, _ships
	call __ARRAY
	pop af
	ld (hl), a
	jp __LABEL629
__LABEL632:
	ld a, (_bitTable.__DATA__ + 3)
	ld hl, (_activeAliens - 1)
	xor h
	jp z, __LABEL634
	ld hl, 3
	push hl
	ld a, (ix-1)
	ld l, a
	dec hl
	push hl
	ld hl, _ships
	call __ARRAY
	ld (hl), 50
	ld hl, 0
	push hl
	ld a, (ix-1)
	ld l, a
	dec hl
	push hl
	ld hl, _ships
	call __ARRAY
	ld a, (hl)
	ld (ix-3), a
	ld hl, 1
	push hl
	ld a, (ix-1)
	ld l, a
	dec hl
	push hl
	ld hl, _ships
	call __ARRAY
	ld a, (hl)
	ld (ix-4), a
	ld hl, 2
	push hl
	ld a, (ix-1)
	ld l, a
	dec hl
	push hl
	ld hl, _ships
	call __ARRAY
	ld a, (hl)
	ld (ix-2), a
	dec a
	jp nz, __LABEL636
	inc (ix-3)
	ld (ix-5), 1
	jp __LABEL637
__LABEL636:
	ld a, (ix-2)
	sub 2
	jp nz, __LABEL638
	inc (ix-4)
	ld (ix-5), 1
	jp __LABEL637
__LABEL638:
	ld a, (ix-2)
	sub 3
	jp nz, __LABEL640
	dec (ix-3)
	ld (ix-5), 255
	jp __LABEL637
__LABEL640:
	ld a, (ix-2)
	sub 4
	jp nz, __LABEL637
	dec (ix-4)
	ld (ix-5), 255
__LABEL637:
	ld a, (_activeAliens)
	call _FindEmptyBit
	ld (ix-2), a
	ld l, a
	ld h, 0
	ex de, hl
	ld hl, _maskTable.__DATA__
	add hl, de
	dec hl
	ld a, (_activeAliens)
	or (hl)
	ld (_activeAliens), a
	ld a, (ix-3)
	add a, a
	push af
	ld hl, 0
	push hl
	ld a, (ix-2)
	ld l, a
	dec hl
	push hl
	ld hl, _aliens
	call __ARRAY
	pop af
	ld (hl), a
	ld a, (ix-4)
	inc a
	add a, a
	push af
	ld hl, 1
	push hl
	ld a, (ix-2)
	ld l, a
	dec hl
	push hl
	ld hl, _aliens
	call __ARRAY
	pop af
	ld (hl), a
	ld a, (ix-5)
	push af
	ld hl, 2
	push hl
	ld a, (ix-2)
	ld l, a
	dec hl
	push hl
	ld hl, _aliens
	call __ARRAY
	pop af
	ld (hl), a
	ld hl, 3
	push hl
	ld a, (ix-2)
	ld l, a
	dec hl
	push hl
	ld hl, _aliens
	call __ARRAY
	ld (hl), 255
	ld a, 1
	ld (_freezingShip), a
	jp __LABEL629
__LABEL634:
	ld a, (ix-1)
	ld (_freezingShip), a
	jp _UpdateShips__leave
__LABEL629:
	inc (ix-1)
__LABEL625:
	ld a, 4
	cp (ix-1)
	jp nc, __LABEL628
_UpdateShips__leave:
	ld sp, ix
	pop ix
	ret
_UpdateHangars:
	push ix
	ld ix, 0
	add ix, sp
	ld hl, 0
	push hl
	push hl
	push hl
	inc sp
	ld a, (_activeHangars)
	or a
	jp z, _UpdateHangars__leave
	ld a, (_freezingHangar)
	ld (ix-1), a
	jp __LABEL646
__LABEL649:
	ld a, (ix-1)
	ld l, a
	ld h, 0
	ex de, hl
	ld hl, _maskTable.__DATA__
	add hl, de
	dec hl
	ld a, (_activeHangars)
	and (hl)
	jp z, __LABEL650
	ld hl, 3
	push hl
	ld a, (ix-1)
	ld l, a
	dec hl
	push hl
	ld hl, _hangars
	call __ARRAY
	ld a, (hl)
	ld h, a
	xor a
	cp h
	jp nc, __LABEL653
	ld hl, 3
	push hl
	ld a, (ix-1)
	ld l, a
	dec hl
	push hl
	ld hl, _hangars
	call __ARRAY
	ld a, (hl)
	dec a
	push af
	ld hl, 3
	push hl
	ld a, (ix-1)
	ld l, a
	dec hl
	push hl
	ld hl, _hangars
	call __ARRAY
	pop af
	ld (hl), a
	jp __LABEL650
__LABEL653:
	ld a, (_bitTable.__DATA__ + 1)
	ld hl, (_activeTanks - 1)
	xor h
	jp z, __LABEL655
	ld hl, 3
	push hl
	ld a, (ix-1)
	ld l, a
	dec hl
	push hl
	ld hl, _hangars
	call __ARRAY
	ld (hl), 150
	ld hl, 0
	push hl
	ld a, (ix-1)
	ld l, a
	dec hl
	push hl
	ld hl, _hangars
	call __ARRAY
	ld a, (hl)
	ld (ix-2), a
	ld hl, 1
	push hl
	ld a, (ix-1)
	ld l, a
	dec hl
	push hl
	ld hl, _hangars
	call __ARRAY
	ld a, (hl)
	ld (ix-3), a
	ld hl, 2
	push hl
	ld a, (ix-1)
	ld l, a
	dec hl
	push hl
	ld hl, _hangars
	call __ARRAY
	ld a, (hl)
	ld (ix-4), a
	dec a
	jp nz, __LABEL657
	inc (ix-2)
	jp __LABEL658
__LABEL657:
	ld a, (ix-4)
	sub 2
	jp nz, __LABEL659
	inc (ix-3)
	jp __LABEL658
__LABEL659:
	ld a, (ix-4)
	sub 3
	jp nz, __LABEL661
	dec (ix-2)
	jp __LABEL658
__LABEL661:
	ld a, (ix-4)
	sub 4
	jp nz, __LABEL658
	dec (ix-3)
__LABEL658:
	ld a, (_activeTanks)
	call _FindEmptyBit
	ld (ix-5), a
	ld l, a
	ld h, 0
	ex de, hl
	ld hl, _maskTable.__DATA__
	add hl, de
	dec hl
	ld a, (_activeTanks)
	or (hl)
	ld (_activeTanks), a
	ld a, (ix-2)
	add a, a
	push af
	ld hl, 0
	push hl
	ld a, (ix-5)
	ld l, a
	dec hl
	push hl
	ld hl, _tanks
	call __ARRAY
	pop af
	ld (hl), a
	ld a, (ix-3)
	inc a
	add a, a
	push af
	ld hl, 1
	push hl
	ld a, (ix-5)
	ld l, a
	dec hl
	push hl
	ld hl, _tanks
	call __ARRAY
	pop af
	ld (hl), a
	ld a, (ix-4)
	push af
	ld hl, 2
	push hl
	ld a, (ix-5)
	ld l, a
	dec hl
	push hl
	ld hl, _tanks
	call __ARRAY
	pop af
	ld (hl), a
	ld hl, 3
	push hl
	ld a, (ix-5)
	ld l, a
	dec hl
	push hl
	ld hl, _tanks
	call __ARRAY
	ld (hl), 255
	ld a, 1
	ld (_freezingHangar), a
	jp __LABEL650
__LABEL655:
	ld a, (ix-1)
	ld (_freezingHangar), a
	jp _UpdateHangars__leave
__LABEL650:
	inc (ix-1)
__LABEL646:
	ld a, 2
	cp (ix-1)
	jp nc, __LABEL649
_UpdateHangars__leave:
	ld sp, ix
	pop ix
	ret
__LABEL109:
	DEFW 0001h
	DEFB 30h
__LABEL120:
	DEFW 0001h
	DEFB 3Ah
__LABEL121:
	DEFW 0006h
	DEFB 4Ch
	DEFB 45h
	DEFB 56h
	DEFB 45h
	DEFB 4Ch
	DEFB 3Ah
__LABEL122:
	DEFW 0006h
	DEFB 53h
	DEFB 43h
	DEFB 4Fh
	DEFB 52h
	DEFB 45h
	DEFB 3Ah
__LABEL123:
	DEFW 0004h
	DEFB 53h
	DEFB 41h
	DEFB 54h
	DEFB 3Ah
__LABEL151:
	DEFW 0007h
	DEFB 4Eh
	DEFB 4Fh
	DEFB 4Eh
	DEFB 45h
	DEFB 20h
	DEFB 20h
	DEFB 20h
__LABEL372:
	DEFW 0007h
	DEFB 42h
	DEFB 41h
	DEFB 52h
	DEFB 52h
	DEFB 49h
	DEFB 45h
	DEFB 52h
__LABEL375:
	DEFW 0007h
	DEFB 4Dh
	DEFB 49h
	DEFB 4Eh
	DEFB 45h
	DEFB 20h
	DEFB 20h
	DEFB 20h
__LABEL378:
	DEFW 0007h
	DEFB 42h
	DEFB 4Fh
	DEFB 4Dh
	DEFB 42h
	DEFB 20h
	DEFB 20h
	DEFB 20h
__LABEL381:
	DEFW 0007h
	DEFB 4Ch
	DEFB 41h
	DEFB 53h
	DEFB 45h
	DEFB 52h
	DEFB 20h
	DEFB 20h
	;; --- end of user code ---
#line 1 "C:/zxbasic/src/arch/zx48k/library-asm/array.asm"
; vim: ts=4:et:sw=4:
	; Copyleft (K) by Jose M. Rodriguez de la Rosa
	;  (a.k.a. Boriel)
;  http://www.boriel.com
	; -------------------------------------------------------------------
	; Simple array Index routine
	; Number of total indexes dimensions - 1 at beginning of memory
	; HL = Start of array memory (First two bytes contains N-1 dimensions)
	; Dimension values on the stack, (top of the stack, highest dimension)
	; E.g. A(2, 4) -> PUSH <4>; PUSH <2>

	; For any array of N dimension A(aN-1, ..., a1, a0)
	; and dimensions D[bN-1, ..., b1, b0], the offset is calculated as
	; O = [a0 + b0 * (a1 + b1 * (a2 + ... bN-2(aN-1)))]
; What I will do here is to calculate the following sequence:
	; ((aN-1 * bN-2) + aN-2) * bN-3 + ...


#line 1 "C:/zxbasic/src/arch/zx48k/library-asm/mul16.asm"
__MUL16:	; Mutiplies HL with the last value stored into de stack
				; Works for both signed and unsigned

			PROC

			LOCAL __MUL16LOOP
	        LOCAL __MUL16NOADD

			ex de, hl
			pop hl		; Return address
			ex (sp), hl ; CALLEE caller convention

__MUL16_FAST:
	        ld b, 16
	        ld a, h
	        ld c, l
	        ld hl, 0

__MUL16LOOP:
	        add hl, hl  ; hl << 1
	        sla c
	        rla         ; a,c << 1
	        jp nc, __MUL16NOADD
	        add hl, de

__MUL16NOADD:
	        djnz __MUL16LOOP

			ret	; Result in hl (16 lower bits)

			ENDP

#line 20 "C:/zxbasic/src/arch/zx48k/library-asm/array.asm"

#line 24 "C:/zxbasic/src/arch/zx48k/library-asm/array.asm"

__ARRAY_PTR:   ;; computes an array offset from a pointer
	    ld c, (hl)
	    inc hl
	    ld h, (hl)
	    ld l, c

__ARRAY:
		PROC

		LOCAL LOOP
		LOCAL ARRAY_END
		LOCAL RET_ADDRESS ; Stores return address
		LOCAL TMP_ARR_PTR ; Stores pointer temporarily

	    ld e, (hl)
	    inc hl
	    ld d, (hl)
	    inc hl
	    ld (TMP_ARR_PTR), hl
	    ex de, hl
		ex (sp), hl	; Return address in HL, array address in the stack
		ld (RET_ADDRESS + 1), hl ; Stores it for later

		exx
		pop hl		; Will use H'L' as the pointer
		ld c, (hl)	; Loads Number of dimensions from (hl)
		inc hl
		ld b, (hl)
		inc hl		; Ready
		exx

		ld hl, 0	; HL = Offset "accumulator"

LOOP:
#line 62 "C:/zxbasic/src/arch/zx48k/library-asm/array.asm"
		pop bc		; Get next index (Ai) from the stack

#line 72 "C:/zxbasic/src/arch/zx48k/library-asm/array.asm"

		add hl, bc	; Adds current index

		exx			; Checks if B'C' = 0
		ld a, b		; Which means we must exit (last element is not multiplied by anything)
		or c
		jr z, ARRAY_END		; if B'Ci == 0 we are done

		ld e, (hl)			; Loads next dimension into D'E'
		inc hl
		ld d, (hl)
		inc hl
		push de
		dec bc				; Decrements loop counter
		exx
		pop de				; DE = Max bound Number (i-th dimension)

	    call __FNMUL
		jp LOOP

ARRAY_END:
		ld a, (hl)
		exx

#line 101 "C:/zxbasic/src/arch/zx48k/library-asm/array.asm"
	    LOCAL ARRAY_SIZE_LOOP

	    ex de, hl
	    ld hl, 0
	    ld b, a
ARRAY_SIZE_LOOP:
	    add hl, de
	    djnz ARRAY_SIZE_LOOP

#line 111 "C:/zxbasic/src/arch/zx48k/library-asm/array.asm"

	    ex de, hl
		ld hl, (TMP_ARR_PTR)
		ld a, (hl)
		inc hl
		ld h, (hl)
		ld l, a
		add hl, de  ; Adds element start

RET_ADDRESS:
		jp 0

	    ;; Performs a faster multiply for little 16bit numbs
	    LOCAL __FNMUL, __FNMUL2

__FNMUL:
	    xor a
	    or h
	    jp nz, __MUL16_FAST
	    or l
	    ret z

	    cp 33
	    jp nc, __MUL16_FAST

	    ld b, l
	    ld l, h  ; HL = 0

__FNMUL2:
	    add hl, de
	    djnz __FNMUL2
	    ret

TMP_ARR_PTR:
	    DW 0  ; temporary storage for pointer to tables

		ENDP

#line 7498 "C:\Users\geniw\source\repos\BattleGrid\BattleGrid\ZxBasicFiles\BattleGrid.zxbas"
#line 1 "C:/zxbasic/src/arch/zx48k/library-asm/asc.asm"
	; Returns the ascii code for the given str
#line 1 "C:/zxbasic/src/arch/zx48k/library-asm/free.asm"
; vim: ts=4:et:sw=4:
	; Copyleft (K) by Jose M. Rodriguez de la Rosa
	;  (a.k.a. Boriel)
;  http://www.boriel.com
	;
	; This ASM library is licensed under the BSD license
	; you can use it for any purpose (even for commercial
	; closed source programs).
	;
	; Please read the BSD license on the internet

	; ----- IMPLEMENTATION NOTES ------
	; The heap is implemented as a linked list of free blocks.

; Each free block contains this info:
	;
	; +----------------+ <-- HEAP START
	; | Size (2 bytes) |
	; |        0       | <-- Size = 0 => DUMMY HEADER BLOCK
	; +----------------+
	; | Next (2 bytes) |---+
	; +----------------+ <-+
	; | Size (2 bytes) |
	; +----------------+
	; | Next (2 bytes) |---+
	; +----------------+   |
	; | <free bytes...>|   | <-- If Size > 4, then this contains (size - 4) bytes
	; | (0 if Size = 4)|   |
	; +----------------+ <-+
	; | Size (2 bytes) |
	; +----------------+
	; | Next (2 bytes) |---+
	; +----------------+   |
	; | <free bytes...>|   |
	; | (0 if Size = 4)|   |
	; +----------------+   |
	;   <Allocated>        | <-- This zone is in use (Already allocated)
	; +----------------+ <-+
	; | Size (2 bytes) |
	; +----------------+
	; | Next (2 bytes) |---+
	; +----------------+   |
	; | <free bytes...>|   |
	; | (0 if Size = 4)|   |
	; +----------------+ <-+
	; | Next (2 bytes) |--> NULL => END OF LIST
	; |    0 = NULL    |
	; +----------------+
	; | <free bytes...>|
	; | (0 if Size = 4)|
	; +----------------+


	; When a block is FREED, the previous and next pointers are examined to see
	; if we can defragment the heap. If the block to be breed is just next to the
	; previous, or to the next (or both) they will be converted into a single
	; block (so defragmented).


	;   MEMORY MANAGER
	;
	; This library must be initialized calling __MEM_INIT with
	; HL = BLOCK Start & DE = Length.

	; An init directive is useful for initialization routines.
	; They will be added automatically if needed.

#line 1 "C:/zxbasic/src/arch/zx48k/library-asm/heapinit.asm"
; vim: ts=4:et:sw=4:
	; Copyleft (K) by Jose M. Rodriguez de la Rosa
	;  (a.k.a. Boriel)
;  http://www.boriel.com
	;
	; This ASM library is licensed under the BSD license
	; you can use it for any purpose (even for commercial
	; closed source programs).
	;
	; Please read the BSD license on the internet

	; ----- IMPLEMENTATION NOTES ------
	; The heap is implemented as a linked list of free blocks.

; Each free block contains this info:
	;
	; +----------------+ <-- HEAP START
	; | Size (2 bytes) |
	; |        0       | <-- Size = 0 => DUMMY HEADER BLOCK
	; +----------------+
	; | Next (2 bytes) |---+
	; +----------------+ <-+
	; | Size (2 bytes) |
	; +----------------+
	; | Next (2 bytes) |---+
	; +----------------+   |
	; | <free bytes...>|   | <-- If Size > 4, then this contains (size - 4) bytes
	; | (0 if Size = 4)|   |
	; +----------------+ <-+
	; | Size (2 bytes) |
	; +----------------+
	; | Next (2 bytes) |---+
	; +----------------+   |
	; | <free bytes...>|   |
	; | (0 if Size = 4)|   |
	; +----------------+   |
	;   <Allocated>        | <-- This zone is in use (Already allocated)
	; +----------------+ <-+
	; | Size (2 bytes) |
	; +----------------+
	; | Next (2 bytes) |---+
	; +----------------+   |
	; | <free bytes...>|   |
	; | (0 if Size = 4)|   |
	; +----------------+ <-+
	; | Next (2 bytes) |--> NULL => END OF LIST
	; |    0 = NULL    |
	; +----------------+
	; | <free bytes...>|
	; | (0 if Size = 4)|
	; +----------------+


	; When a block is FREED, the previous and next pointers are examined to see
	; if we can defragment the heap. If the block to be breed is just next to the
	; previous, or to the next (or both) they will be converted into a single
	; block (so defragmented).


	;   MEMORY MANAGER
	;
	; This library must be initialized calling __MEM_INIT with
	; HL = BLOCK Start & DE = Length.

	; An init directive is useful for initialization routines.
	; They will be added automatically if needed.




	; ---------------------------------------------------------------------
	;  __MEM_INIT must be called to initalize this library with the
	; standard parameters
	; ---------------------------------------------------------------------
__MEM_INIT: ; Initializes the library using (RAMTOP) as start, and
	        ld hl, ZXBASIC_MEM_HEAP  ; Change this with other address of heap start
	        ld de, ZXBASIC_HEAP_SIZE ; Change this with your size

	; ---------------------------------------------------------------------
	;  __MEM_INIT2 initalizes this library
; Parameters:
;   HL : Memory address of 1st byte of the memory heap
;   DE : Length in bytes of the Memory Heap
	; ---------------------------------------------------------------------
__MEM_INIT2:
	        ; HL as TOP
	        PROC

	        dec de
	        dec de
	        dec de
	        dec de        ; DE = length - 4; HL = start
	        ; This is done, because we require 4 bytes for the empty dummy-header block

	        xor a
	        ld (hl), a
	        inc hl
        ld (hl), a ; First "free" block is a header: size=0, Pointer=&(Block) + 4
	        inc hl

	        ld b, h
	        ld c, l
	        inc bc
	        inc bc      ; BC = starts of next block

	        ld (hl), c
	        inc hl
	        ld (hl), b
	        inc hl      ; Pointer to next block

	        ld (hl), e
	        inc hl
	        ld (hl), d
	        inc hl      ; Block size (should be length - 4 at start); This block contains all the available memory

	        ld (hl), a ; NULL (0000h) ; No more blocks (a list with a single block)
	        inc hl
	        ld (hl), a

	        ld a, 201
	        ld (__MEM_INIT), a; "Pokes" with a RET so ensure this routine is not called again
	        ret

	        ENDP

#line 69 "C:/zxbasic/src/arch/zx48k/library-asm/free.asm"

	; ---------------------------------------------------------------------
	; MEM_FREE
	;  Frees a block of memory
	;
; Parameters:
	;  HL = Pointer to the block to be freed. If HL is NULL (0) nothing
	;  is done
	; ---------------------------------------------------------------------

MEM_FREE:
__MEM_FREE: ; Frees the block pointed by HL
	            ; HL DE BC & AF modified
	        PROC

	        LOCAL __MEM_LOOP2
	        LOCAL __MEM_LINK_PREV
	        LOCAL __MEM_JOIN_TEST
	        LOCAL __MEM_BLOCK_JOIN

	        ld a, h
	        or l
	        ret z       ; Return if NULL pointer

	        dec hl
	        dec hl
	        ld b, h
	        ld c, l    ; BC = Block pointer

	        ld hl, ZXBASIC_MEM_HEAP  ; This label point to the heap start

__MEM_LOOP2:
	        inc hl
	        inc hl     ; Next block ptr

	        ld e, (hl)
	        inc hl
	        ld d, (hl) ; Block next ptr
	        ex de, hl  ; DE = &(block->next); HL = block->next

	        ld a, h    ; HL == NULL?
	        or l
	        jp z, __MEM_LINK_PREV; if so, link with previous

	        or a       ; Clear carry flag
	        sbc hl, bc ; Carry if BC > HL => This block if before
	        add hl, bc ; Restores HL, preserving Carry flag
	        jp c, __MEM_LOOP2 ; This block is before. Keep searching PASS the block

	;------ At this point current HL is PAST BC, so we must link (DE) with BC, and HL in BC->next

__MEM_LINK_PREV:    ; Link (DE) with BC, and BC->next with HL
	        ex de, hl
	        push hl
	        dec hl

	        ld (hl), c
	        inc hl
	        ld (hl), b ; (DE) <- BC

	        ld h, b    ; HL <- BC (Free block ptr)
	        ld l, c
	        inc hl     ; Skip block length (2 bytes)
	        inc hl
	        ld (hl), e ; Block->next = DE
	        inc hl
	        ld (hl), d
	        ; --- LINKED ; HL = &(BC->next) + 2

	        call __MEM_JOIN_TEST
	        pop hl

__MEM_JOIN_TEST:   ; Checks for fragmented contiguous blocks and joins them
	                   ; hl = Ptr to current block + 2
	        ld d, (hl)
	        dec hl
	        ld e, (hl)
	        dec hl
	        ld b, (hl) ; Loads block length into BC
	        dec hl
	        ld c, (hl) ;

	        push hl    ; Saves it for later
	        add hl, bc ; Adds its length. If HL == DE now, it must be joined
	        or a
	        sbc hl, de ; If Z, then HL == DE => We must join
	        pop hl
	        ret nz

__MEM_BLOCK_JOIN:  ; Joins current block (pointed by HL) with next one (pointed by DE). HL->length already in BC
	        push hl    ; Saves it for later
	        ex de, hl

	        ld e, (hl) ; DE -> block->next->length
	        inc hl
	        ld d, (hl)
	        inc hl

	        ex de, hl  ; DE = &(block->next)
	        add hl, bc ; HL = Total Length

	        ld b, h
	        ld c, l    ; BC = Total Length

	        ex de, hl
	        ld e, (hl)
	        inc hl
	        ld d, (hl) ; DE = block->next

	        pop hl     ; Recovers Pointer to block
	        ld (hl), c
	        inc hl
	        ld (hl), b ; Length Saved
	        inc hl
	        ld (hl), e
	        inc hl
	        ld (hl), d ; Next saved
	        ret

	        ENDP

#line 3 "C:/zxbasic/src/arch/zx48k/library-asm/asc.asm"

__ASC:
		PROC
		LOCAL __ASC_END

		ex af, af'	; Saves free_mem flag

		ld a, h
		or l
		ret z		; NULL? return

		ld c, (hl)
		inc hl
		ld b, (hl)

		ld a, b
		or c
		jr z, __ASC_END		; No length? return

		inc hl
		ld a, (hl)
	    dec hl

__ASC_END:
		dec hl
		ex af, af'
		or a
		call nz, __MEM_FREE	; Free memory if needed

		ex af, af'	; Recover result

		ret
		ENDP
#line 7499 "C:\Users\geniw\source\repos\BattleGrid\BattleGrid\ZxBasicFiles\BattleGrid.zxbas"
#line 1 "C:/zxbasic/src/arch/zx48k/library-asm/border.asm"
	; __FASTCALL__ Routine to change de border
	; Parameter (color) specified in A register

	BORDER EQU 229Bh

	; Nothing to do! (Directly from the ZX Spectrum ROM)

#line 7500 "C:\Users\geniw\source\repos\BattleGrid\BattleGrid\ZxBasicFiles\BattleGrid.zxbas"
#line 1 "C:/zxbasic/src/arch/zx48k/library-asm/bright.asm"
	; Sets bright flag in ATTR_P permanently
; Parameter: Paper color in A register

#line 1 "C:/zxbasic/src/arch/zx48k/library-asm/const.asm"
	; Global constants

	P_FLAG	EQU 23697
	FLAGS2	EQU 23681
	ATTR_P	EQU 23693	; permanet ATTRIBUTES
	ATTR_T	EQU 23695	; temporary ATTRIBUTES
	CHARS	EQU 23606 ; Pointer to ROM/RAM Charset
	UDG	EQU 23675 ; Pointer to UDG Charset
	MEM0	EQU 5C92h ; Temporary memory buffer used by ROM chars

#line 5 "C:/zxbasic/src/arch/zx48k/library-asm/bright.asm"

BRIGHT:
		ld hl, ATTR_P

	    PROC
	    LOCAL IS_TR
	    LOCAL IS_ZERO

__SET_BRIGHT:
		; Another entry. This will set the bright flag at location pointer by DE
		cp 8
		jr z, IS_TR

		; # Convert to 0/1
		or a
		jr z, IS_ZERO
		ld a, 0x40

IS_ZERO:
		ld b, a	; Saves the color
		ld a, (hl)
		and 0BFh ; Clears previous value
		or b
		ld (hl), a
		inc hl
		res 6, (hl)  ;Reset bit 6 to disable transparency
		ret

IS_TR:  ; transparent
		inc hl ; Points DE to MASK_T or MASK_P
	    set 6, (hl)  ;Set bit 6 to enable transparency
		ret

	; Sets the BRIGHT flag passed in A register in the ATTR_T variable
BRIGHT_TMP:
		ld hl, ATTR_T
		jr __SET_BRIGHT
	    ENDP
#line 7501 "C:\Users\geniw\source\repos\BattleGrid\BattleGrid\ZxBasicFiles\BattleGrid.zxbas"
#line 1 "C:/zxbasic/src/arch/zx48k/library-asm/cls.asm"
	; JUMPS directly to spectrum CLS
	; This routine does not clear lower screen

	;CLS	EQU	0DAFh

	; Our faster implementation

#line 1 "C:/zxbasic/src/arch/zx48k/library-asm/sposn.asm"
	; Printing positioning library.
			PROC
			LOCAL ECHO_E

__LOAD_S_POSN:		; Loads into DE current ROW, COL print position from S_POSN mem var.
			ld de, (S_POSN)
			ld hl, (MAXX)
			or a
			sbc hl, de
			ex de, hl
			ret


__SAVE_S_POSN:		; Saves ROW, COL from DE into S_POSN mem var.
			ld hl, (MAXX)
			or a
			sbc hl, de
			ld (S_POSN), hl ; saves it again
			ret


	ECHO_E	EQU 23682
	MAXX	EQU ECHO_E   ; Max X position + 1
	MAXY	EQU MAXX + 1 ; Max Y position + 1

	S_POSN	EQU 23688
	POSX	EQU S_POSN		; Current POS X
	POSY	EQU S_POSN + 1	; Current POS Y

			ENDP

#line 9 "C:/zxbasic/src/arch/zx48k/library-asm/cls.asm"

CLS:
		PROC

		LOCAL COORDS
		LOCAL __CLS_SCR
		LOCAL ATTR_P
		LOCAL SCREEN

		ld hl, 0
		ld (COORDS), hl
	    ld hl, 1821h
		ld (S_POSN), hl
__CLS_SCR:
		ld hl, SCREEN
		ld (hl), 0
		ld d, h
		ld e, l
		inc de
		ld bc, 6144
		ldir

		; Now clear attributes

		ld a, (ATTR_P)
		ld (hl), a
		ld bc, 767
		ldir
		ret

	COORDS	EQU	23677
	SCREEN	EQU 16384 ; Default start of the screen (can be changed)
	ATTR_P	EQU 23693
	;you can poke (SCREEN_SCRADDR) to change CLS, DRAW & PRINTing address

	SCREEN_ADDR EQU (__CLS_SCR + 1) ; Address used by print and other screen routines
								    ; to get the start of the screen
		ENDP

#line 7502 "C:\Users\geniw\source\repos\BattleGrid\BattleGrid\ZxBasicFiles\BattleGrid.zxbas"
#line 1 "C:/zxbasic/src/arch/zx48k/library-asm/copy_attr.asm"

#line 1 "C:/zxbasic/src/arch/zx48k/library-asm/print.asm"
; vim:ts=4:sw=4:et:
; vim:ts=4:sw=4:et:
	; PRINT command routine
	; Does not print attribute. Use PRINT_STR or PRINT_NUM for that



#line 1 "C:/zxbasic/src/arch/zx48k/library-asm/in_screen.asm"

#line 1 "C:/zxbasic/src/arch/zx48k/library-asm/error.asm"
	; Simple error control routines
; vim:ts=4:et:

	ERR_NR    EQU    23610    ; Error code system variable


	; Error code definitions (as in ZX spectrum manual)

; Set error code with:
	;    ld a, ERROR_CODE
	;    ld (ERR_NR), a


	ERROR_Ok                EQU    -1
	ERROR_SubscriptWrong    EQU     2
	ERROR_OutOfMemory       EQU     3
	ERROR_OutOfScreen       EQU     4
	ERROR_NumberTooBig      EQU     5
	ERROR_InvalidArg        EQU     9
	ERROR_IntOutOfRange     EQU    10
	ERROR_NonsenseInBasic   EQU    11
	ERROR_InvalidFileName   EQU    14
	ERROR_InvalidColour     EQU    19
	ERROR_BreakIntoProgram  EQU    20
	ERROR_TapeLoadingErr    EQU    26


	; Raises error using RST #8
__ERROR:
	    ld (__ERROR_CODE), a
	    rst 8
__ERROR_CODE:
	    nop
	    ret

	; Sets the error system variable, but keeps running.
	; Usually this instruction if followed by the END intermediate instruction.
__STOP:
	    ld (ERR_NR), a
	    ret
#line 3 "C:/zxbasic/src/arch/zx48k/library-asm/in_screen.asm"

__IN_SCREEN:
		; Returns NO carry if current coords (D, E)
		; are OUT of the screen limits (MAXX, MAXY)

		PROC
		LOCAL __IN_SCREEN_ERR

		ld hl, MAXX
		ld a, e
		cp (hl)
		jr nc, __IN_SCREEN_ERR	; Do nothing and return if out of range

		ld a, d
		inc hl
		cp (hl)
		;; jr nc, __IN_SCREEN_ERR	; Do nothing and return if out of range
		;; ret
	    ret c                       ; Return if carry (OK)

__IN_SCREEN_ERR:
__OUT_OF_SCREEN_ERR:
		; Jumps here if out of screen
		ld a, ERROR_OutOfScreen
	    jp __STOP   ; Saves error code and exits

		ENDP
#line 9 "C:/zxbasic/src/arch/zx48k/library-asm/print.asm"
#line 1 "C:/zxbasic/src/arch/zx48k/library-asm/table_jump.asm"

JUMP_HL_PLUS_2A: ; Does JP (HL + A*2) Modifies DE. Modifies A
		add a, a

JUMP_HL_PLUS_A:	 ; Does JP (HL + A) Modifies DE
		ld e, a
		ld d, 0

JUMP_HL_PLUS_DE: ; Does JP (HL + DE)
		add hl, de
		ld e, (hl)
		inc hl
		ld d, (hl)
		ex de, hl
CALL_HL:
		jp (hl)

#line 10 "C:/zxbasic/src/arch/zx48k/library-asm/print.asm"
#line 1 "C:/zxbasic/src/arch/zx48k/library-asm/ink.asm"
	; Sets ink color in ATTR_P permanently
; Parameter: Paper color in A register



INK:
		PROC
		LOCAL __SET_INK
		LOCAL __SET_INK2

		ld de, ATTR_P

__SET_INK:
		cp 8
		jr nz, __SET_INK2

		inc de ; Points DE to MASK_T or MASK_P
		ld a, (de)
		or 7 ; Set bits 0,1,2 to enable transparency
		ld (de), a
		ret

__SET_INK2:
		; Another entry. This will set the ink color at location pointer by DE
		and 7	; # Gets color mod 8
		ld b, a	; Saves the color
		ld a, (de)
		and 0F8h ; Clears previous value
		or b
		ld (de), a
		inc de ; Points DE to MASK_T or MASK_P
		ld a, (de)
		and 0F8h ; Reset bits 0,1,2 sign to disable transparency
		ld (de), a ; Store new attr
		ret

	; Sets the INK color passed in A register in the ATTR_T variable
INK_TMP:
		ld de, ATTR_T
		jp __SET_INK

		ENDP

#line 11 "C:/zxbasic/src/arch/zx48k/library-asm/print.asm"
#line 1 "C:/zxbasic/src/arch/zx48k/library-asm/paper.asm"
	; Sets paper color in ATTR_P permanently
; Parameter: Paper color in A register



PAPER:
		PROC
		LOCAL __SET_PAPER
		LOCAL __SET_PAPER2

		ld de, ATTR_P

__SET_PAPER:
		cp 8
		jr nz, __SET_PAPER2
		inc de
		ld a, (de)
		or 038h
		ld (de), a
		ret

		; Another entry. This will set the paper color at location pointer by DE
__SET_PAPER2:
		and 7	; # Remove
		rlca
		rlca
		rlca		; a *= 8

		ld b, a	; Saves the color
		ld a, (de)
		and 0C7h ; Clears previous value
		or b
		ld (de), a
		inc de ; Points to MASK_T or MASK_P accordingly
		ld a, (de)
		and 0C7h  ; Resets bits 3,4,5
		ld (de), a
		ret


	; Sets the PAPER color passed in A register in the ATTR_T variable
PAPER_TMP:
		ld de, ATTR_T
		jp __SET_PAPER
		ENDP

#line 12 "C:/zxbasic/src/arch/zx48k/library-asm/print.asm"
#line 1 "C:/zxbasic/src/arch/zx48k/library-asm/flash.asm"
	; Sets flash flag in ATTR_P permanently
; Parameter: Paper color in A register



FLASH:
		ld hl, ATTR_P

	    PROC
	    LOCAL IS_TR
	    LOCAL IS_ZERO

__SET_FLASH:
		; Another entry. This will set the flash flag at location pointer by DE
		cp 8
		jr z, IS_TR

		; # Convert to 0/1
		or a
		jr z, IS_ZERO
		ld a, 0x80

IS_ZERO:
		ld b, a	; Saves the color
		ld a, (hl)
		and 07Fh ; Clears previous value
		or b
		ld (hl), a
		inc hl
		res 7, (hl)  ;Reset bit 7 to disable transparency
		ret

IS_TR:  ; transparent
		inc hl ; Points DE to MASK_T or MASK_P
		set 7, (hl)  ;Set bit 7 to enable transparency
		ret

	; Sets the FLASH flag passed in A register in the ATTR_T variable
FLASH_TMP:
		ld hl, ATTR_T
		jr __SET_FLASH
	    ENDP

#line 13 "C:/zxbasic/src/arch/zx48k/library-asm/print.asm"

#line 1 "C:/zxbasic/src/arch/zx48k/library-asm/over.asm"
	; Sets OVER flag in P_FLAG permanently
; Parameter: OVER flag in bit 0 of A register



OVER:
		PROC

		ld c, a ; saves it for later
		and 2
		ld hl, FLAGS2
		res 1, (HL)
		or (hl)
		ld (hl), a

		ld a, c	; Recovers previous value
		and 1	; # Convert to 0/1
		add a, a; # Shift left 1 bit for permanent

		ld hl, P_FLAG
		res 1, (hl)
		or (hl)
		ld (hl), a
		ret

	; Sets OVER flag in P_FLAG temporarily
OVER_TMP:
		ld c, a ; saves it for later
		and 2	; gets bit 1; clears carry
		rra
		ld hl, FLAGS2
		res 0, (hl)
		or (hl)
		ld (hl), a

		ld a, c	; Recovers previous value
		and 1
		ld hl, P_FLAG
		res 0, (hl)
	    or (hl)
		ld (hl), a
		jp __SET_ATTR_MODE

		ENDP

#line 15 "C:/zxbasic/src/arch/zx48k/library-asm/print.asm"
#line 1 "C:/zxbasic/src/arch/zx48k/library-asm/inverse.asm"
	; Sets INVERSE flag in P_FLAG permanently
; Parameter: INVERSE flag in bit 0 of A register



INVERSE:
		PROC

		and 1	; # Convert to 0/1
		add a, a; # Shift left 3 bits for permanent
		add a, a
		add a, a
		ld hl, P_FLAG
		res 3, (hl)
		or (hl)
		ld (hl), a
		ret

	; Sets INVERSE flag in P_FLAG temporarily
INVERSE_TMP:
		and 1
		add a, a
		add a, a; # Shift left 2 bits for temporary
		ld hl, P_FLAG
		res 2, (hl)
		or (hl)
		ld (hl), a
		jp __SET_ATTR_MODE

		ENDP

#line 16 "C:/zxbasic/src/arch/zx48k/library-asm/print.asm"
#line 1 "C:/zxbasic/src/arch/zx48k/library-asm/bold.asm"
	; Sets BOLD flag in P_FLAG permanently
; Parameter: BOLD flag in bit 0 of A register


BOLD:
		PROC

		and 1
		rlca
	    rlca
	    rlca
		ld hl, FLAGS2
		res 3, (HL)
		or (hl)
		ld (hl), a
		ret

	; Sets BOLD flag in P_FLAG temporarily
BOLD_TMP:
		and 1
		rlca
		rlca
		ld hl, FLAGS2
		res 2, (hl)
		or (hl)
		ld (hl), a
		ret

		ENDP

#line 17 "C:/zxbasic/src/arch/zx48k/library-asm/print.asm"
#line 1 "C:/zxbasic/src/arch/zx48k/library-asm/italic.asm"
	; Sets ITALIC flag in P_FLAG permanently
; Parameter: ITALIC flag in bit 0 of A register


ITALIC:
		PROC

		and 1
	    rrca
	    rrca
	    rrca
		ld hl, FLAGS2
		res 5, (HL)
		or (hl)
		ld (hl), a
		ret

	; Sets ITALIC flag in P_FLAG temporarily
ITALIC_TMP:
		and 1
		rrca
		rrca
		rrca
		rrca
		ld hl, FLAGS2
		res 4, (hl)
		or (hl)
		ld (hl), a
		ret

		ENDP

#line 18 "C:/zxbasic/src/arch/zx48k/library-asm/print.asm"

#line 1 "C:/zxbasic/src/arch/zx48k/library-asm/attr.asm"
	; Attribute routines
; vim:ts=4:et:sw:







__ATTR_ADDR:
	    ; calc start address in DE (as (32 * d) + e)
    ; Contributed by Santiago Romero at http://www.speccy.org
	    ld h, 0                     ;  7 T-States
	    ld a, d                     ;  4 T-States
	    add a, a     ; a * 2        ;  4 T-States
	    add a, a     ; a * 4        ;  4 T-States
	    ld l, a      ; HL = A * 4   ;  4 T-States

	    add hl, hl   ; HL = A * 8   ; 15 T-States
	    add hl, hl   ; HL = A * 16  ; 15 T-States
	    add hl, hl   ; HL = A * 32  ; 15 T-States

    ld d, 18h ; DE = 6144 + E. Note: 6144 is the screen size (before attr zone)
	    add hl, de

	    ld de, (SCREEN_ADDR)    ; Adds the screen address
	    add hl, de

	    ; Return current screen address in HL
	    ret


	; Sets the attribute at a given screen coordinate (D, E).
	; The attribute is taken from the ATTR_T memory variable
	; Used by PRINT routines
SET_ATTR:

	    ; Checks for valid coords
	    call __IN_SCREEN
	    ret nc

__SET_ATTR:
	    ; Internal __FASTCALL__ Entry used by printing routines
	    PROC

	    call __ATTR_ADDR

__SET_ATTR2:  ; Sets attr from ATTR_T to (HL) which points to the scr address
	    ld de, (ATTR_T)    ; E = ATTR_T, D = MASK_T

	    ld a, d
	    and (hl)
	    ld c, a    ; C = current screen color, masked

	    ld a, d
	    cpl        ; Negate mask
	    and e    ; Mask current attributes
	    or c    ; Mix them
	    ld (hl), a ; Store result in screen

	    ret

	    ENDP


	; Sets the attribute at a given screen pixel address in hl
	; HL contains the address in RAM for a given pixel (not a coordinate)
SET_PIXEL_ADDR_ATTR:
	    ;; gets ATTR position with offset given in SCREEN_ADDR
	    ld a, h
	    rrca
	    rrca
	    rrca
	    and 3
	    or 18h
	    ld h, a
	    ld de, (SCREEN_ADDR)
	    add hl, de  ;; Final screen addr
	    jp __SET_ATTR2
#line 20 "C:/zxbasic/src/arch/zx48k/library-asm/print.asm"

	; Putting a comment starting with @INIT <address>
	; will make the compiler to add a CALL to <address>
	; It is useful for initialization routines.


__PRINT_INIT: ; To be called before program starts (initializes library)
	        PROC

	        ld hl, __PRINT_START
	        ld (PRINT_JUMP_STATE), hl

	        ld hl, 1821h
	        ld (MAXX), hl  ; Sets current maxX and maxY

	        xor a
	        ld (FLAGS2), a

	        ret


__PRINTCHAR: ; Print character store in accumulator (A register)
	             ; Modifies H'L', B'C', A'F', D'E', A

	        LOCAL PO_GR_1

	        LOCAL __PRCHAR
	        LOCAL __PRINT_CONT
	        LOCAL __PRINT_CONT2
	        LOCAL __PRINT_JUMP
	        LOCAL __SRCADDR
	        LOCAL __PRINT_UDG
	        LOCAL __PRGRAPH
	        LOCAL __PRINT_START
	        LOCAL __ROM_SCROLL_SCR
	        LOCAL __TVFLAGS

	        __ROM_SCROLL_SCR EQU 0DFEh
	        __TVFLAGS EQU 5C3Ch

	PRINT_JUMP_STATE EQU __PRINT_JUMP + 1

__PRINT_JUMP:
	        jp __PRINT_START    ; Where to jump. If we print 22 (AT), next two calls jumps to AT1 and AT2 respectively


	        LOCAL __SCROLL
__SCROLL:  ; Scroll?
	        ld hl, __TVFLAGS
	        bit 1, (hl)
	        ret z
	        call __ROM_SCROLL_SCR
	        ld hl, __TVFLAGS
	        res 1, (hl)
	        ret
#line 76 "C:/zxbasic/src/arch/zx48k/library-asm/print.asm"

__PRINT_START:
	        cp ' '
	        jp c, __PRINT_SPECIAL    ; Characters below ' ' are special ones

	        exx               ; Switch to alternative registers
	        ex af, af'        ; Saves a value (char to print) for later


	        call __SCROLL
#line 87 "C:/zxbasic/src/arch/zx48k/library-asm/print.asm"
	        call __LOAD_S_POSN

	; At this point we have the new coord
	        ld hl, (SCREEN_ADDR)

	        ld a, d
	        ld c, a     ; Saves it for later

	        and 0F8h    ; Masks 3 lower bit ; zy
	        ld d, a

	        ld a, c     ; Recovers it
	        and 07h     ; MOD 7 ; y1
	        rrca
	        rrca
	        rrca

	        or e
	        ld e, a
	        add hl, de    ; HL = Screen address + DE
	        ex de, hl     ; DE = Screen address

	        ex af, af'

	        cp 80h    ; Is it an UDG or a ?
	        jp c, __SRCADDR

	        cp 90h
	        jp nc, __PRINT_UDG

	        ; Print a 8 bit pattern (80h to 8Fh)

	        ld b, a
	        call PO_GR_1 ; This ROM routine will generate the bit pattern at MEM0
	        ld hl, MEM0
	        jp __PRGRAPH

	PO_GR_1 EQU 0B38h

__PRINT_UDG:
	        sub 90h ; Sub ASC code
	        ld bc, (UDG)
	        jp __PRGRAPH0

	__SOURCEADDR EQU (__SRCADDR + 1)    ; Address of the pointer to chars source
__SRCADDR:
	        ld bc, (CHARS)

__PRGRAPH0:
        add a, a   ; A = a * 2 (since a < 80h) ; Thanks to Metalbrain at http://foro.speccy.org
	        ld l, a
	        ld h, 0    ; HL = a * 2 (accumulator)
	        add hl, hl
	        add hl, hl ; HL = a * 8
	        add hl, bc ; HL = CHARS address

__PRGRAPH:
	        ex de, hl  ; HL = Write Address, DE = CHARS address
	        bit 2, (iy + $47)
	        call nz, __BOLD
	        bit 4, (iy + $47)
	        call nz, __ITALIC
	        ld b, 8 ; 8 bytes per char
__PRCHAR:
	        ld a, (de) ; DE *must* be ALWAYS source, and HL destiny

PRINT_MODE:     ; Which operation is used to write on the screen
                ; Set it with:
	                ; LD A, <OPERATION>
	                ; LD (PRINT_MODE), A
	                ;
                ; Available opertions:
                ; NORMAL : 0h  --> NOP         ; OVER 0
                ; XOR    : AEh --> XOR (HL)    ; OVER 1
                ; OR     : B6h --> OR (HL)     ; PUTSPRITE
                ; AND    : A6h --> AND (HL)    ; PUTMASK
	        nop     ;

INVERSE_MODE:   ; 00 -> NOP -> INVERSE 0
	        nop     ; 2F -> CPL -> INVERSE 1

	        ld (hl), a

	        inc de
	        inc h     ; Next line
	        djnz __PRCHAR

	        call __LOAD_S_POSN
	        push de
	        call __SET_ATTR
	        pop de
	        inc e            ; COL = COL + 1
	        ld hl, (MAXX)
	        ld a, e
	        dec l            ; l = MAXX
	        cp l             ; Lower than max?
	        jp nc, __PRINT_EOL1

__PRINT_CONT:
	        call __SAVE_S_POSN

__PRINT_CONT2:
	        exx
	        ret

	; ------------- SPECIAL CHARS (< 32) -----------------

__PRINT_SPECIAL:    ; Jumps here if it is a special char
	        exx
	        ld hl, __PRINT_TABLE
	        jp JUMP_HL_PLUS_2A


PRINT_EOL:        ; Called WHENEVER there is no ";" at end of PRINT sentence
	        exx

__PRINT_0Dh:        ; Called WHEN printing CHR$(13)

	        call __SCROLL
#line 207 "C:/zxbasic/src/arch/zx48k/library-asm/print.asm"
	        call __LOAD_S_POSN

__PRINT_EOL1:        ; Another entry called from PRINT when next line required
	        ld e, 0

__PRINT_EOL2:
	        ld a, d
	        inc a

__PRINT_AT1_END:
	        ld hl, (MAXY)
	        cp l
	        jr c, __PRINT_EOL_END    ; Carry if (MAXY) < d

	        ld hl, __TVFLAGS
	        set 1, (hl)
	        dec a
#line 227 "C:/zxbasic/src/arch/zx48k/library-asm/print.asm"

__PRINT_EOL_END:
	        ld d, a

__PRINT_AT2_END:
	        call __SAVE_S_POSN
	        exx
	        ret

__PRINT_COM:
	        exx
	        push hl
	        push de
	        push bc
	        call PRINT_COMMA
	        pop bc
	        pop de
	        pop hl
	        ret

__PRINT_TAB:
	        ld hl, __PRINT_TAB1
	        jr __PRINT_SET_STATE

__PRINT_TAB1:
	        ld (MEM0), a
	        exx
	        ld hl, __PRINT_TAB2
	        jr __PRINT_SET_STATE

__PRINT_TAB2:
	        ld a, (MEM0)        ; Load tab code (ignore the current one)
	        push hl
	        push de
	        push bc
	        ld hl, __PRINT_START
	        ld (PRINT_JUMP_STATE), hl
	        call PRINT_TAB
	        pop bc
	        pop de
	        pop hl
	        ret

__PRINT_NOP:
__PRINT_RESTART:
	        ld hl, __PRINT_START
	        jr __PRINT_SET_STATE

__PRINT_AT:
	        ld hl, __PRINT_AT1

__PRINT_SET_STATE:
	        ld (PRINT_JUMP_STATE), hl    ; Saves next entry call
	        exx
	        ret

__PRINT_AT1:    ; Jumps here if waiting for 1st parameter
	        exx
	        ld hl, __PRINT_AT2
	        ld (PRINT_JUMP_STATE), hl    ; Saves next entry call
	        call __LOAD_S_POSN
	        jr __PRINT_AT1_END

__PRINT_AT2:
	        exx
	        ld hl, __PRINT_START
	        ld (PRINT_JUMP_STATE), hl    ; Saves next entry call
	        call __LOAD_S_POSN
	        ld e, a
	        ld hl, (MAXX)
	        cp l
	        jr c, __PRINT_AT2_END
	        jr __PRINT_EOL1

__PRINT_DEL:
	        call __LOAD_S_POSN        ; Gets current screen position
	        dec e
	        ld a, -1
	        cp e
	        jp nz, __PRINT_AT2_END
	        ld hl, (MAXX)
	        ld e, l
	        dec e
	        dec e
	        dec d
	        cp d
	        jp nz, __PRINT_AT2_END
	        ld d, h
	        dec d
	        jp __PRINT_AT2_END

__PRINT_INK:
	        ld hl, __PRINT_INK2
	        jp __PRINT_SET_STATE

__PRINT_INK2:
	        exx
	        call INK_TMP
	        jp __PRINT_RESTART

__PRINT_PAP:
	        ld hl, __PRINT_PAP2
	        jp __PRINT_SET_STATE

__PRINT_PAP2:
	        exx
	        call PAPER_TMP
	        jp __PRINT_RESTART

__PRINT_FLA:
	        ld hl, __PRINT_FLA2
	        jp __PRINT_SET_STATE

__PRINT_FLA2:
	        exx
	        call FLASH_TMP
	        jp __PRINT_RESTART

__PRINT_BRI:
	        ld hl, __PRINT_BRI2
	        jp __PRINT_SET_STATE

__PRINT_BRI2:
	        exx
	        call BRIGHT_TMP
	        jp __PRINT_RESTART

__PRINT_INV:
	        ld hl, __PRINT_INV2
	        jp __PRINT_SET_STATE

__PRINT_INV2:
	        exx
	        call INVERSE_TMP
	        jp __PRINT_RESTART

__PRINT_OVR:
	        ld hl, __PRINT_OVR2
	        jp __PRINT_SET_STATE

__PRINT_OVR2:
	        exx
	        call OVER_TMP
	        jp __PRINT_RESTART

__PRINT_BOLD:
	        ld hl, __PRINT_BOLD2
	        jp __PRINT_SET_STATE

__PRINT_BOLD2:
	        exx
	        call BOLD_TMP
	        jp __PRINT_RESTART

__PRINT_ITA:
	        ld hl, __PRINT_ITA2
	        jp __PRINT_SET_STATE

__PRINT_ITA2:
	        exx
	        call ITALIC_TMP
	        jp __PRINT_RESTART


__BOLD:
	        push hl
	        ld hl, MEM0
	        ld b, 8
__BOLD_LOOP:
	        ld a, (de)
	        ld c, a
	        rlca
	        or c
	        ld (hl), a
	        inc hl
	        inc de
	        djnz __BOLD_LOOP
	        pop hl
	        ld de, MEM0
	        ret


__ITALIC:
	        push hl
	        ld hl, MEM0
	        ex de, hl
	        ld bc, 8
	        ldir
	        ld hl, MEM0
	        srl (hl)
	        inc hl
	        srl (hl)
	        inc hl
	        srl (hl)
	        inc hl
	        inc hl
	        inc hl
	        sla (hl)
	        inc hl
	        sla (hl)
	        inc hl
	        sla (hl)
	        pop hl
	        ld de, MEM0
	        ret

PRINT_COMMA:
	        call __LOAD_S_POSN
	        ld a, e
	        and 16
	        add a, 16

PRINT_TAB:
	        PROC
	        LOCAL LOOP, CONTINUE

	        inc a
	        call __LOAD_S_POSN ; e = current row
	        ld d, a
	        ld a, e
	        cp 21h
	        jr nz, CONTINUE
	        ld e, -1
CONTINUE:
	        ld a, d
	        inc e
	        sub e  ; A = A - E
	        and 31 ;
	        ret z  ; Already at position E
	        ld b, a
LOOP:
	        ld a, ' '
	        push bc
	        exx
	        call __PRINTCHAR
	        exx
	        pop bc
	        djnz LOOP
	        ret
	        ENDP

PRINT_AT: ; Changes cursor to ROW, COL
	         ; COL in A register
	         ; ROW in stack

	        pop hl    ; Ret address
	        ex (sp), hl ; callee H = ROW
	        ld l, a
	        ex de, hl

	        call __IN_SCREEN
	        ret nc    ; Return if out of screen

	        ld hl, __TVFLAGS
	        res 1, (hl)
#line 483 "C:/zxbasic/src/arch/zx48k/library-asm/print.asm"
	        jp __SAVE_S_POSN

	        LOCAL __PRINT_COM
	        LOCAL __BOLD
	        LOCAL __BOLD_LOOP
	        LOCAL __ITALIC
	        LOCAL __PRINT_EOL1
	        LOCAL __PRINT_EOL2
	        LOCAL __PRINT_AT1
	        LOCAL __PRINT_AT2
	        LOCAL __PRINT_AT2_END
	        LOCAL __PRINT_BOLD
	        LOCAL __PRINT_BOLD2
	        LOCAL __PRINT_ITA
	        LOCAL __PRINT_ITA2
	        LOCAL __PRINT_INK
	        LOCAL __PRINT_PAP
	        LOCAL __PRINT_SET_STATE
	        LOCAL __PRINT_TABLE
	        LOCAL __PRINT_TAB, __PRINT_TAB1, __PRINT_TAB2

__PRINT_TABLE:    ; Jump table for 0 .. 22 codes

	        DW __PRINT_NOP    ;  0
	        DW __PRINT_NOP    ;  1
	        DW __PRINT_NOP    ;  2
	        DW __PRINT_NOP    ;  3
	        DW __PRINT_NOP    ;  4
	        DW __PRINT_NOP    ;  5
	        DW __PRINT_COM    ;  6 COMMA
	        DW __PRINT_NOP    ;  7
	        DW __PRINT_DEL    ;  8 DEL
	        DW __PRINT_NOP    ;  9
	        DW __PRINT_NOP    ; 10
	        DW __PRINT_NOP    ; 11
	        DW __PRINT_NOP    ; 12
	        DW __PRINT_0Dh    ; 13
	        DW __PRINT_BOLD   ; 14
	        DW __PRINT_ITA    ; 15
	        DW __PRINT_INK    ; 16
	        DW __PRINT_PAP    ; 17
	        DW __PRINT_FLA    ; 18
	        DW __PRINT_BRI    ; 19
	        DW __PRINT_INV    ; 20
	        DW __PRINT_OVR    ; 21
	        DW __PRINT_AT     ; 22 AT
	        DW __PRINT_TAB    ; 23 TAB

	        ENDP


#line 3 "C:/zxbasic/src/arch/zx48k/library-asm/copy_attr.asm"
#line 4 "C:/zxbasic/src/arch/zx48k/library-asm/copy_attr.asm"



COPY_ATTR:
		; Just copies current permanent attribs into temporal attribs
		; and sets print mode
		PROC

		LOCAL INVERSE1
		LOCAL __REFRESH_TMP

	INVERSE1 EQU 02Fh

		ld hl, (ATTR_P)
		ld (ATTR_T), hl

		ld hl, FLAGS2
		call __REFRESH_TMP

		ld hl, P_FLAG
		call __REFRESH_TMP


__SET_ATTR_MODE:		; Another entry to set print modes. A contains (P_FLAG)


		LOCAL TABLE
		LOCAL CONT2

		rra					; Over bit to carry
		ld a, (FLAGS2)
		rla					; Over bit in bit 1, Over2 bit in bit 2
		and 3				; Only bit 0 and 1 (OVER flag)

		ld c, a
		ld b, 0

		ld hl, TABLE
		add hl, bc
		ld a, (hl)
		ld (PRINT_MODE), a

		ld hl, (P_FLAG)
		xor a			; NOP -> INVERSE0
		bit 2, l
		jr z, CONT2
		ld a, INVERSE1 	; CPL -> INVERSE1

CONT2:
		ld (INVERSE_MODE), a
		ret

TABLE:
		nop				; NORMAL MODE
		xor (hl)		; OVER 1 MODE
		and (hl)		; OVER 2 MODE
		or  (hl)		; OVER 3 MODE

#line 65 "C:/zxbasic/src/arch/zx48k/library-asm/copy_attr.asm"

__REFRESH_TMP:
		ld a, (hl)
		and 10101010b
		ld c, a
		rra
		or c
		ld (hl), a
		ret

		ENDP

#line 7503 "C:\Users\geniw\source\repos\BattleGrid\BattleGrid\ZxBasicFiles\BattleGrid.zxbas"


#line 1 "C:/zxbasic/src/arch/zx48k/library-asm/lei8.asm"
__LEI8: ; Signed <= comparison for 8bit int
	        ; A <= H (registers)
	    PROC
	    LOCAL checkParity
	    sub h
	    jr nz, __LTI
	    inc a
	    ret

__LTI8:  ; Test 8 bit values A < H
	    sub h

__LTI:   ; Generic signed comparison
	    jp po, checkParity
	    xor 0x80
checkParity:
	    ld a, 0     ; False
	    ret p
	    inc a       ; True
	    ret
	    ENDP
#line 7506 "C:\Users\geniw\source\repos\BattleGrid\BattleGrid\ZxBasicFiles\BattleGrid.zxbas"
#line 1 "C:/zxbasic/src/arch/zx48k/library-asm/lti8.asm"

#line 7507 "C:\Users\geniw\source\repos\BattleGrid\BattleGrid\ZxBasicFiles\BattleGrid.zxbas"



#line 1 "C:/zxbasic/src/arch/zx48k/library-asm/printstr.asm"





	; PRINT command routine
	; Prints string pointed by HL

PRINT_STR:
__PRINTSTR:		; __FASTCALL__ Entry to print_string
			PROC
			LOCAL __PRINT_STR_LOOP
	        LOCAL __PRINT_STR_END

	        ld d, a ; Saves A reg (Flag) for later

			ld a, h
			or l
			ret z	; Return if the pointer is NULL

	        push hl

			ld c, (hl)
			inc hl
			ld b, (hl)
			inc hl	; BC = LEN(a$); HL = &a$

__PRINT_STR_LOOP:
			ld a, b
			or c
			jr z, __PRINT_STR_END 	; END if BC (counter = 0)

			ld a, (hl)
			call __PRINTCHAR
			inc hl
			dec bc
			jp __PRINT_STR_LOOP

__PRINT_STR_END:
	        pop hl
	        ld a, d ; Recovers A flag
	        or a   ; If not 0 this is a temporary string. Free it
	        ret z
	        jp __MEM_FREE ; Frees str from heap and return from there

__PRINT_STR:
	        ; Fastcall Entry
	        ; It ONLY prints strings
	        ; HL = String start
	        ; BC = String length (Number of chars)
	        push hl ; Push str address for later
	        ld d, a ; Saves a FLAG
	        jp __PRINT_STR_LOOP

			ENDP

#line 7511 "C:\Users\geniw\source\repos\BattleGrid\BattleGrid\ZxBasicFiles\BattleGrid.zxbas"
#line 1 "C:/zxbasic/src/arch/zx48k/library-asm/pstorestr2.asm"
; vim:ts=4:et:sw=4
	;
	; Stores an string (pointer to the HEAP by DE) into the address pointed
	; by (IX + BC). No new copy of the string is created into the HEAP, since
	; it's supposed it's already created (temporary string)
	;

#line 1 "C:/zxbasic/src/arch/zx48k/library-asm/storestr2.asm"
	; Similar to __STORE_STR, but this one is called when
	; the value of B$ if already duplicated onto the stack.
	; So we needn't call STRASSING to create a duplication
	; HL = address of string memory variable
	; DE = address of 2n string. It just copies DE into (HL)
	; 	freeing (HL) previously.



__PISTORE_STR2: ; Indirect store temporary string at (IX + BC)
	    push ix
	    pop hl
	    add hl, bc

__ISTORE_STR2:
		ld c, (hl)  ; Dereferences HL
		inc hl
		ld h, (hl)
		ld l, c		; HL = *HL (real string variable address)

__STORE_STR2:
		push hl
		ld c, (hl)
		inc hl
		ld h, (hl)
		ld l, c		; HL = *HL (real string address)

		push de
		call __MEM_FREE
		pop de

		pop hl
		ld (hl), e
		inc hl
		ld (hl), d
		dec hl		; HL points to mem address variable. This might be useful in the future.

		ret

#line 9 "C:/zxbasic/src/arch/zx48k/library-asm/pstorestr2.asm"

__PSTORE_STR2:
	    push ix
	    pop hl
	    add hl, bc
	    jp __STORE_STR2

#line 7512 "C:\Users\geniw\source\repos\BattleGrid\BattleGrid\ZxBasicFiles\BattleGrid.zxbas"
#line 1 "C:/zxbasic/src/arch/zx48k/library-asm/str.asm"
	; The STR$( ) BASIC function implementation

	; Given a FP number in C ED LH
	; Returns a pointer (in HL) to the memory heap
	; containing the FP number string representation

#line 1 "C:/zxbasic/src/arch/zx48k/library-asm/alloc.asm"
; vim: ts=4:et:sw=4:
	; Copyleft (K) by Jose M. Rodriguez de la Rosa
	;  (a.k.a. Boriel)
;  http://www.boriel.com
	;
	; This ASM library is licensed under the MIT license
	; you can use it for any purpose (even for commercial
	; closed source programs).
	;
	; Please read the MIT license on the internet

	; ----- IMPLEMENTATION NOTES ------
	; The heap is implemented as a linked list of free blocks.

; Each free block contains this info:
	;
	; +----------------+ <-- HEAP START
	; | Size (2 bytes) |
	; |        0       | <-- Size = 0 => DUMMY HEADER BLOCK
	; +----------------+
	; | Next (2 bytes) |---+
	; +----------------+ <-+
	; | Size (2 bytes) |
	; +----------------+
	; | Next (2 bytes) |---+
	; +----------------+   |
	; | <free bytes...>|   | <-- If Size > 4, then this contains (size - 4) bytes
	; | (0 if Size = 4)|   |
	; +----------------+ <-+
	; | Size (2 bytes) |
	; +----------------+
	; | Next (2 bytes) |---+
	; +----------------+   |
	; | <free bytes...>|   |
	; | (0 if Size = 4)|   |
	; +----------------+   |
	;   <Allocated>        | <-- This zone is in use (Already allocated)
	; +----------------+ <-+
	; | Size (2 bytes) |
	; +----------------+
	; | Next (2 bytes) |---+
	; +----------------+   |
	; | <free bytes...>|   |
	; | (0 if Size = 4)|   |
	; +----------------+ <-+
	; | Next (2 bytes) |--> NULL => END OF LIST
	; |    0 = NULL    |
	; +----------------+
	; | <free bytes...>|
	; | (0 if Size = 4)|
	; +----------------+


	; When a block is FREED, the previous and next pointers are examined to see
	; if we can defragment the heap. If the block to be freed is just next to the
	; previous, or to the next (or both) they will be converted into a single
	; block (so defragmented).


	;   MEMORY MANAGER
	;
	; This library must be initialized calling __MEM_INIT with
	; HL = BLOCK Start & DE = Length.

	; An init directive is useful for initialization routines.
	; They will be added automatically if needed.





	; ---------------------------------------------------------------------
	; MEM_ALLOC
	;  Allocates a block of memory in the heap.
	;
	; Parameters
	;  BC = Length of requested memory block
	;
; Returns:
	;  HL = Pointer to the allocated block in memory. Returns 0 (NULL)
	;       if the block could not be allocated (out of memory)
	; ---------------------------------------------------------------------

MEM_ALLOC:
__MEM_ALLOC: ; Returns the 1st free block found of the given length (in BC)
	        PROC

	        LOCAL __MEM_LOOP
	        LOCAL __MEM_DONE
	        LOCAL __MEM_SUBTRACT
	        LOCAL __MEM_START
	        LOCAL TEMP, TEMP0

	TEMP EQU TEMP0 + 1

	        ld hl, 0
	        ld (TEMP), hl

__MEM_START:
	        ld hl, ZXBASIC_MEM_HEAP  ; This label point to the heap start
	        inc bc
	        inc bc  ; BC = BC + 2 ; block size needs 2 extra bytes for hidden pointer

__MEM_LOOP:  ; Loads lengh at (HL, HL+). If Lenght >= BC, jump to __MEM_DONE
	        ld a, h ;  HL = NULL (No memory available?)
	        or l
#line 111 "C:/zxbasic/src/arch/zx48k/library-asm/alloc.asm"
	        ret z ; NULL
#line 113 "C:/zxbasic/src/arch/zx48k/library-asm/alloc.asm"
	        ; HL = Pointer to Free block
	        ld e, (hl)
	        inc hl
	        ld d, (hl)
	        inc hl          ; DE = Block Length

	        push hl         ; HL = *pointer to -> next block
	        ex de, hl
	        or a            ; CF = 0
	        sbc hl, bc      ; FREE >= BC (Length)  (HL = BlockLength - Length)
	        jp nc, __MEM_DONE
	        pop hl
	        ld (TEMP), hl

	        ex de, hl
	        ld e, (hl)
	        inc hl
	        ld d, (hl)
	        ex de, hl
	        jp __MEM_LOOP

__MEM_DONE:  ; A free block has been found.
	             ; Check if at least 4 bytes remains free (HL >= 4)
	        push hl
	        exx  ; exx to preserve bc
	        pop hl
	        ld bc, 4
	        or a
	        sbc hl, bc
	        exx
	        jp nc, __MEM_SUBTRACT
	        ; At this point...
	        ; less than 4 bytes remains free. So we return this block entirely
	        ; We must link the previous block with the next to this one
	        ; (DE) => Pointer to next block
	        ; (TEMP) => &(previous->next)
	        pop hl     ; Discard current block pointer
	        push de
	        ex de, hl  ; DE = Previous block pointer; (HL) = Next block pointer
	        ld a, (hl)
	        inc hl
	        ld h, (hl)
	        ld l, a    ; HL = (HL)
	        ex de, hl  ; HL = Previous block pointer; DE = Next block pointer
TEMP0:
	        ld hl, 0   ; Pre-previous block pointer

	        ld (hl), e
	        inc hl
	        ld (hl), d ; LINKED
	        pop hl ; Returning block.

	        ret

__MEM_SUBTRACT:
	        ; At this point we have to store HL value (Length - BC) into (DE - 2)
	        ex de, hl
	        dec hl
	        ld (hl), d
	        dec hl
	        ld (hl), e ; Store new block length

	        add hl, de ; New length + DE => free-block start
	        pop de     ; Remove previous HL off the stack

	        ld (hl), c ; Store length on its 1st word
	        inc hl
	        ld (hl), b
	        inc hl     ; Return hl
	        ret

	        ENDP

#line 8 "C:/zxbasic/src/arch/zx48k/library-asm/str.asm"
#line 1 "C:/zxbasic/src/arch/zx48k/library-asm/stackf.asm"
	; -------------------------------------------------------------
	; Functions to manage FP-Stack of the ZX Spectrum ROM CALC
	; -------------------------------------------------------------


	__FPSTACK_PUSH EQU 2AB6h	; Stores an FP number into the ROM FP stack (A, ED CB)
	__FPSTACK_POP  EQU 2BF1h	; Pops an FP number out of the ROM FP stack (A, ED CB)

__FPSTACK_PUSH2: ; Pushes Current A ED CB registers and top of the stack on (SP + 4)
	                 ; Second argument to push into the stack calculator is popped out of the stack
	                 ; Since the caller routine also receives the parameters into the top of the stack
	                 ; four bytes must be removed from SP before pop them out

	    call __FPSTACK_PUSH ; Pushes A ED CB into the FP-STACK
	    exx
	    pop hl       ; Caller-Caller return addr
	    exx
	    pop hl       ; Caller return addr

	    pop af
	    pop de
	    pop bc

	    push hl      ; Caller return addr
	    exx
	    push hl      ; Caller-Caller return addr
	    exx

	    jp __FPSTACK_PUSH


__FPSTACK_I16:	; Pushes 16 bits integer in HL into the FP ROM STACK
					; This format is specified in the ZX 48K Manual
					; You can push a 16 bit signed integer as
					; 0 SS LL HH 0, being SS the sign and LL HH the low
					; and High byte respectively
		ld a, h
		rla			; sign to Carry
		sbc	a, a	; 0 if positive, FF if negative
		ld e, a
		ld d, l
		ld c, h
		xor a
		ld b, a
		jp __FPSTACK_PUSH
#line 9 "C:/zxbasic/src/arch/zx48k/library-asm/str.asm"


__STR:

__STR_FAST:

		PROC
		LOCAL __STR_END
		LOCAL RECLAIM2
		LOCAL STK_END

		ld hl, (STK_END)
		push hl; Stores STK_END
		ld hl, (ATTR_T)	; Saves ATTR_T since it's changed by STR$ due to a ROM BUG
		push hl

	    call __FPSTACK_PUSH ; Push number into stack
		rst 28h		; # Rom Calculator
		defb 2Eh	; # STR$(x)
		defb 38h	; # END CALC
		call __FPSTACK_POP ; Recovers string parameters to A ED CB (Only ED LH are important)

		pop hl
		ld (ATTR_T), hl	; Restores ATTR_T
		pop hl
		ld (STK_END), hl	; Balance STK_END to avoid STR$ bug

		push bc
		push de

		inc bc
		inc bc
		call __MEM_ALLOC ; HL Points to new block

		pop de
		pop bc

		push hl
		ld a, h
		or l
		jr z, __STR_END  ; Return if NO MEMORY (NULL)

		push bc
		push de
		ld (hl), c
		inc hl
		ld (hl), b
		inc hl		; Copies length

		ex de, hl	; HL = start of original string
		ldir		; Copies string content

		pop de		; Original (ROM-CALC) string
		pop bc		; Original Length

__STR_END:
		ex de, hl
		inc bc

		call RECLAIM2 ; Frees TMP Memory
		pop hl		  ; String result

		ret

	RECLAIM2 EQU 19E8h
	STK_END EQU 5C65h

		ENDP

#line 7513 "C:\Users\geniw\source\repos\BattleGrid\BattleGrid\ZxBasicFiles\BattleGrid.zxbas"
#line 1 "C:/zxbasic/src/arch/zx48k/library-asm/strcat.asm"

#line 1 "C:/zxbasic/src/arch/zx48k/library-asm/strlen.asm"
	; Returns len if a string
	; If a string is NULL, its len is also 0
	; Result returned in HL

__STRLEN:	; Direct FASTCALL entry
			ld a, h
			or l
			ret z

			ld a, (hl)
			inc hl
			ld h, (hl)  ; LEN(str) in HL
			ld l, a
			ret


#line 3 "C:/zxbasic/src/arch/zx48k/library-asm/strcat.asm"

__ADDSTR:	; Implements c$ = a$ + b$
				; hl = &a$, de = &b$ (pointers)


__STRCAT2:	; This routine creates a new string in dynamic space
				; making room for it. Then copies a$ + b$ into it.
				; HL = a$, DE = b$

			PROC

			LOCAL __STR_CONT
			LOCAL __STRCATEND

			push hl
			call __STRLEN
			ld c, l
			ld b, h		; BC = LEN(a$)
			ex (sp), hl ; (SP) = LEN (a$), HL = a$
			push hl		; Saves pointer to a$

			inc bc
			inc bc		; +2 bytes to store length

			ex de, hl
			push hl
			call __STRLEN
			; HL = len(b$)

			add hl, bc	; Total str length => 2 + len(a$) + len(b$)

			ld c, l
			ld b, h		; BC = Total str length + 2
			call __MEM_ALLOC
			pop de		; HL = c$, DE = b$

			ex de, hl	; HL = b$, DE = c$
			ex (sp), hl ; HL = a$, (SP) = b$

			exx
			pop de		; D'E' = b$
			exx

			pop bc		; LEN(a$)

			ld a, d
			or e
		ret z		; If no memory: RETURN

__STR_CONT:
			push de		; Address of c$

			ld a, h
			or l
			jr nz, __STR_CONT1 ; If len(a$) != 0 do copy

	        ; a$ is NULL => uses HL = DE for transfer
			ld h, d
			ld l, e
			ld (hl), a	; This will copy 00 00 at (DE) location
	        inc de      ;
	        dec bc      ; Ensure BC will be set to 1 in the next step

__STR_CONT1:        ; Copies a$ (HL) into c$ (DE)
			inc bc
			inc bc		; BC = BC + 2
		ldir		; MEMCOPY: c$ = a$
			pop hl		; HL = c$

			exx
			push de		; Recovers b$; A ex hl,hl' would be very handy
			exx

			pop de		; DE = b$

__STRCAT: ; ConCATenate two strings a$ = a$ + b$. HL = ptr to a$, DE = ptr to b$
		  ; NOTE: Both DE, BC and AF are modified and lost
			  ; Returns HL (pointer to a$)
			  ; a$ Must be NOT NULL
			ld a, d
			or e
			ret z		; Returns if de is NULL (nothing to copy)

			push hl		; Saves HL to return it later

			ld c, (hl)
			inc hl
			ld b, (hl)
			inc hl
			add hl, bc	; HL = end of (a$) string ; bc = len(a$)
			push bc		; Saves LEN(a$) for later

			ex de, hl	; DE = end of string (Begin of copy addr)
			ld c, (hl)
			inc hl
			ld b, (hl)	; BC = len(b$)

			ld a, b
			or c
			jr z, __STRCATEND; Return if len(b$) == 0

			push bc			 ; Save LEN(b$)
			inc hl			 ; Skip 2nd byte of len(b$)
			ldir			 ; Concatenate b$

			pop bc			 ; Recovers length (b$)
			pop hl			 ; Recovers length (a$)
			add hl, bc		 ; HL = LEN(a$) + LEN(b$) = LEN(a$+b$)
			ex de, hl		 ; DE = LEN(a$+b$)
			pop hl

			ld (hl), e		 ; Updates new LEN and return
			inc hl
			ld (hl), d
			dec hl
			ret

__STRCATEND:
			pop hl		; Removes Len(a$)
			pop hl		; Restores original HL, so HL = a$
			ret

			ENDP

#line 7514 "C:\Users\geniw\source\repos\BattleGrid\BattleGrid\ZxBasicFiles\BattleGrid.zxbas"

#line 1 "C:/zxbasic/src/arch/zx48k/library-asm/strslice.asm"
	; String slicing library
	; HL = Str pointer
	; DE = String start
	; BC = String character end
	; A register => 0 => the HL pointer wont' be freed from the HEAP
	; e.g. a$(5 TO 10) => HL = a$; DE = 5; BC = 10

	; This implements a$(X to Y) being X and Y first and
	; last characters respectively. If X > Y, NULL is returned

	; Otherwise returns a pointer to a$ FROM X to Y (starting from 0)
	; if Y > len(a$), then a$ will be padded with spaces (reallocating
	; it in dynamic memory if needed). Returns pointer (HL) to resulting
	; string. NULL (0) if no memory for padding.
	;





__STRSLICE:			; Callee entry
		pop hl			; Return ADDRESS
		pop bc			; Last char pos
		pop de			; 1st char pos
		ex (sp), hl		; CALLEE. -> String start

__STRSLICE_FAST:	; __FASTCALL__ Entry
		PROC

		LOCAL __CONT
		LOCAL __EMPTY
		LOCAL __FREE_ON_EXIT

		push hl			; Stores original HL pointer to be recovered on exit
		ex af, af'		; Saves A register for later

		push hl
		call __STRLEN
		inc bc			; Last character position + 1 (string starts from 0)
		or a
		sbc hl, bc		; Compares length with last char position
		jr nc, __CONT	; If Carry => We must copy to end of string
		add hl, bc		; Restore back original LEN(a$) in HL
		ld b, h
		ld c, l			; Copy to the end of str
		ccf				; Clears Carry flag for next subtraction

__CONT:
		ld h, b
		ld l, c			; HL = Last char position to copy (1 for char 0, 2 for char 1, etc)
		sbc hl, de		; HL = LEN(a$) - DE => Number of chars to copy
		jr z, __EMPTY	; 0 Chars to copy => Return HL = 0 (NULL STR)
		jr c, __EMPTY	; If Carry => Nothing to return (NULL STR)

		ld b, h
		ld c, l			; BC = Number of chars to copy
		inc bc
		inc bc			; +2 bytes for string length number

		push bc
		push de
		call __MEM_ALLOC
		pop de
		pop bc
		ld a, h
		or l
		jr z, __EMPTY	; Return if NULL (no memory)

		dec bc
		dec bc			; Number of chars to copy (Len of slice)

		ld (hl), c
		inc hl
		ld (hl), b
		inc hl			; Stores new string length

		ex (sp), hl		; Pointer to A$ now in HL; Pointer to new string chars in Stack
		inc hl
		inc hl			; Skip string length
		add hl, de		; Were to start from A$
		pop de			; Start of new string chars
		push de			; Stores it again
		ldir			; Copies BC chars
		pop de
		dec de
		dec de			; Points to String LEN start
		ex de, hl		; Returns it in HL
		jr __FREE_ON_EXIT

__EMPTY:			; Return NULL (empty) string
		pop hl
		ld hl, 0		; Return NULL


__FREE_ON_EXIT:
		ex af, af'		; Recover original A register
		ex (sp), hl		; Original HL pointer

		or a
		call nz, __MEM_FREE

		pop hl			; Recover result
		ret

		ENDP

#line 7516 "C:\Users\geniw\source\repos\BattleGrid\BattleGrid\ZxBasicFiles\BattleGrid.zxbas"
#line 1 "C:/zxbasic/src/arch/zx48k/library-asm/u32tofreg.asm"
#line 1 "C:/zxbasic/src/arch/zx48k/library-asm/neg32.asm"
__ABS32:
		bit 7, d
		ret z

__NEG32: ; Negates DEHL (Two's complement)
		ld a, l
		cpl
		ld l, a

		ld a, h
		cpl
		ld h, a

		ld a, e
		cpl
		ld e, a

		ld a, d
		cpl
		ld d, a

		inc l
		ret nz

		inc h
		ret nz

		inc de
		ret

#line 2 "C:/zxbasic/src/arch/zx48k/library-asm/u32tofreg.asm"
__I8TOFREG:
		ld l, a
		rlca
		sbc a, a	; A = SGN(A)
		ld h, a
		ld e, a
		ld d, a

__I32TOFREG:	; Converts a 32bit signed integer (stored in DEHL)
					; to a Floating Point Number returned in (A ED CB)

		ld a, d
		or a		; Test sign

		jp p, __U32TOFREG	; It was positive, proceed as 32bit unsigned

		call __NEG32		; Convert it to positive
		call __U32TOFREG	; Convert it to Floating point

		set 7, e			; Put the sign bit (negative) in the 31bit of mantissa
		ret

__U8TOFREG:
					; Converts an unsigned 8 bit (A) to Floating point
		ld l, a
		ld h, 0
		ld e, h
		ld d, h

__U32TOFREG:	; Converts an unsigned 32 bit integer (DEHL)
					; to a Floating point number returned in A ED CB

	    PROC

	    LOCAL __U32TOFREG_END

		ld a, d
		or e
		or h
		or l
	    ld b, d
		ld c, e		; Returns 00 0000 0000 if ZERO
		ret z

		push de
		push hl

		exx
		pop de  ; Loads integer into B'C' D'E'
		pop bc
		exx

		ld l, 128	; Exponent
		ld bc, 0	; DEBC = 0
		ld d, b
		ld e, c

__U32TOFREG_LOOP: ; Also an entry point for __F16TOFREG
		exx
		ld a, d 	; B'C'D'E' == 0 ?
		or e
		or b
		or c
		jp z, __U32TOFREG_END	; We are done

		srl b ; Shift B'C' D'E' >> 1, output bit stays in Carry
		rr c
		rr d
		rr e
		exx

		rr e ; Shift EDCB >> 1, inserting the carry on the left
		rr d
		rr c
		rr b

		inc l	; Increment exponent
		jp __U32TOFREG_LOOP


__U32TOFREG_END:
		exx
	    ld a, l     ; Puts the exponent in a
		res 7, e	; Sets the sign bit to 0 (positive)

		ret
	    ENDP

#line 7517 "C:\Users\geniw\source\repos\BattleGrid\BattleGrid\ZxBasicFiles\BattleGrid.zxbas"

__LABEL665:
	DEFB 0FFh
	END
