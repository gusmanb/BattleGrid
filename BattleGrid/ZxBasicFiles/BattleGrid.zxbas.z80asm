	.zxbasic
	org 32768
__START_PROGRAM:
	di
	push ix
	push iy
	exx
	push hl
	exx
	ld hl, 0
	add hl, sp
	ld (__CALL_BACK__), hl
	ei
	call __MEM_INIT
	call __PRINT_INIT
	jp __MAIN_PROGRAM__
__CALL_BACK__:
	DEFW 0
ZXBASIC_USER_DATA:
	; Defines HEAP SIZE
ZXBASIC_HEAP_SIZE EQU 256
ZXBASIC_MEM_HEAP:
	DEFS 256
	; Defines USER DATA Length in bytes
ZXBASIC_USER_DATA_LEN EQU ZXBASIC_USER_DATA_END - ZXBASIC_USER_DATA
	.__LABEL__.ZXBASIC_USER_DATA_LEN EQU ZXBASIC_USER_DATA_LEN
	.__LABEL__.ZXBASIC_USER_DATA EQU ZXBASIC_USER_DATA
_playerX:
	DEFB 14h
_playerSprite:
	DEFB 00h
_dir:
	DEFB 00h
_activeShots:
	DEFB 00
_cursorX:
	DEFB 00h
_cursorY:
	DEFB 00h
_cursorVisible:
	DEFB 00h
_cursorFrames:
	DEFB 0Ah
_cursorMoved:
	DEFB 00h
_cursorTool:
	DEFB 00h
_activeEnemies:
	DEFB 00
_enemyFrame:
	DEFB 0Ah
_buc:
	DEFB 00
_spriteSet:
	DEFW __LABEL281
_spriteSet.__DATA__.__PTR__:
	DEFW _spriteSet.__DATA__
_spriteSet.__DATA__:
	DEFB 18h
	DEFB 5Ah
	DEFB 0A5h
	DEFB 0BDh
	DEFB 7Eh
	DEFB 66h
	DEFB 5Ah
	DEFB 0A5h
	DEFB 08h
	DEFB 2Ah
	DEFB 14h
	DEFB 1Ch
	DEFB 3Eh
	DEFB 36h
	DEFB 2Ah
	DEFB 55h
	DEFB 10h
	DEFB 54h
	DEFB 28h
	DEFB 38h
	DEFB 7Ch
	DEFB 6Ch
	DEFB 54h
	DEFB 0AAh
	DEFB 20h
	DEFB 18h
	DEFB 04h
	DEFB 18h
	DEFB 20h
	DEFB 18h
	DEFB 04h
	DEFB 18h
	DEFB 18h
	DEFB 04h
	DEFB 18h
	DEFB 20h
	DEFB 18h
	DEFB 04h
	DEFB 18h
	DEFB 20h
	DEFB 00h
	DEFB 00h
	DEFB 44h
	DEFB 0AAh
	DEFB 0AAh
	DEFB 11h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 22h
	DEFB 55h
	DEFB 55h
	DEFB 88h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 18h
	DEFB 3Ch
	DEFB 3Ch
	DEFB 18h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 18h
	DEFB 24h
	DEFB 5Ah
	DEFB 5Ah
	DEFB 24h
	DEFB 18h
	DEFB 00h
	DEFB 3Ch
	DEFB 42h
	DEFB 99h
	DEFB 0A5h
	DEFB 0A5h
	DEFB 99h
	DEFB 42h
	DEFB 3Ch
	DEFB 42h
	DEFB 81h
	DEFB 24h
	DEFB 00h
	DEFB 00h
	DEFB 24h
	DEFB 81h
	DEFB 42h
	DEFB 0E7h
	DEFB 81h
	DEFB 81h
	DEFB 00h
	DEFB 00h
	DEFB 81h
	DEFB 81h
	DEFB 0E7h
	DEFB 24h
	DEFB 7Eh
	DEFB 0FFh
	DEFB 99h
	DEFB 0DBh
	DEFB 0FFh
	DEFB 66h
	DEFB 24h
	DEFB 24h
	DEFB 7Eh
	DEFB 0FFh
	DEFB 0BDh
	DEFB 0DBh
	DEFB 7Eh
	DEFB 7Eh
	DEFB 18h
	DEFB 5Ah
	DEFB 7Eh
	DEFB 66h
	DEFB 5Ah
	DEFB 5Ah
	DEFB 66h
	DEFB 5Ah
	DEFB 18h
	DEFB 0FFh
	DEFB 66h
	DEFB 0DBh
	DEFB 0DBh
	DEFB 66h
	DEFB 0FFh
	DEFB 18h
	DEFB 18h
__LABEL281:
	DEFW 0001h
	DEFW 0008h
	DEFB 01h
_tileSet:
	DEFW __LABEL282
_tileSet.__DATA__.__PTR__:
	DEFW _tileSet.__DATA__
_tileSet.__DATA__:
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 3Fh
	DEFB 40h
	DEFB 0AFh
	DEFB 98h
	DEFB 0B3h
	DEFB 0A4h
	DEFB 0A9h
	DEFB 0AAh
	DEFB 0AAh
	DEFB 0A2h
	DEFB 0A2h
	DEFB 0AAh
	DEFB 0AAh
	DEFB 0A2h
	DEFB 0A2h
	DEFB 0AAh
	DEFB 0AAh
	DEFB 0A9h
	DEFB 0A4h
	DEFB 0B3h
	DEFB 98h
	DEFB 0AFh
	DEFB 40h
	DEFB 3Fh
	DEFB 0FFh
	DEFB 00h
	DEFB 0FFh
	DEFB 00h
	DEFB 99h
	DEFB 00h
	DEFB 0FFh
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 18h
	DEFB 18h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 0FFh
	DEFB 00h
	DEFB 99h
	DEFB 00h
	DEFB 0FFh
	DEFB 00h
	DEFB 0FFh
	DEFB 0FCh
	DEFB 02h
	DEFB 0F5h
	DEFB 19h
	DEFB 0CDh
	DEFB 25h
	DEFB 95h
	DEFB 55h
	DEFB 55h
	DEFB 45h
	DEFB 45h
	DEFB 55h
	DEFB 55h
	DEFB 45h
	DEFB 45h
	DEFB 55h
	DEFB 55h
	DEFB 95h
	DEFB 25h
	DEFB 0CDh
	DEFB 19h
	DEFB 0F5h
	DEFB 02h
	DEFB 0FCh
	DEFB 80h
	DEFB 0C0h
	DEFB 0A0h
	DEFB 0B0h
	DEFB 0A8h
	DEFB 0BCh
	DEFB 82h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 82h
	DEFB 0BCh
	DEFB 0A8h
	DEFB 0B0h
	DEFB 0A0h
	DEFB 0C0h
	DEFB 80h
	DEFB 01h
	DEFB 03h
	DEFB 05h
	DEFB 0Dh
	DEFB 15h
	DEFB 3Dh
	DEFB 41h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 41h
	DEFB 3Dh
	DEFB 15h
	DEFB 0Dh
	DEFB 05h
	DEFB 03h
	DEFB 01h
	DEFB 3Fh
	DEFB 7Fh
	DEFB 0AAh
	DEFB 0D1h
	DEFB 0D1h
	DEFB 0AAh
	DEFB 7Fh
	DEFB 3Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 0A5h
	DEFB 18h
	DEFB 18h
	DEFB 0A5h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 0FCh
	DEFB 0FEh
	DEFB 55h
	DEFB 8Bh
	DEFB 8Bh
	DEFB 55h
	DEFB 0FEh
	DEFB 0FCh
	DEFB 3Ch
	DEFB 5Ah
	DEFB 0E7h
	DEFB 0DBh
	DEFB 0E7h
	DEFB 0C3h
	DEFB 0E7h
	DEFB 0DBh
	DEFB 0E7h
	DEFB 0C3h
	DEFB 0E7h
	DEFB 0DBh
	DEFB 0DBh
	DEFB 0E7h
	DEFB 0C3h
	DEFB 0E7h
	DEFB 0DBh
	DEFB 0E7h
	DEFB 0C3h
	DEFB 0E7h
	DEFB 0DBh
	DEFB 0E7h
	DEFB 5Ah
	DEFB 3Ch
	DEFB 24h
	DEFB 3Ch
	DEFB 0DBh
	DEFB 7Eh
	DEFB 7Eh
	DEFB 0DBh
	DEFB 3Ch
	DEFB 24h
	DEFB 3Ch
	DEFB 42h
	DEFB 99h
	DEFB 0A5h
	DEFB 0A5h
	DEFB 99h
	DEFB 42h
	DEFB 3Ch
	DEFB 00h
	DEFB 0Fh
	DEFB 07h
	DEFB 07h
	DEFB 07h
	DEFB 07h
	DEFB 07h
	DEFB 07h
	DEFB 07h
	DEFB 07h
	DEFB 07h
	DEFB 07h
	DEFB 0Fh
	DEFB 00h
	DEFB 00h
	DEFB 0FCh
	DEFB 0FCh
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 0Ch
	DEFB 0Ch
	DEFB 1Eh
	DEFB 7Fh
	DEFB 1Eh
	DEFB 3Fh
	DEFB 33h
	DEFB 40h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 78h
	DEFB 1Ch
	DEFB 1Ch
	DEFB 1Ch
	DEFB 18h
	DEFB 70h
	DEFB 38h
	DEFB 1Ch
	DEFB 1Ch
	DEFB 1Dh
	DEFB 1Dh
	DEFB 7Bh
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 03h
	DEFB 0Ch
	DEFB 1Ch
	DEFB 1Ch
	DEFB 3Ch
	DEFB 3Ch
	DEFB 3Ch
	DEFB 3Dh
	DEFB 0BDh
	DEFB 3Ch
	DEFB 3Ch
	DEFB 1Ch
	DEFB 9Ch
	DEFB 0Ch
	DEFB 03h
	DEFB 00h
	DEFB 00h
	DEFB 78h
	DEFB 78h
	DEFB 0B8h
	DEFB 0B8h
	DEFB 0B8h
	DEFB 0BCh
	DEFB 0BCh
	DEFB 0BCh
	DEFB 0FCh
	DEFB 1Eh
	DEFB 1Eh
	DEFB 9Fh
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 0D3h
	DEFB 71h
	DEFB 31h
	DEFB 31h
	DEFB 11h
	DEFB 11h
	DEFB 01h
	DEFB 0F9h
	DEFB 0F1h
	DEFB 0F1h
	DEFB 0F1h
	DEFB 0F1h
	DEFB 0F1h
	DEFB 0E1h
	DEFB 83h
	DEFB 00h
	DEFB 00h
	DEFB 0DDh
	DEFB 0DDh
	DEFB 9Ch
	DEFB 9Ch
	DEFB 1Ch
	DEFB 1Ch
	DEFB 1Ch
	DEFB 1Ch
	DEFB 1Ch
	DEFB 1Ch
	DEFB 1Ch
	DEFB 3Eh
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 0EEh
	DEFB 0E7h
	DEFB 0E7h
	DEFB 0E7h
	DEFB 0E7h
	DEFB 0E7h
	DEFB 0EEh
	DEFB 0EEh
	DEFB 0E7h
	DEFB 0E7h
	DEFB 0E7h
	DEFB 0E7h
	DEFB 0E7h
	DEFB 0E7h
	DEFB 0F3h
	DEFB 00h
	DEFB 00h
	DEFB 0EEh
	DEFB 0EEh
	DEFB 0CEh
	DEFB 0CEh
	DEFB 0Eh
	DEFB 0Eh
	DEFB 0Eh
	DEFB 0Eh
	DEFB 0Eh
	DEFB 0Eh
	DEFB 1Eh
	DEFB 1Fh
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 1Fh
	DEFB 0Fh
	DEFB 8Fh
	DEFB 8Fh
	DEFB 8Fh
	DEFB 0Fh
	DEFB 0Fh
	DEFB 0Fh
	DEFB 0Fh
	DEFB 8Fh
	DEFB 8Fh
	DEFB 8Fh
	DEFB 0CFh
	DEFB 0CFh
	DEFB 9Fh
	DEFB 00h
	DEFB 00h
	DEFB 0CFh
	DEFB 0C7h
	DEFB 47h
	DEFB 47h
	DEFB 07h
	DEFB 07h
	DEFB 07h
	DEFB 07h
	DEFB 07h
	DEFB 07h
	DEFB 07h
	DEFB 0Fh
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 0BFh
	DEFB 1Fh
	DEFB 0Fh
	DEFB 0Fh
	DEFB 0Fh
	DEFB 0Fh
	DEFB 0Fh
	DEFB 0Fh
	DEFB 0Fh
	DEFB 0Fh
	DEFB 0Fh
	DEFB 0Fh
	DEFB 0Fh
	DEFB 0Fh
	DEFB 9Fh
	DEFB 00h
	DEFB 00h
	DEFB 0Fh
	DEFB 07h
	DEFB 07h
	DEFB 07h
	DEFB 07h
	DEFB 07h
	DEFB 07h
	DEFB 07h
	DEFB 27h
	DEFB 27h
	DEFB 67h
	DEFB 6Fh
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 60h
	DEFB 30h
	DEFB 38h
	DEFB 38h
	DEFB 3Ch
	DEFB 3Ch
	DEFB 3Ch
	DEFB 3Ch
	DEFB 3Dh
	DEFB 3Ch
	DEFB 3Ch
	DEFB 38h
	DEFB 39h
	DEFB 30h
	DEFB 40h
	DEFB 00h
	DEFB 00h
	DEFB 60h
	DEFB 60h
	DEFB 20h
	DEFB 00h
	DEFB 40h
	DEFB 40h
	DEFB 40h
	DEFB 40h
	DEFB 00h
	DEFB 20h
	DEFB 60h
	DEFB 60h
	DEFB 00h
	DEFB 00h
	DEFB 3Fh
	DEFB 3Fh
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 30h
	DEFB 30h
	DEFB 78h
	DEFB 0FEh
	DEFB 78h
	DEFB 0FCh
	DEFB 0CCh
	DEFB 02h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 3Ch
	DEFB 7Eh
	DEFB 00h
	DEFB 00h
	DEFB 18h
	DEFB 66h
	DEFB 5Ah
	DEFB 0BDh
	DEFB 0BDh
	DEFB 5Ah
	DEFB 66h
	DEFB 18h
	DEFB 44h
	DEFB 00h
	DEFB 91h
	DEFB 40h
	DEFB 0A4h
	DEFB 0D0h
	DEFB 0E9h
	DEFB 0F4h
	DEFB 0E7h
	DEFB 81h
	DEFB 81h
	DEFB 18h
	DEFB 3Ch
	DEFB 81h
	DEFB 81h
	DEFB 0E7h
	DEFB 0E7h
	DEFB 81h
	DEFB 99h
	DEFB 3Ch
	DEFB 3Ch
	DEFB 99h
	DEFB 81h
	DEFB 0E7h
	DEFB 0E7h
	DEFB 81h
	DEFB 89h
	DEFB 24h
	DEFB 30h
	DEFB 0B9h
	DEFB 81h
	DEFB 0E7h
__LABEL282:
	DEFW 0001h
	DEFW 0008h
	DEFB 01h
_tileColors:
	DEFW __LABEL283
_tileColors.__DATA__.__PTR__:
	DEFW _tileColors.__DATA__
_tileColors.__DATA__:
	DEFB 00h
	DEFB 41h
	DEFB 41h
	DEFB 41h
	DEFB 41h
	DEFB 47h
	DEFB 41h
	DEFB 41h
	DEFB 41h
	DEFB 41h
	DEFB 45h
	DEFB 45h
	DEFB 45h
	DEFB 45h
	DEFB 42h
	DEFB 42h
	DEFB 42h
	DEFB 42h
	DEFB 42h
	DEFB 42h
	DEFB 44h
	DEFB 42h
	DEFB 42h
	DEFB 42h
	DEFB 46h
	DEFB 46h
	DEFB 42h
	DEFB 42h
	DEFB 46h
	DEFB 46h
	DEFB 42h
	DEFB 42h
	DEFB 46h
	DEFB 46h
	DEFB 42h
	DEFB 42h
	DEFB 46h
	DEFB 46h
	DEFB 42h
	DEFB 42h
	DEFB 46h
	DEFB 46h
	DEFB 42h
	DEFB 42h
	DEFB 46h
	DEFB 46h
	DEFB 42h
	DEFB 42h
	DEFB 46h
	DEFB 46h
	DEFB 42h
	DEFB 42h
	DEFB 46h
	DEFB 46h
	DEFB 06h
	DEFB 43h
	DEFB 05h
	DEFB 06h
	DEFB 43h
	DEFB 05h
__LABEL283:
	DEFW 0000h
	DEFB 01h
_shots:
	DEFW __LABEL284
_shots.__DATA__.__PTR__:
	DEFW _shots.__DATA__
_shots.__DATA__:
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
__LABEL284:
	DEFW 0001h
	DEFW 0004h
	DEFB 01h
_activeMap:
	DEFW __LABEL285
_activeMap.__DATA__.__PTR__:
	DEFW _activeMap.__DATA__
_activeMap.__DATA__:
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
__LABEL285:
	DEFW 0001h
	DEFW 0014h
	DEFB 01h
_reflectDirsA:
	DEFW __LABEL286
_reflectDirsA.__DATA__.__PTR__:
	DEFW _reflectDirsA.__DATA__
_reflectDirsA.__DATA__:
	DEFB 02h
	DEFB 04h
	DEFB 01h
	DEFB 03h
__LABEL286:
	DEFW 0000h
	DEFB 01h
_reflectDirsB:
	DEFW __LABEL287
_reflectDirsB.__DATA__.__PTR__:
	DEFW _reflectDirsB.__DATA__
_reflectDirsB.__DATA__:
	DEFB 04h
	DEFB 01h
	DEFB 02h
	DEFB 03h
__LABEL287:
	DEFW 0000h
	DEFB 01h
_reflectDirsC:
	DEFW __LABEL288
_reflectDirsC.__DATA__.__PTR__:
	DEFW _reflectDirsC.__DATA__
_reflectDirsC.__DATA__:
	DEFB 02h
	DEFB 03h
	DEFB 04h
	DEFB 01h
__LABEL288:
	DEFW 0000h
	DEFB 01h
_reflectDirsD:
	DEFW __LABEL289
_reflectDirsD.__DATA__.__PTR__:
	DEFW _reflectDirsD.__DATA__
_reflectDirsD.__DATA__:
	DEFB 03h
	DEFB 01h
	DEFB 04h
	DEFB 02h
__LABEL289:
	DEFW 0000h
	DEFB 01h
_maskTable:
	DEFW __LABEL290
_maskTable.__DATA__.__PTR__:
	DEFW _maskTable.__DATA__
_maskTable.__DATA__:
	DEFB 01h
	DEFB 02h
	DEFB 04h
	DEFB 08h
	DEFB 10h
	DEFB 20h
	DEFB 40h
	DEFB 80h
__LABEL290:
	DEFW 0000h
	DEFB 01h
_enemies:
	DEFW __LABEL291
_enemies.__DATA__.__PTR__:
	DEFW _enemies.__DATA__
_enemies.__DATA__:
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
__LABEL291:
	DEFW 0001h
	DEFW 0004h
	DEFB 01h
ZXBASIC_USER_DATA_END:
__MAIN_PROGRAM__:
#line 31 "C:/Users/geniw/source/repos/BattleGrid/BattleGrid/ZxBasicFiles/GuSprites.zxbas"
#line 35 "C:/Users/geniw/source/repos/BattleGrid/BattleGrid/ZxBasicFiles/GuSprites.zxbas"
#line 42 "C:/Users/geniw/source/repos/BattleGrid/BattleGrid/ZxBasicFiles/GuSprites.zxbas"
#line 49 "C:/Users/geniw/source/repos/BattleGrid/BattleGrid/ZxBasicFiles/GuSprites.zxbas"
#line 54 "C:/Users/geniw/source/repos/BattleGrid/BattleGrid/ZxBasicFiles/GuSprites.zxbas"
#line 63 "C:/Users/geniw/source/repos/BattleGrid/BattleGrid/ZxBasicFiles/GuSprites.zxbas"
#line 67 "C:/Users/geniw/source/repos/BattleGrid/BattleGrid/ZxBasicFiles/GuSprites.zxbas"
#line 77 "C:/Users/geniw/source/repos/BattleGrid/BattleGrid/ZxBasicFiles/GuSprites.zxbas"
#line 92 "C:/Users/geniw/source/repos/BattleGrid/BattleGrid/ZxBasicFiles/GuSprites.zxbas"
#line 133 "C:/Users/geniw/source/repos/BattleGrid/BattleGrid/ZxBasicFiles/GuSprites.zxbas"
#line 138 "C:/Users/geniw/source/repos/BattleGrid/BattleGrid/ZxBasicFiles/GuSprites.zxbas"
#line 144 "C:/Users/geniw/source/repos/BattleGrid/BattleGrid/ZxBasicFiles/GuSprites.zxbas"
#line 151 "C:/Users/geniw/source/repos/BattleGrid/BattleGrid/ZxBasicFiles/GuSprites.zxbas"
#line 159 "C:/Users/geniw/source/repos/BattleGrid/BattleGrid/ZxBasicFiles/GuSprites.zxbas"
#line 169 "C:/Users/geniw/source/repos/BattleGrid/BattleGrid/ZxBasicFiles/GuSprites.zxbas"
		SPRITE_1x1_BUFFER_SIZE equ (6 * 8)
		SPRITE_1x2_BUFFER_SIZE equ (9 * 8)
		SPRITE_2x2_BUFFER_SIZE equ (15 * 8)
		SPRITE_1x1_SHIFTED_SIZE equ 4
		SPRITE_1x2_SHIFTED_SIZE equ 6
		SPRITE_2x2_SHIFTED_SIZE equ 9
		TOTAL_1x1_OPS equ (24 * SPRITE_1x1_SHIFTED_SIZE)
		TOTAL_1x2_OPS equ (0 * SPRITE_1x2_SHIFTED_SIZE)
		TOTAL_2x2_OPS equ (0 * SPRITE_2x2_SHIFTED_SIZE)
		TOTAL_DRAW_OPS equ ((TOTAL_1x1_OPS + TOTAL_1x2_OPS + TOTAL_2x2_OPS) * 2)
		DRAW_OP_SIZE equ 5
#line 190 "C:/Users/geniw/source/repos/BattleGrid/BattleGrid/ZxBasicFiles/GuSprites.zxbas"
		DRAW_OPS_SIZE equ (TOTAL_DRAW_OPS * DRAW_OP_SIZE)
		DRAW_OPS_DATA_SIZE equ (TOTAL_DRAW_OPS * 8)
		SPRITE_BUFFER_SIZE equ ((32 * SPRITE_1x1_BUFFER_SIZE)+(0 * SPRITE_1x2_BUFFER_SIZE)+(0 * SPRITE_2x2_BUFFER_SIZE))
		SPRITE_INDEX_SIZE equ ((32 + 0 + 0) * 2)
		jp GSPRITES_LIB_END
DRAW_OPS_A:
		defs DRAW_OPS_SIZE
DRAW_OPS_B:
		defs DRAW_OPS_SIZE
DRAW_OPS_DATA:
		defs DRAW_OPS_DATA_SIZE
CURRENT_DRAW_OPS:
		defw 0
CURRENT_CLEAR_OPS:
		defw 0
CURRENT_DRAW_COUNT:
		defb 0
CURRENT_CLEAR_COUNT:
		defb 0
DRAW_OPS_DATA_INDEX:
		defw 0
CELL_MAP_A:
		defs (32 * 24)
CELL_MAP_B:
		defs (32 * 24)
CURRENT_DRAW_MAP:
		defw 0
CURRENT_CLEAR_MAP:
		defw 0
SPRITE_BUFFER:
		defs SPRITE_BUFFER_SIZE
SPRITE_INDEX:
		defs SPRITE_INDEX_SIZE
SPRITE_COUNT:
		defb 0
#line 259 "C:/Users/geniw/source/repos/BattleGrid/BattleGrid/ZxBasicFiles/GuSprites.zxbas"
TILE_SET:
		defw 0
TILE_MAP:
		defs 768
#line 268 "C:/Users/geniw/source/repos/BattleGrid/BattleGrid/ZxBasicFiles/GuSprites.zxbas"
		PROC
INIT_GFX_LIB:
#line 278 "C:/Users/geniw/source/repos/BattleGrid/BattleGrid/ZxBasicFiles/GuSprites.zxbas"
		ld hl, DRAW_OPS_A
		ld (CURRENT_DRAW_OPS), hl
#line 280
		ld hl, DRAW_OPS_B
		ld (CURRENT_CLEAR_OPS), hl
#line 281
		ld hl, DRAW_OPS_DATA
		ld (DRAW_OPS_DATA_INDEX), hl
#line 283
		ld hl, CELL_MAP_A
		ld (CURRENT_DRAW_MAP), hl
#line 285
		ld hl, CELL_MAP_B
		ld (CURRENT_CLEAR_MAP), hl
#line 286
		ld hl, SPRITE_BUFFER
		ld (SPRITE_INDEX), hl
#line 288
		ret
		ENDP
		PROC
RESET_GFX_LIB:
		ld hl, DRAW_OPS_A
		ld (CURRENT_DRAW_OPS), hl
#line 296
		ld hl, DRAW_OPS_B
		ld (CURRENT_CLEAR_OPS), hl
#line 297
		ld hl, CELL_MAP_A
		ld (CURRENT_DRAW_MAP), hl
#line 299
		ld hl, CELL_MAP_B
		ld (CURRENT_CLEAR_MAP), hl
#line 300
		ld hl, DRAW_OPS_DATA
		ld (DRAW_OPS_DATA_INDEX), hl
#line 302
		ld hl, SPRITE_BUFFER
		ld (SPRITE_INDEX), hl
#line 304
		xor a
		ld (CURRENT_DRAW_COUNT), a
		ld (CURRENT_CLEAR_COUNT), a
		xor a
		ld de, SPRITE_BUFFER
		ld (de), a
		inc de
		ld hl, SPRITE_BUFFER
		ld bc, SPRITE_BUFFER_SIZE - 1
		ldir
#line 310
		xor a
		ld de, CELL_MAP_A
		ld (de), a
		inc de
		ld hl, CELL_MAP_A
		ld bc, 768 - 1
		ldir
#line 311
		xor a
		ld de, CELL_MAP_B
		ld (de), a
		inc de
		ld hl, CELL_MAP_B
		ld bc, 768 - 1
		ldir
#line 312
		xor a
		ld de, TILE_MAP
		ld (de), a
		inc de
		ld hl, TILE_MAP
		ld bc, 768 - 1
		ldir
#line 315
#line 316 "C:/Users/geniw/source/repos/BattleGrid/BattleGrid/ZxBasicFiles/GuSprites.zxbas"
		ret
		ENDP
		PROC
CLEAR_SCREEN:
		ld hl, DRAW_OPS_A
		ld (CURRENT_DRAW_OPS), hl
#line 324
		ld hl, DRAW_OPS_B
		ld (CURRENT_CLEAR_OPS), hl
#line 325
		ld hl, CELL_MAP_A
		ld (CURRENT_DRAW_MAP), hl
#line 327
		ld hl, CELL_MAP_B
		ld (CURRENT_CLEAR_MAP), hl
#line 328
		ld hl, DRAW_OPS_DATA
		ld (DRAW_OPS_DATA_INDEX), hl
#line 330
		xor a
		ld (CURRENT_DRAW_COUNT), a
		ld (CURRENT_CLEAR_COUNT), a
		xor a
		ld de, CELL_MAP_A
		ld (de), a
		inc de
		ld hl, CELL_MAP_A
		ld bc, 768 - 1
		ldir
#line 336
		xor a
		ld de, CELL_MAP_B
		ld (de), a
		inc de
		ld hl, CELL_MAP_B
		ld bc, 768 - 1
		ldir
#line 337
		xor a
		ld de, TILE_MAP
		ld (de), a
		inc de
		ld hl, TILE_MAP
		ld bc, 768 - 1
		ldir
#line 340
#line 341 "C:/Users/geniw/source/repos/BattleGrid/BattleGrid/ZxBasicFiles/GuSprites.zxbas"
		ret
		ENDP
		PROC
		LOCAL RENDER_LOOP, END_RENDER, RESTORE_STACK
RENDER_FRAME:
#line 352 "C:/Users/geniw/source/repos/BattleGrid/BattleGrid/ZxBasicFiles/GuSprites.zxbas"
		halt
#line 356 "C:/Users/geniw/source/repos/BattleGrid/BattleGrid/ZxBasicFiles/GuSprites.zxbas"
		ld a, (CURRENT_DRAW_COUNT)
		cp 0
		jp z, END_RENDER
		ld hl, (CURRENT_DRAW_OPS)
		push hl
RENDER_LOOP:
		pop hl
		ld e, (hl)
		inc hl
		ld d, (hl)
		inc hl
#line 370
		ld c, (hl)
		inc hl
		ld b, (hl)
		inc hl
#line 371
		inc hl
#line 375 "C:/Users/geniw/source/repos/BattleGrid/BattleGrid/ZxBasicFiles/GuSprites.zxbas"
		push hl
		ld h, b
		ld l, c
#line 379
		ld (RESTORE_STACK + 1), sp
		ld sp, hl
		ex de, hl
		pop de
		ld (hl), e
		inc h
		ld (hl), d
		inc h
		pop de
		ld (hl), e
		inc h
		ld (hl), d
		inc h
		pop de
		ld (hl), e
		inc h
		ld (hl), d
		inc h
		pop de
		ld (hl), e
		inc h
		ld (hl), d
RESTORE_STACK:
		ld sp, 0
		ld hl, CURRENT_DRAW_COUNT
		dec (hl)
		jp nz, RENDER_LOOP
		pop bc
END_RENDER:
		ld bc, (CURRENT_DRAW_OPS)
		ld de, (CURRENT_CLEAR_OPS)
		ld (CURRENT_DRAW_OPS), de
		ld (CURRENT_CLEAR_OPS), bc
		ld de, (CURRENT_DRAW_MAP)
		ld bc, (CURRENT_CLEAR_MAP)
		ld (CURRENT_DRAW_MAP), bc
		ld (CURRENT_CLEAR_MAP), de
		xor a
		push de
		ld (de), a
		inc de
		pop hl
		ld bc, 767
		ldir
		ld a, (CURRENT_CLEAR_COUNT)
		ld (CURRENT_DRAW_COUNT), a
		xor a
		ld (CURRENT_CLEAR_COUNT), a
		ld hl, DRAW_OPS_DATA
		ld (DRAW_OPS_DATA_INDEX), hl
#line 443
		ret
		ENDP
		PROC
CREATE_SPRITE_BUFFER:
		ld a, (SPRITE_COUNT)
		add a, a
		ld e, a
		ld d, 0
		ld hl, SPRITE_INDEX
		add hl, de
		ld e, (hl)
		inc hl
		ld d, (hl)
		inc hl
#line 459
		push de
		ex de, hl
		add hl, bc
		ex de, hl
		ld (hl), e
		inc hl
		ld (hl), d
		inc hl
#line 467
		ld hl, SPRITE_COUNT
		inc (hl)
		pop hl
		ret
		ENDP
		PROC
		LOCAL LOOP
CREATE_1x1_SPRITE:
		push hl
		ld bc, SPRITE_1x1_BUFFER_SIZE
		call CREATE_SPRITE_BUFFER
		ld de, 4
		add hl, de
		pop de
		push de
		ex de, hl
		ldi
		ldi
		ldi
		ldi
		ldi
		ldi
		ldi
		ldi
#line 494
		ld hl, 8
		add hl, de
		ex de, hl
		pop hl
		ld ixh, d
		ld ixl, e
		ld b, 8
LOOP:
		ld e, (hl)
		ld d, 0
		inc hl
		ex de, hl
		add hl, hl
		add hl, hl
		add hl, hl
		add hl, hl
#line 515
		ex de, hl
		ld (ix+0), d
		ld (ix+16), e
		inc ix
		djnz LOOP
		ld a, (SPRITE_COUNT)
		ret
		ENDP
		PROC
		LOCAL LOOP
CREATE_1x2_SPRITE:
		push hl
		ld bc, SPRITE_1x2_BUFFER_SIZE
		call CREATE_SPRITE_BUFFER
		ld de, 4
		add hl, de
		pop de
		push de
		ex de, hl
		ldi
		ldi
		ldi
		ldi
		ldi
		ldi
		ldi
		ldi
#line 546
		ldi
		ldi
		ldi
		ldi
		ldi
		ldi
		ldi
		ldi
#line 547
		ld hl, 8
		add hl, de
		ex de, hl
		pop hl
		ld ixh, d
		ld ixl, e
		ld b, 16
LOOP:
		ld e, (hl)
		ld d, 0
		inc hl
		ex de, hl
		add hl, hl
		add hl, hl
		add hl, hl
		add hl, hl
#line 569
		ex de, hl
		ld (ix+0), d
		ld (ix+24), e
		inc ix
		djnz LOOP
		ld a, (SPRITE_COUNT)
		ret
		ENDP
		PROC
		LOCAL LOOP
CREATE_2x2_SPRITE:
		push hl
		ld bc, SPRITE_2x2_BUFFER_SIZE
		call CREATE_SPRITE_BUFFER
		ld de, 4
		add hl, de
		pop de
		push de
		ex de, hl
		ldi
		ldi
		ldi
		ldi
		ldi
		ldi
		ldi
		ldi
#line 600
		ldi
		ldi
		ldi
		ldi
		ldi
		ldi
		ldi
		ldi
#line 601
		ex de, hl
		ld bc, 8
		add hl, bc
		ex de, hl
		ldi
		ldi
		ldi
		ldi
		ldi
		ldi
		ldi
		ldi
#line 611
		ldi
		ldi
		ldi
		ldi
		ldi
		ldi
		ldi
		ldi
#line 612
		ld hl, 8
		add hl, de
		ex de, hl
		pop iy
		ld ixh, d
		ld ixl, e
		ld b, 16
LOOP:
		ld c, (iy+0)
		ld d, (iy+16)
		ld e, 0
		srl c
		rr d
		rr e
		srl c
		rr d
		rr e
		srl c
		rr d
		rr e
		srl c
		rr d
		rr e
#line 633
		ld (ix+0), c
		ld (ix+24), d
		ld (ix+48), e
		inc iy
		inc ix
		djnz LOOP
		ld a, (SPRITE_COUNT)
		ret
		ENDP
		PROC
		LOCAL EXISTING_OP, REAL_EXISTING_OP
CREATE_DRAW_OP:
		push hl
		push bc
		ld l, c
		ld h, 0
		add hl, hl
		add hl, hl
		add hl, hl
		add hl, hl
		add hl, hl
#line 661
		ld c, b
		ld b, 0
		add hl, bc
		ld de, (CURRENT_DRAW_MAP)
		push hl
		add hl, de
		ld a, (hl)
		and a
		jp nz, EXISTING_OP
		ld a, (CURRENT_DRAW_COUNT)
		inc a
		ld (CURRENT_DRAW_COUNT), a
		ld (hl), a
		dec a
		ld l, a
		ld h, 0
		ld d, h
		ld e, l
#line 689
		add hl, hl
		add hl, hl
#line 690
		add hl, de
#line 695 "C:/Users/geniw/source/repos/BattleGrid/BattleGrid/ZxBasicFiles/GuSprites.zxbas"
		ld bc, (CURRENT_DRAW_OPS)
		add hl, bc
		pop de
		pop bc
		push de
		ld a, c
		and %00011000
		or  %01000000
		ld d, a
		ld a, c
		and %00000111
		rla
		rla
		rla
		rla
		rla
		or b
		ld e, a
		ld ixh, d
		ld ixl, e
		ld (hl), e
		inc hl
		ld (hl), d
		inc hl
#line 721
		ld de, (DRAW_OPS_DATA_INDEX)
		ld iyh, d
		ld iyl, e
		ld (hl), e
		inc hl
		ld (hl), d
		inc hl
#line 728
		ld (hl), 1
#line 734 "C:/Users/geniw/source/repos/BattleGrid/BattleGrid/ZxBasicFiles/GuSprites.zxbas"
		ld l, 8
		ld h, 0
		add hl, de
		ld (DRAW_OPS_DATA_INDEX), hl
		pop bc
		ld hl, (CURRENT_CLEAR_MAP)
		add hl, bc
		ld a, (CURRENT_CLEAR_COUNT)
		inc a
		ld (CURRENT_CLEAR_COUNT), a
		ld (hl), a
		dec a
		ld l, a
		ld h, 0
		ld d, h
		ld e, l
#line 760
		add hl, hl
		add hl, hl
#line 761
		add hl, de
#line 768 "C:/Users/geniw/source/repos/BattleGrid/BattleGrid/ZxBasicFiles/GuSprites.zxbas"
		ld de, (CURRENT_CLEAR_OPS)
		add hl, de
		ld d, ixh
		ld e, ixl
		ld (hl), e
		inc hl
		ld (hl), d
		inc hl
#line 776
		ex de, hl
		ld hl, TILE_MAP
		add hl, bc
		ld a, (hl)
		ld l, a
		ld h, 0
		add hl, hl
		add hl, hl
		add hl, hl
#line 788
		ld bc, (TILE_SET)
		add hl, bc
		ex de, hl
		ld (hl), e
		inc hl
		ld (hl), d
		inc hl
#line 794
		ld (hl), 2
#line 805 "C:/Users/geniw/source/repos/BattleGrid/BattleGrid/ZxBasicFiles/GuSprites.zxbas"
		pop hl
		ld b, iyh
		ld c, iyl
		ld a, (de)
		or (hl)
		ld (bc), a
		inc bc
		inc de
		inc hl
		ld a, (de)
		or (hl)
		ld (bc), a
		inc bc
		inc de
		inc hl
		ld a, (de)
		or (hl)
		ld (bc), a
		inc bc
		inc de
		inc hl
		ld a, (de)
		or (hl)
		ld (bc), a
		inc bc
		inc de
		inc hl
		ld a, (de)
		or (hl)
		ld (bc), a
		inc bc
		inc de
		inc hl
		ld a, (de)
		or (hl)
		ld (bc), a
		inc bc
		inc de
		inc hl
		ld a, (de)
		or (hl)
		ld (bc), a
		inc bc
		inc de
		inc hl
		ld a, (de)
		or (hl)
		ld (bc), a
#line 874 "C:/Users/geniw/source/repos/BattleGrid/BattleGrid/ZxBasicFiles/GuSprites.zxbas"
		ret
EXISTING_OP:
		dec a
		ld l, a
		ld h, 0
		ld d, h
		ld e, l
#line 887
		add hl, hl
		add hl, hl
#line 888
		add hl, de
#line 893 "C:/Users/geniw/source/repos/BattleGrid/BattleGrid/ZxBasicFiles/GuSprites.zxbas"
		ld bc, (CURRENT_DRAW_OPS)
		add hl, bc
		ld c, (hl)
		inc hl
		ld b, (hl)
		inc hl
#line 899
		push hl
		push bc
		ld e, (hl)
		inc hl
		ld d, (hl)
		inc hl
#line 904
		push de
		ld a, (hl)
		and 2
		jp z, REAL_EXISTING_OP
		ld (hl), 1
#line 921 "C:/Users/geniw/source/repos/BattleGrid/BattleGrid/ZxBasicFiles/GuSprites.zxbas"
		pop af
#line 935 "C:/Users/geniw/source/repos/BattleGrid/BattleGrid/ZxBasicFiles/GuSprites.zxbas"
		pop bc
		pop de
		pop hl
		push de
		push af
#line 944 "C:/Users/geniw/source/repos/BattleGrid/BattleGrid/ZxBasicFiles/GuSprites.zxbas"
		ld de, (CURRENT_CLEAR_MAP)
		add hl, de
		ld a, (CURRENT_CLEAR_COUNT)
		inc a
		ld (hl), a
		ld (CURRENT_CLEAR_COUNT), a
		dec a
		ld l, a
		ld h, 0
		ld d, h
		ld e, l
#line 966
		add hl, hl
		add hl, hl
#line 967
		add hl, de
#line 972 "C:/Users/geniw/source/repos/BattleGrid/BattleGrid/ZxBasicFiles/GuSprites.zxbas"
		ld de, (CURRENT_CLEAR_OPS)
		add hl, de
		ld (hl), c
		inc hl
		ld (hl), b
		inc hl
#line 977
		pop de
		ld (hl), e
		inc hl
		ld (hl), d
		inc hl
#line 982
		ld (hl), 2
#line 993 "C:/Users/geniw/source/repos/BattleGrid/BattleGrid/ZxBasicFiles/GuSprites.zxbas"
		pop hl
		push de
#line 999 "C:/Users/geniw/source/repos/BattleGrid/BattleGrid/ZxBasicFiles/GuSprites.zxbas"
		ld de, (DRAW_OPS_DATA_INDEX)
		ld (hl), e
		inc hl
		ld (hl), d
		inc hl
#line 1005
		ld hl, 8
		add hl, de
		ld (DRAW_OPS_DATA_INDEX), hl
		pop bc
#line 1014 "C:/Users/geniw/source/repos/BattleGrid/BattleGrid/ZxBasicFiles/GuSprites.zxbas"
		pop hl
		pop hl
		ld a, (bc)
		or (hl)
		ld (de), a
		inc bc
		inc de
		inc hl
		ld a, (bc)
		or (hl)
		ld (de), a
		inc bc
		inc de
		inc hl
		ld a, (bc)
		or (hl)
		ld (de), a
		inc bc
		inc de
		inc hl
		ld a, (bc)
		or (hl)
		ld (de), a
		inc bc
		inc de
		inc hl
		ld a, (bc)
		or (hl)
		ld (de), a
		inc bc
		inc de
		inc hl
		ld a, (bc)
		or (hl)
		ld (de), a
		inc bc
		inc de
		inc hl
		ld a, (bc)
		or (hl)
		ld (de), a
		inc bc
		inc de
		inc hl
		ld a, (bc)
		or (hl)
		ld (de), a
#line 1074 "C:/Users/geniw/source/repos/BattleGrid/BattleGrid/ZxBasicFiles/GuSprites.zxbas"
		ret
REAL_EXISTING_OP:
		pop hl
		pop hl
		pop hl
		pop hl
		pop hl
#line 1087 "C:/Users/geniw/source/repos/BattleGrid/BattleGrid/ZxBasicFiles/GuSprites.zxbas"
		pop hl
		ex de, hl
		ld a, (de)
		or (hl)
		ld (hl),  a
		inc de
		inc hl
		ld a, (de)
		or (hl)
		ld (hl),  a
		inc de
		inc hl
		ld a, (de)
		or (hl)
		ld (hl),  a
		inc de
		inc hl
		ld a, (de)
		or (hl)
		ld (hl),  a
		inc de
		inc hl
		ld a, (de)
		or (hl)
		ld (hl),  a
		inc de
		inc hl
		ld a, (de)
		or (hl)
		ld (hl),  a
		inc de
		inc hl
		ld a, (de)
		or (hl)
		ld (hl),  a
		inc de
		inc hl
		ld a, (de)
		or (hl)
		ld (hl),  a
#line 1093
		ret
		ENDP
		PROC
		LOCAL LOOP
DRAW_SPRITE_COLUMN:
		LOOP
		push hl
		push bc
		ex af, af'
		call CREATE_DRAW_OP
		pop bc
		pop hl
		inc c
		ld de, 8
		add hl, de
		ex af, af'
		dec a
		jr nz, LOOP
		ret
		ENDP
		PROC
		LOCAL TEST_SHIFTS, HORIZONTAL_SHIFT, VERTICAL_SHIFT
DRAW_1x1_SPRITE:
		dec a
		add a, a
		ld l, a
		ld h, 0
		ld de, SPRITE_INDEX
		add hl, de
		ld e, (hl)
		inc hl
		ld d, (hl)
		inc hl
#line 1140
		ld a, b
		or c
		and 1
		jp nz, TEST_SHIFTS
		srl b
		srl c
		ld hl, 4
		add hl, de
		call CREATE_DRAW_OP
		ret
TEST_SHIFTS:
		ld a, c
		and 1
		jp z, HORIZONTAL_SHIFT
		ld a, b
		and 1
		jp z, VERTICAL_SHIFT
		srl b
		srl c
		ld hl, 16
		add hl, de
		push bc
		ld a, 2
		call DRAW_SPRITE_COLUMN
		ld a,2
		pop bc
		inc b
		call DRAW_SPRITE_COLUMN
		ret
HORIZONTAL_SHIFT:
		srl b
		srl c
		ld hl, 20
		add hl, de
		push bc
		push hl
		call CREATE_DRAW_OP
		pop hl
		pop bc
		inc b
		ld de, 16
		add hl, de
		call CREATE_DRAW_OP
		ret
VERTICAL_SHIFT:
		srl b
		srl c
		ex de, hl
		ld a, 2
		call DRAW_SPRITE_COLUMN
		ret
		ENDP
		PROC
		LOCAL TEST_SHIFTS, HORIZONTAL_SHIFT, VERTICAL_SHIFT
DRAW_1x2_SPRITE:
		dec a
		add a, a
		ld l, a
		ld h, 0
		ld de, SPRITE_INDEX
		add hl, de
		ld e, (hl)
		inc hl
		ld d, (hl)
		inc hl
#line 1236
		ld a, b
		or c
		and 1
		jp nz, TEST_SHIFTS
		srl b
		srl c
		ld hl, 4
		add hl, de
		ld a, 2
		call DRAW_SPRITE_COLUMN
		ret
TEST_SHIFTS:
		ld a, c
		and 1
		jp z, HORIZONTAL_SHIFT
		ld a, b
		and 1
		jp z, VERTICAL_SHIFT
		srl b
		srl c
		ld hl, 24
		add hl, de
		push bc
		ld a, 3
		call DRAW_SPRITE_COLUMN
		ld a,3
		pop bc
		inc b
		call DRAW_SPRITE_COLUMN
		ret
HORIZONTAL_SHIFT:
		srl b
		srl c
		ld hl, 28
		add hl, de
		push bc
		ld a,2
		call DRAW_SPRITE_COLUMN
		pop bc
		inc b
		ld de, 8
		add hl, de
		ld a, 2
		call DRAW_SPRITE_COLUMN
		ret
VERTICAL_SHIFT:
		srl b
		srl c
		ex de, hl
		ld a, 3
		call DRAW_SPRITE_COLUMN
		ret
		ENDP
		PROC
DRAW_2x2_SPRITE:
		dec a
		add a, a
		ld l, a
		ld h, 0
		ld de, SPRITE_INDEX
		add hl, de
		ld e, (hl)
		inc hl
		ld d, (hl)
		inc hl
#line 1326
		ld a, b
		or c
		and 1
		jp nz, TEST_SHIFTS
		srl b
		srl c
		ld hl, 4
		add hl, de
		push bc
		ld a, 2
		call DRAW_SPRITE_COLUMN
		pop bc
		inc b
		ld de, 8
		add hl, de
		ld a, 2
		call DRAW_SPRITE_COLUMN
		ret
TEST_SHIFTS:
		ld a, c
		and 1
		jp z, HORIZONTAL_SHIFT
		ld a, b
		and 1
		jp z, VERTICAL_SHIFT
		srl b
		srl c
		ld hl, 48
		add hl, de
		push bc
		ld a, 3
		call DRAW_SPRITE_COLUMN
		ld a,3
		pop bc
		inc b
		push bc
		call DRAW_SPRITE_COLUMN
		ld a,3
		pop bc
		inc b
		call DRAW_SPRITE_COLUMN
		ret
HORIZONTAL_SHIFT:
		srl b
		srl c
		ld hl, 52
		add hl, de
		push bc
		ld a,2
		call DRAW_SPRITE_COLUMN
		pop bc
		inc b
		push bc
		ld de, 8
		add hl, de
		ld a, 2
		call DRAW_SPRITE_COLUMN
		pop bc
		inc b
		ld de, 8
		add hl, de
		ld a, 2
		call DRAW_SPRITE_COLUMN
		ret
VERTICAL_SHIFT:
		srl b
		srl c
		ex de, hl
		ld a, 3
		push bc
		call DRAW_SPRITE_COLUMN
		ld a, 3
		pop bc
		inc b
		call DRAW_SPRITE_COLUMN
		ret
		ENDP
		PROC
SET_TILEMAP:
		ld de, TILE_SET
		ex de, hl
		ld (hl), e
		inc hl
		ld (hl), d
		inc hl
#line 1441
		ret
		ENDP
		PROC
SET_TILE:
		add hl, hl
		add hl, hl
		add hl, hl
		add hl, hl
		add hl, hl
#line 1450
		add hl, de
		ex de, hl
		ld hl, TILE_MAP
		add hl, de
		ld (hl), a
		ld hl, $5800
		add hl, de
		ld (hl), c
		ld l, a
		ld h, 0
		add hl, hl
		add hl, hl
		add hl, hl
#line 1469
		ld bc, (TILE_SET)
		add hl, bc
		ld a, d
		rla
		rla
		rla
		or %01000000
		ld d, a
		ld a, (hl)
		ld (de), a
		inc hl
		inc d
		ld a, (hl)
		ld (de), a
		inc hl
		inc d
		ld a, (hl)
		ld (de), a
		inc hl
		inc d
		ld a, (hl)
		ld (de), a
		inc hl
		inc d
		ld a, (hl)
		ld (de), a
		inc hl
		inc d
		ld a, (hl)
		ld (de), a
		inc hl
		inc d
		ld a, (hl)
		ld (de), a
		inc hl
		inc d
		ld a, (hl)
		ld (de), a
		ret
		ENDP
		PROC
		LOCAL REAL_OP, NO_OP, END_SET
SET_TILE_CHECKED:
		add hl, hl
		add hl, hl
		add hl, hl
		add hl, hl
		add hl, hl
#line 1522
		add hl, de
		push hl
		ex de, hl
		ld hl, TILE_MAP
		add hl, de
		ld (hl), a
		ld hl, $5800
		add hl, de
		ld (hl), c
		ld l, a
		ld h, 0
		add hl, hl
		add hl, hl
		add hl, hl
#line 1543
		ld bc, (TILE_SET)
		add hl, bc
		push hl
		pop bc
		pop hl
		push hl
		push de
		push bc
		ld de, (CURRENT_DRAW_MAP)
		add hl, de
		ld a, (hl)
		and a
		jp z, NO_OP
REAL_OP:
		dec a
		ld l, a
		ld h, 0
		ld d, h
		ld e, l
#line 1572
		add hl, hl
		add hl, hl
#line 1573
		add hl, de
		ld bc, (CURRENT_DRAW_OPS)
		add hl, bc
		inc hl
		inc hl
		pop de
		ld (hl), e
		inc hl
		ld (hl), d
		inc hl
#line 1585
		ld a, 2
		ld (hl), a
		pop de
		pop de
		jp END_SET
NO_OP:
		pop hl
		pop de
		pop bc
		ld a, d
		rla
		rla
		rla
		or %01000000
		ld d, a
		ld a, (hl)
		ld (de), a
		inc hl
		inc d
		ld a, (hl)
		ld (de), a
		inc hl
		inc d
		ld a, (hl)
		ld (de), a
		inc hl
		inc d
		ld a, (hl)
		ld (de), a
		inc hl
		inc d
		ld a, (hl)
		ld (de), a
		inc hl
		inc d
		ld a, (hl)
		ld (de), a
		inc hl
		inc d
		ld a, (hl)
		ld (de), a
		inc hl
		inc d
		ld a, (hl)
		ld (de), a
END_SET:
		ret
		ENDP
		PROC
GET_TILE:
		add hl, hl
		add hl, hl
		add hl, hl
		add hl, hl
		add hl, hl
#line 1648
		add hl, de
		ex de, hl
		ld hl, TILE_MAP
		add hl, de
		ld a, (hl)
		ret
		ENDP
#line 1662 "C:/Users/geniw/source/repos/BattleGrid/BattleGrid/ZxBasicFiles/GuSprites.zxbas"
GSPRITES_LIB_END:
#line 1970 "C:/Users/geniw/source/repos/BattleGrid/BattleGrid/ZxBasicFiles/GuSprites.zxbas"
	ld a, 7
	call INK
	xor a
	call PAPER
	call COPY_ATTR
	xor a
	call BORDER
	ld a, 1
	call BRIGHT
	call COPY_ATTR
	call CLS
__LABEL__defines:
__LABEL__macros:
__LABEL__vars:
__LABEL__funcs:
__LABEL__main:
	call _InitGraphics
	call _DrawGrid
	call _InitLevel
__LABEL0:
	call _UpdatePlayer
	call _UpdateFire
	call _UpdateCursor
	call _UpdateEnemies
	call _TestCollisions
	ld a, 42
	push af
	ld a, (_playerX)
	push af
	ld a, (_playerSprite)
	call _Draw1x1Sprite
	ld a, (_activeShots)
	or a
	jp z, __LABEL3
	ld a, 1
	ld (_buc), a
	jp __LABEL4
__LABEL7:
	ld a, (_buc)
	ld l, a
	ld h, 0
	ex de, hl
	ld hl, _maskTable.__DATA__
	add hl, de
	dec hl
	ld a, (_activeShots)
	and (hl)
	jp z, __LABEL8
	ld hl, 3
	push hl
	ld a, (_buc)
	ld l, a
	dec hl
	push hl
	ld hl, _shots
	call __ARRAY
	ld a, (hl)
	sub 255
	jp z, __LABEL11
	ld hl, 1
	push hl
	ld a, (_buc)
	ld l, a
	dec hl
	push hl
	ld hl, _shots
	call __ARRAY
	ld a, (hl)
	push af
	ld hl, 0
	push hl
	ld a, (_buc)
	ld l, a
	dec hl
	push hl
	ld hl, _shots
	call __ARRAY
	ld a, (hl)
	push af
	ld hl, 3
	push hl
	ld a, (_buc)
	ld l, a
	dec hl
	push hl
	ld hl, _shots
	call __ARRAY
	ld a, (hl)
	add a, 8
	call _Draw1x1Sprite
	jp __LABEL8
__LABEL11:
	ld hl, 2
	push hl
	ld a, (_buc)
	ld l, a
	dec hl
	push hl
	ld hl, _shots
	call __ARRAY
	ld a, (hl)
	ld h, 3
	call __LTI8
	or a
	jp z, __LABEL13
	ld hl, 1
	push hl
	ld a, (_buc)
	ld l, a
	dec hl
	push hl
	ld hl, _shots
	call __ARRAY
	ld a, (hl)
	and 1
	jp z, __LABEL15
	ld hl, 1
	push hl
	ld a, (_buc)
	ld l, a
	dec hl
	push hl
	ld hl, _shots
	call __ARRAY
	ld a, (hl)
	push af
	ld hl, 0
	push hl
	ld a, (_buc)
	ld l, a
	dec hl
	push hl
	ld hl, _shots
	call __ARRAY
	ld a, (hl)
	push af
	ld a, 4
	call _Draw1x1Sprite
	jp __LABEL8
__LABEL15:
	ld hl, 1
	push hl
	ld a, (_buc)
	ld l, a
	dec hl
	push hl
	ld hl, _shots
	call __ARRAY
	ld a, (hl)
	push af
	ld hl, 0
	push hl
	ld a, (_buc)
	ld l, a
	dec hl
	push hl
	ld hl, _shots
	call __ARRAY
	ld a, (hl)
	push af
	ld a, 5
	call _Draw1x1Sprite
__LABEL16:
	jp __LABEL8
__LABEL13:
	ld hl, 0
	push hl
	ld a, (_buc)
	ld l, a
	dec hl
	push hl
	ld hl, _shots
	call __ARRAY
	ld a, (hl)
	and 1
	jp z, __LABEL17
	ld hl, 1
	push hl
	ld a, (_buc)
	ld l, a
	dec hl
	push hl
	ld hl, _shots
	call __ARRAY
	ld a, (hl)
	push af
	ld hl, 0
	push hl
	ld a, (_buc)
	ld l, a
	dec hl
	push hl
	ld hl, _shots
	call __ARRAY
	ld a, (hl)
	push af
	ld a, 6
	call _Draw1x1Sprite
	jp __LABEL8
__LABEL17:
	ld hl, 1
	push hl
	ld a, (_buc)
	ld l, a
	dec hl
	push hl
	ld hl, _shots
	call __ARRAY
	ld a, (hl)
	push af
	ld hl, 0
	push hl
	ld a, (_buc)
	ld l, a
	dec hl
	push hl
	ld hl, _shots
	call __ARRAY
	ld a, (hl)
	push af
	ld a, 7
	call _Draw1x1Sprite
__LABEL8:
	ld hl, _buc
	inc (hl)
__LABEL4:
	ld a, 3
	ld hl, (_buc - 1)
	cp h
	jp nc, __LABEL7
__LABEL3:
	ld a, (_cursorVisible)
	or a
	jp z, __LABEL20
	ld a, (_cursorY)
	add a, a
	add a, 4
	push af
	ld a, (_cursorX)
	add a, a
	add a, 2
	push af
	ld a, 12
	call _Draw1x1Sprite
__LABEL20:
	ld a, (_activeEnemies)
	or a
	jp z, __LABEL22
	ld a, 1
	ld (_buc), a
	jp __LABEL23
__LABEL26:
	ld a, (_buc)
	ld l, a
	ld h, 0
	ex de, hl
	ld hl, _maskTable.__DATA__
	add hl, de
	dec hl
	ld a, (_activeEnemies)
	and (hl)
	jp z, __LABEL27
	ld hl, 3
	push hl
	ld a, (_buc)
	ld l, a
	dec hl
	push hl
	ld hl, _enemies
	call __ARRAY
	ld a, (hl)
	sub 255
	jp z, __LABEL30
	ld hl, 1
	push hl
	ld a, (_buc)
	ld l, a
	dec hl
	push hl
	ld hl, _enemies
	call __ARRAY
	ld a, (hl)
	push af
	ld hl, 0
	push hl
	ld a, (_buc)
	ld l, a
	dec hl
	push hl
	ld hl, _enemies
	call __ARRAY
	ld a, (hl)
	push af
	ld hl, 3
	push hl
	ld a, (_buc)
	ld l, a
	dec hl
	push hl
	ld hl, _enemies
	call __ARRAY
	ld a, (hl)
	add a, 8
	call _Draw1x1Sprite
	jp __LABEL27
__LABEL30:
	ld hl, 0
	push hl
	ld a, (_buc)
	ld l, a
	dec hl
	push hl
	ld hl, _enemies
	call __ARRAY
	ld a, (hl)
	and 1
	jp z, __LABEL32
	ld hl, 1
	push hl
	ld a, (_buc)
	ld l, a
	dec hl
	push hl
	ld hl, _enemies
	call __ARRAY
	ld a, (hl)
	push af
	ld hl, 0
	push hl
	ld a, (_buc)
	ld l, a
	dec hl
	push hl
	ld hl, _enemies
	call __ARRAY
	ld a, (hl)
	push af
	ld a, 14
	call _Draw1x1Sprite
	jp __LABEL27
__LABEL32:
	ld hl, 1
	push hl
	ld a, (_buc)
	ld l, a
	dec hl
	push hl
	ld hl, _enemies
	call __ARRAY
	ld a, (hl)
	push af
	ld hl, 0
	push hl
	ld a, (_buc)
	ld l, a
	dec hl
	push hl
	ld hl, _enemies
	call __ARRAY
	ld a, (hl)
	push af
	ld a, 13
	call _Draw1x1Sprite
__LABEL27:
	ld hl, _buc
	inc (hl)
__LABEL23:
	ld a, 4
	ld hl, (_buc - 1)
	cp h
	jp nc, __LABEL26
__LABEL22:
	call _RenderFrame
	jp __LABEL0
__END_PROGRAM:
	di
	ld hl, (__CALL_BACK__)
	ld sp, hl
	exx
	pop hl
	pop iy
	pop ix
	exx
	ei
	ret
_InitGFXLib:
#line 1671 "C:/Users/geniw/source/repos/BattleGrid/BattleGrid/ZxBasicFiles/GuSprites.zxbas"
		call INIT_GFX_LIB
#line 1675 "C:/Users/geniw/source/repos/BattleGrid/BattleGrid/ZxBasicFiles/GuSprites.zxbas"
_InitGFXLib__leave:
	ret
_RenderFrame:
#line 1691 "C:/Users/geniw/source/repos/BattleGrid/BattleGrid/ZxBasicFiles/GuSprites.zxbas"
		call RENDER_FRAME
#line 1695 "C:/Users/geniw/source/repos/BattleGrid/BattleGrid/ZxBasicFiles/GuSprites.zxbas"
_RenderFrame__leave:
	ret
_Create1x1Sprite:
#line 1701 "C:/Users/geniw/source/repos/BattleGrid/BattleGrid/ZxBasicFiles/GuSprites.zxbas"
		push ix
		push iy
		call CREATE_1x1_SPRITE
		pop iy
		pop ix
#line 1709 "C:/Users/geniw/source/repos/BattleGrid/BattleGrid/ZxBasicFiles/GuSprites.zxbas"
_Create1x1Sprite__leave:
	ret
_Draw1x1Sprite:
#line 1715 "C:/Users/geniw/source/repos/BattleGrid/BattleGrid/ZxBasicFiles/GuSprites.zxbas"
		exx
		pop hl
		exx
		pop bc
		pop de
		exx
		push hl
		exx
		push ix
		push iy
		ld c, d
		call DRAW_1x1_SPRITE
		pop iy
		pop ix
#line 1733 "C:/Users/geniw/source/repos/BattleGrid/BattleGrid/ZxBasicFiles/GuSprites.zxbas"
_Draw1x1Sprite__leave:
	ret
_SetTileset:
#line 1838 "C:/Users/geniw/source/repos/BattleGrid/BattleGrid/ZxBasicFiles/GuSprites.zxbas"
		call SET_TILEMAP
#line 1840 "C:/Users/geniw/source/repos/BattleGrid/BattleGrid/ZxBasicFiles/GuSprites.zxbas"
_SetTileset__leave:
	ret
_SetTile:
#line 1846 "C:/Users/geniw/source/repos/BattleGrid/BattleGrid/ZxBasicFiles/GuSprites.zxbas"
		exx
		pop hl
		exx
		pop bc
		pop de
		pop hl
		exx
		push hl
		exx
		call SET_TILE
#line 1857 "C:/Users/geniw/source/repos/BattleGrid/BattleGrid/ZxBasicFiles/GuSprites.zxbas"
_SetTile__leave:
	ret
_SetTileChecked:
#line 1863 "C:/Users/geniw/source/repos/BattleGrid/BattleGrid/ZxBasicFiles/GuSprites.zxbas"
		exx
		pop hl
		exx
		pop bc
		pop de
		pop hl
		exx
		push hl
		exx
		call SET_TILE_CHECKED
#line 1874 "C:/Users/geniw/source/repos/BattleGrid/BattleGrid/ZxBasicFiles/GuSprites.zxbas"
_SetTileChecked__leave:
	ret
_MultiKeys:
#line 43 "C:/zxbasic/src/arch/zx48k/library/keys.bas"
		ld a, h
		in a, (0FEh)
		cpl
		and l
#line 48 "C:/zxbasic/src/arch/zx48k/library/keys.bas"
_MultiKeys__leave:
	ret
_InitGraphics:
	call _InitGFXLib
	ld hl, _tileSet.__DATA__
	call _SetTileset
	ld hl, (_spriteSet.__DATA__) + (0)
	call _Create1x1Sprite
	ld hl, (_spriteSet.__DATA__) + (8)
	call _Create1x1Sprite
	ld hl, (_spriteSet.__DATA__) + (16)
	call _Create1x1Sprite
	ld hl, (_spriteSet.__DATA__) + (24)
	call _Create1x1Sprite
	ld hl, (_spriteSet.__DATA__) + (32)
	call _Create1x1Sprite
	ld hl, (_spriteSet.__DATA__) + (40)
	call _Create1x1Sprite
	ld hl, (_spriteSet.__DATA__) + (48)
	call _Create1x1Sprite
	ld hl, (_spriteSet.__DATA__) + (56)
	call _Create1x1Sprite
	ld hl, (_spriteSet.__DATA__) + (64)
	call _Create1x1Sprite
	ld hl, (_spriteSet.__DATA__) + (72)
	call _Create1x1Sprite
	ld hl, (_spriteSet.__DATA__) + (80)
	call _Create1x1Sprite
	ld hl, (_spriteSet.__DATA__) + (88)
	call _Create1x1Sprite
	ld hl, (_spriteSet.__DATA__) + (96)
	call _Create1x1Sprite
	ld hl, (_spriteSet.__DATA__) + (104)
	call _Create1x1Sprite
_InitGraphics__leave:
	ret
_DrawGrid:
	push ix
	ld ix, 0
	add ix, sp
	ld hl, 0
	push hl
	push hl
	inc sp
	inc hl
	push hl
	dec hl
	push hl
	ld a, (_tileColors.__DATA__ + 1)
	ld l, a
	push hl
	ld a, 1
	call _SetTile
	ld hl, 1
	push hl
	ld hl, 21
	push hl
	ld a, (_tileColors.__DATA__ + 7)
	ld l, a
	push hl
	ld a, 7
	call _SetTile
	ld hl, 22
	push hl
	ld hl, 0
	push hl
	ld a, (_tileColors.__DATA__ + 3)
	ld l, a
	push hl
	ld a, 3
	call _SetTile
	ld hl, 22
	push hl
	dec hl
	push hl
	ld a, (_tileColors.__DATA__ + 9)
	ld l, a
	push hl
	ld a, 9
	call _SetTile
	ld (ix-1), 1
	jp __LABEL34
__LABEL37:
	ld hl, 1
	push hl
	ld a, (ix-1)
	ld l, a
	push hl
	ld a, (_tileColors.__DATA__ + 4)
	ld l, a
	push hl
	ld a, 4
	call _SetTile
	ld hl, 22
	push hl
	ld a, (ix-1)
	ld l, a
	push hl
	ld a, (_tileColors.__DATA__ + 6)
	ld l, a
	push hl
	ld a, 6
	call _SetTile
	inc (ix-1)
__LABEL34:
	ld a, 20
	cp (ix-1)
	jp nc, __LABEL37
	ld (ix-2), 2
	jp __LABEL39
__LABEL42:
	ld a, (ix-2)
	ld l, a
	ld h, 0
	push hl
	ld hl, 0
	push hl
	ld a, (_tileColors.__DATA__ + 2)
	ld l, a
	push hl
	ld a, 2
	call _SetTile
	ld a, (ix-2)
	ld l, a
	ld h, 0
	push hl
	ld hl, 21
	push hl
	ld a, (_tileColors.__DATA__ + 7)
	ld l, a
	push hl
	ld a, 8
	call _SetTile
	ld a, (ix-2)
	sub 21
	jp nz, __LABEL44
	ld (ix-3), 70
	jp __LABEL45
__LABEL44:
	ld (ix-3), 71
__LABEL45:
	ld (ix-1), 1
	jp __LABEL46
__LABEL49:
	ld a, (ix-2)
	ld l, a
	ld h, 0
	push hl
	ld a, (ix-1)
	ld l, a
	push hl
	ld a, (ix-3)
	ld l, a
	push hl
	ld a, 5
	call _SetTile
	inc (ix-1)
__LABEL46:
	ld a, 20
	cp (ix-1)
	jp nc, __LABEL49
	inc (ix-2)
__LABEL39:
	ld a, 21
	cp (ix-2)
	jp nc, __LABEL42
	ld (ix-1), 0
	jp __LABEL51
__LABEL54:
	ld hl, 2
	push hl
	ld a, (ix-1)
	srl a
	srl a
	add a, 23
	ld l, a
	ld h, 0
	push hl
	ld a, (ix-1)
	add a, 22
	inc a
	ld l, a
	dec hl
	push hl
	ld hl, _tileColors
	call __ARRAY
	ld a, (hl)
	ld l, a
	ld h, 0
	push hl
	ld a, (ix-1)
	add a, 22
	call _SetTile
	ld hl, 3
	push hl
	ld a, (ix-1)
	srl a
	srl a
	add a, 23
	ld l, a
	ld h, 0
	push hl
	ld a, (ix-1)
	add a, 22
	add a, 2
	ld l, a
	dec hl
	push hl
	ld hl, _tileColors
	call __ARRAY
	ld a, (hl)
	ld l, a
	ld h, 0
	push hl
	ld a, (ix-1)
	add a, 22
	inc a
	call _SetTile
	ld hl, 4
	push hl
	ld a, (ix-1)
	srl a
	srl a
	add a, 23
	ld l, a
	ld h, 0
	push hl
	ld a, (ix-1)
	add a, 22
	add a, 3
	ld l, a
	dec hl
	push hl
	ld hl, _tileColors
	call __ARRAY
	ld a, (hl)
	ld l, a
	ld h, 0
	push hl
	ld a, (ix-1)
	add a, 22
	add a, 2
	call _SetTile
	ld hl, 5
	push hl
	ld a, (ix-1)
	srl a
	srl a
	add a, 23
	ld l, a
	ld h, 0
	push hl
	ld a, (ix-1)
	add a, 22
	add a, 4
	ld l, a
	dec hl
	push hl
	ld hl, _tileColors
	call __ARRAY
	ld a, (hl)
	ld l, a
	ld h, 0
	push hl
	ld a, (ix-1)
	add a, 22
	add a, 3
	call _SetTile
	ld a, (ix-1)
	add a, 4
	ld (ix-1), a
__LABEL51:
	ld a, 31
	cp (ix-1)
	jp nc, __LABEL54
_DrawGrid__leave:
	ld sp, ix
	pop ix
	ret
_InitLevel:
	push ix
	ld ix, 0
	add ix, sp
	ld hl, 0
	push hl
	inc sp
	ld a, 9
	push af
	ld a, 24
	call PRINT_AT
	ld hl, __LABEL56
	xor a
	call __PRINTSTR
	call PRINT_EOL
	ld a, 10
	push af
	ld a, 24
	call PRINT_AT
	ld hl, __LABEL57
	xor a
	call __PRINTSTR
	call PRINT_EOL
	ld a, 12
	push af
	ld a, 24
	call PRINT_AT
	ld hl, __LABEL58
	xor a
	call __PRINTSTR
	call PRINT_EOL
	ld a, 13
	push af
	ld a, 24
	call PRINT_AT
	ld hl, __LABEL59
	xor a
	call __PRINTSTR
	call PRINT_EOL
	ld a, 15
	push af
	ld a, 24
	call PRINT_AT
	ld hl, __LABEL60
	xor a
	call __PRINTSTR
	call PRINT_EOL
	ld a, 16
	push af
	ld a, 24
	call PRINT_AT
	ld hl, __LABEL61
	xor a
	call __PRINTSTR
	call PRINT_EOL
	ld a, 255
	ld (_shots.__DATA__ + 3), a
	ld (_shots.__DATA__ + 7), a
	ld (_shots.__DATA__ + 11), a
	ld a, 20
	ld (_activeMap.__DATA__ + 42), a
	ld hl, 4
	push hl
	dec hl
	push hl
	ld a, (_tileColors.__DATA__ + 20)
	ld l, a
	push hl
	ld a, 20
	call _SetTile
	ld a, 20
	ld (_activeMap.__DATA__ + 322), a
	ld hl, 4
	push hl
	ld hl, 17
	push hl
	ld a, (_tileColors.__DATA__ + 20)
	ld l, a
	push hl
	ld a, 20
	call _SetTile
	ld a, 10
	ld (_activeMap.__DATA__ + 89), a
	ld hl, 11
	push hl
	ld hl, 5
	push hl
	ld a, (_tileColors.__DATA__ + 10)
	ld l, a
	push hl
	ld a, 10
	call _SetTile
	ld a, 11
	ld (_activeMap.__DATA__ + 80), a
	ld hl, 2
	push hl
	ld hl, 5
	push hl
	ld a, (_tileColors.__DATA__ + 11)
	ld l, a
	push hl
	ld a, 11
	call _SetTile
	ld a, 12
	ld (_activeMap.__DATA__ + 40), a
	ld hl, 2
	push hl
	inc hl
	push hl
	ld a, (_tileColors.__DATA__ + 12)
	ld l, a
	push hl
	ld a, 12
	call _SetTile
	ld a, 13
	ld (_activeMap.__DATA__ + 289), a
	ld hl, 11
	push hl
	ld hl, 15
	push hl
	ld a, (_tileColors.__DATA__ + 13)
	ld l, a
	push hl
	ld a, 13
	call _SetTile
	ld a, 10
	ld (_activeMap.__DATA__ + 2), a
	ld hl, 4
	push hl
	ld hl, 1
	push hl
	ld a, (_tileColors.__DATA__ + 10)
	ld l, a
	push hl
	ld a, 10
	call _SetTile
	ld a, 11
	ld (_activeMap.__DATA__ + 9), a
	ld hl, 11
	push hl
	ld hl, 1
	push hl
	ld a, (_tileColors.__DATA__ + 11)
	ld l, a
	push hl
	ld a, 11
	call _SetTile
	ld a, 14
	ld (_activeMap.__DATA__ + 173), a
	ld hl, 15
	push hl
	ld hl, 9
	push hl
	ld a, (_tileColors.__DATA__ + 14)
	ld l, a
	push hl
	ld a, 14
	call _SetTile
	ld a, 15
	ld (_activeMap.__DATA__ + 193), a
	ld hl, 15
	push hl
	ld hl, 10
	push hl
	ld a, (_tileColors.__DATA__ + 15)
	ld l, a
	push hl
	ld a, 15
	call _SetTile
	ld a, 15
	ld (_activeMap.__DATA__ + 213), a
	ld hl, 15
	push hl
	ld hl, 11
	push hl
	ld a, (_tileColors.__DATA__ + 15)
	ld l, a
	push hl
	ld a, 15
	call _SetTile
	ld a, 16
	ld (_activeMap.__DATA__ + 233), a
	ld hl, 15
	push hl
	ld hl, 12
	push hl
	ld a, (_tileColors.__DATA__ + 16)
	ld l, a
	push hl
	ld a, 16
	call _SetTile
	ld a, 54
	ld (_activeMap.__DATA__ + 195), a
	ld hl, 17
	push hl
	ld hl, 10
	push hl
	ld a, (_tileColors.__DATA__ + 54)
	ld l, a
	push hl
	ld a, 54
	call _SetTile
	ld a, 54
	ld (_activeMap.__DATA__ + 215), a
	ld hl, 17
	push hl
	ld hl, 11
	push hl
	ld a, (_tileColors.__DATA__ + 54)
	ld l, a
	push hl
	ld a, 54
	call _SetTile
	ld (ix-1), 1
	jp __LABEL62
__LABEL65:
	ld hl, 3
	push hl
	ld a, (ix-1)
	ld l, a
	dec hl
	push hl
	ld hl, _enemies
	call __ARRAY
	ld (hl), 255
	inc (ix-1)
__LABEL62:
	ld a, 4
	cp (ix-1)
	jp nc, __LABEL65
	ld a, 15
	ld (_activeEnemies), a
	ld a, 4
	ld (_enemies.__DATA__ + 0), a
	ld (_enemies.__DATA__ + 1), a
	ld a, 1
	ld (_enemies.__DATA__ + 2), a
	ld a, 8
	ld (_enemies.__DATA__ + 4), a
	ld a, 4
	ld (_enemies.__DATA__ + 5), a
	ld a, 1
	ld (_enemies.__DATA__ + 6), a
	ld a, 12
	ld (_enemies.__DATA__ + 8), a
	ld a, 4
	ld (_enemies.__DATA__ + 9), a
	ld a, 1
	ld (_enemies.__DATA__ + 10), a
	ld a, 16
	ld (_enemies.__DATA__ + 12), a
	ld a, 4
	ld (_enemies.__DATA__ + 13), a
	ld a, 1
	ld (_enemies.__DATA__ + 14), a
_InitLevel__leave:
	ld sp, ix
	pop ix
	ret
_UpdatePlayer:
	ld a, 1
	ld (_playerSprite), a
	ld hl, 65026
	call _MultiKeys
	or a
	jp z, __LABEL67
	ld a, 255
	ld (_dir), a
	ld a, 3
	ld (_playerSprite), a
	ld a, 2
	ld hl, (_playerX - 1)
	cp h
	jp nc, _UpdatePlayer__leave
	ld hl, _playerX
	dec (hl)
__LABEL70:
	jp _UpdatePlayer__leave
__LABEL67:
	ld hl, 65032
	call _MultiKeys
	or a
	jp z, __LABEL71
	ld a, 1
	ld (_dir), a
	ld a, 2
	ld (_playerSprite), a
	ld a, (_playerX)
	cp 40
	jp nc, _UpdatePlayer__leave
	ld hl, _playerX
	inc (hl)
__LABEL74:
	jp _UpdatePlayer__leave
__LABEL71:
	ld a, (_playerX)
	and 1
	jp nz, __LABEL75
	xor a
	ld (_dir), a
	ld a, 1
	ld (_playerSprite), a
	jp _UpdatePlayer__leave
__LABEL75:
	ld a, (_playerX)
	ld h, a
	ld a, (_dir)
	add a, h
	ld (_playerX), a
_UpdatePlayer__leave:
	ret
_CheckShotItems:
	push ix
	ld ix, 0
	add ix, sp
	ld hl, 0
	push hl
	push hl
	ld a, (ix+9)
	ld l, a
	dec hl
	push hl
	ld a, (ix+7)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld hl, _activeMap
	call __ARRAY
	ld a, (hl)
	or a
	jp z, _CheckShotItems__leave
	ld a, (ix+9)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld a, (ix+7)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld hl, _activeMap
	call __ARRAY
	ld a, (hl)
	ld (ix-1), a
	sub 20
	jp nz, __LABEL80
	ld a, (ix+5)
	ld l, a
	ld h, 0
	ex de, hl
	ld hl, _maskTable.__DATA__
	add hl, de
	dec hl
	ld a, (_activeShots)
	xor (hl)
	jp nz, __LABEL81
	ld a, 7
	ld (_activeShots), a
	ld hl, 0
	push hl
	ld a, (ix+5)
	ld l, a
	dec hl
	push hl
	ld hl, _shots
	call __ARRAY
	ld a, (hl)
	ld (ix-2), a
	ld hl, 1
	push hl
	ld a, (ix+5)
	ld l, a
	dec hl
	push hl
	ld hl, _shots
	call __ARRAY
	ld a, (hl)
	ld (ix-3), a
	ld hl, 2
	push hl
	ld a, (ix+5)
	ld l, a
	dec hl
	push hl
	ld hl, _shots
	call __ARRAY
	ld a, (hl)
	ld (ix-4), a
	dec a
	jp nz, __LABEL83
	ld a, 1
	ld (_shots.__DATA__ + 2), a
	ld a, 3
	ld (_shots.__DATA__ + 6), a
	ld a, 4
	ld (_shots.__DATA__ + 10), a
	jp __LABEL84
__LABEL83:
	ld a, (ix-4)
	sub 2
	jp nz, __LABEL85
	ld a, 2
	ld (_shots.__DATA__ + 2), a
	ld a, 3
	ld (_shots.__DATA__ + 6), a
	ld a, 4
	ld (_shots.__DATA__ + 10), a
	jp __LABEL84
__LABEL85:
	ld a, (ix-4)
	sub 3
	jp nz, __LABEL87
	ld a, 1
	ld (_shots.__DATA__ + 2), a
	ld a, 2
	ld (_shots.__DATA__ + 6), a
	ld a, 3
	ld (_shots.__DATA__ + 10), a
	jp __LABEL84
__LABEL87:
	ld a, (ix-4)
	sub 4
	jp nz, __LABEL84
	ld a, 1
	ld (_shots.__DATA__ + 2), a
	ld a, 2
	ld (_shots.__DATA__ + 6), a
	ld a, 4
	ld (_shots.__DATA__ + 10), a
__LABEL84:
	ld a, (ix-2)
	ld (_shots.__DATA__ + 0), a
	ld (_shots.__DATA__ + 4), a
	ld (_shots.__DATA__ + 8), a
	ld a, (ix-3)
	ld (_shots.__DATA__ + 1), a
	ld (_shots.__DATA__ + 5), a
	ld (_shots.__DATA__ + 9), a
	jp _CheckShotItems__leave
__LABEL81:
	ld hl, 3
	push hl
	ld a, (ix+5)
	ld l, a
	dec hl
	push hl
	ld hl, _shots
	call __ARRAY
	ld (hl), 0
__LABEL82:
	jp _CheckShotItems__leave
__LABEL80:
	ld a, (ix-1)
	sub 10
	ccf
	jp nc, __LABEL92
	ld a, 13
	sub (ix-1)
	ccf
	jp nc, __LABEL92
	ld a, (ix-1)
	sub 10
	jp nz, __LABEL95
	ld hl, 2
	push hl
	ld a, (ix+5)
	ld l, a
	dec hl
	push hl
	ld hl, _shots
	call __ARRAY
	ld a, (hl)
	ld l, a
	add a, a
	sbc a, a
	ld h, a
	ex de, hl
	ld hl, (_reflectDirsA.__DATA__) & 0xFFFF
	add hl, de
	dec hl
	ld a, (hl)
	push af
	ld hl, 2
	push hl
	ld a, (ix+5)
	ld l, a
	dec hl
	push hl
	ld hl, _shots
	call __ARRAY
	pop af
	ld (hl), a
	jp _CheckShotItems__leave
__LABEL95:
	ld a, (ix-1)
	sub 11
	jp nz, __LABEL97
	ld hl, 2
	push hl
	ld a, (ix+5)
	ld l, a
	dec hl
	push hl
	ld hl, _shots
	call __ARRAY
	ld a, (hl)
	ld l, a
	add a, a
	sbc a, a
	ld h, a
	ex de, hl
	ld hl, (_reflectDirsB.__DATA__) & 0xFFFF
	add hl, de
	dec hl
	ld a, (hl)
	push af
	ld hl, 2
	push hl
	ld a, (ix+5)
	ld l, a
	dec hl
	push hl
	ld hl, _shots
	call __ARRAY
	pop af
	ld (hl), a
	jp _CheckShotItems__leave
__LABEL97:
	ld a, (ix-1)
	sub 12
	jp nz, __LABEL99
	ld hl, 2
	push hl
	ld a, (ix+5)
	ld l, a
	dec hl
	push hl
	ld hl, _shots
	call __ARRAY
	ld a, (hl)
	ld l, a
	add a, a
	sbc a, a
	ld h, a
	ex de, hl
	ld hl, (_reflectDirsC.__DATA__) & 0xFFFF
	add hl, de
	dec hl
	ld a, (hl)
	push af
	ld hl, 2
	push hl
	ld a, (ix+5)
	ld l, a
	dec hl
	push hl
	ld hl, _shots
	call __ARRAY
	pop af
	ld (hl), a
	jp _CheckShotItems__leave
__LABEL99:
	ld hl, 2
	push hl
	ld a, (ix+5)
	ld l, a
	dec hl
	push hl
	ld hl, _shots
	call __ARRAY
	ld a, (hl)
	ld l, a
	add a, a
	sbc a, a
	ld h, a
	ex de, hl
	ld hl, (_reflectDirsD.__DATA__) & 0xFFFF
	add hl, de
	dec hl
	ld a, (hl)
	push af
	ld hl, 2
	push hl
	ld a, (ix+5)
	ld l, a
	dec hl
	push hl
	ld hl, _shots
	call __ARRAY
	pop af
	ld (hl), a
__LABEL96:
	jp _CheckShotItems__leave
__LABEL92:
	ld a, (ix-1)
	sub 14
	ccf
	jp nc, _CheckShotItems__leave
	ld a, 19
	sub (ix-1)
	ccf
	jp nc, _CheckShotItems__leave
	ld hl, 3
	push hl
	ld a, (ix+5)
	ld l, a
	dec hl
	push hl
	ld hl, _shots
	call __ARRAY
	ld (hl), 0
_CheckShotItems__leave:
	ld sp, ix
	pop ix
	exx
	pop hl
	pop bc
	pop bc
	ex (sp), hl
	exx
	ret
_UpdateFire:
	push ix
	ld ix, 0
	add ix, sp
	ld hl, -7
	add hl, sp
	ld sp, hl
	ld (hl), 0
	ld bc, 6
	ld d, h
	ld e, l
	inc de
	ldir
	ld a, (_activeShots)
	or a
	jp nz, __LABEL105
	ld a, (_dir)
	or a
	jp nz, _UpdateFire__leave
	ld hl, 65028
	call _MultiKeys
	or a
	jp z, _UpdateFire__leave
	ld a, (_playerX)
	ld (_shots.__DATA__ + 0), a
	ld a, 40
	ld (_shots.__DATA__ + 1), a
	ld a, 1
	ld (_shots.__DATA__ + 2), a
	ld (_activeShots), a
__LABEL108:
	jp _UpdateFire__leave
__LABEL105:
	ld a, (_activeShots)
	ld (ix-7), a
	ld (ix-1), 1
	jp __LABEL111
__LABEL114:
	ld a, (ix-1)
	ld l, a
	add a, a
	sbc a, a
	ld h, a
	ex de, hl
	ld hl, (_maskTable.__DATA__) & 0xFFFF
	add hl, de
	dec hl
	ld a, (hl)
	ld (ix-6), a
	ld a, (ix-7)
	and (ix-6)
	jp z, __LABEL115
	ld hl, 3
	push hl
	ld a, (ix-1)
	ld l, a
	add a, a
	sbc a, a
	ld h, a
	dec hl
	push hl
	ld hl, _shots
	call __ARRAY
	ld a, (hl)
	ld (ix-5), a
	sub 255
	jp z, __LABEL118
	inc (ix-5)
	ld a, (ix-5)
	sub 4
	jp nz, __LABEL121
	ld (ix-5), 255
	ld a, (_activeShots)
	xor (ix-6)
	ld (_activeShots), a
__LABEL121:
	ld a, (ix-5)
	push af
	ld hl, 3
	push hl
	ld a, (ix-1)
	ld l, a
	add a, a
	sbc a, a
	ld h, a
	dec hl
	push hl
	ld hl, _shots
	call __ARRAY
	pop af
	ld (hl), a
	jp __LABEL115
__LABEL118:
	ld hl, 0
	push hl
	ld a, (ix-1)
	ld l, a
	add a, a
	sbc a, a
	ld h, a
	dec hl
	push hl
	ld hl, _shots
	call __ARRAY
	ld a, (hl)
	ld (ix-2), a
	ld hl, 1
	push hl
	ld a, (ix-1)
	ld l, a
	add a, a
	sbc a, a
	ld h, a
	dec hl
	push hl
	ld hl, _shots
	call __ARRAY
	ld a, (hl)
	ld (ix-3), a
	ld hl, 2
	push hl
	ld a, (ix-1)
	ld l, a
	add a, a
	sbc a, a
	ld h, a
	dec hl
	push hl
	ld hl, _shots
	call __ARRAY
	ld a, (hl)
	ld (ix-4), a
	dec a
	jp nz, __LABEL122
	ld a, (ix-3)
	ld h, 4
	call __LEI8
	or a
	jp z, __LABEL124
	ld hl, 3
	push hl
	ld a, (ix-1)
	ld l, a
	add a, a
	sbc a, a
	ld h, a
	dec hl
	push hl
	ld hl, _shots
	call __ARRAY
	ld (hl), 0
	ld (ix-3), 4
	jp __LABEL123
__LABEL124:
	dec (ix-3)
__LABEL125:
	jp __LABEL123
__LABEL122:
	ld a, (ix-4)
	sub 2
	jp nz, __LABEL126
	ld h, (ix-3)
	ld a, 42
	call __LEI8
	or a
	jp z, __LABEL128
	ld hl, 3
	push hl
	ld a, (ix-1)
	ld l, a
	add a, a
	sbc a, a
	ld h, a
	dec hl
	push hl
	ld hl, _shots
	call __ARRAY
	ld (hl), 0
	ld (ix-3), 42
	jp __LABEL123
__LABEL128:
	inc (ix-3)
__LABEL129:
	jp __LABEL123
__LABEL126:
	ld a, (ix-4)
	sub 3
	jp nz, __LABEL130
	ld a, (ix-2)
	ld h, 2
	call __LEI8
	or a
	jp z, __LABEL132
	ld hl, 3
	push hl
	ld a, (ix-1)
	ld l, a
	add a, a
	sbc a, a
	ld h, a
	dec hl
	push hl
	ld hl, _shots
	call __ARRAY
	ld (hl), 0
	ld (ix-2), 2
	jp __LABEL123
__LABEL132:
	dec (ix-2)
__LABEL133:
	jp __LABEL123
__LABEL130:
	ld a, (ix-4)
	sub 4
	jp nz, __LABEL123
	ld h, (ix-2)
	ld a, 40
	call __LEI8
	or a
	jp z, __LABEL136
	ld hl, 3
	push hl
	ld a, (ix-1)
	ld l, a
	add a, a
	sbc a, a
	ld h, a
	dec hl
	push hl
	ld hl, _shots
	call __ARRAY
	ld (hl), 0
	ld (ix-2), 40
	jp __LABEL123
__LABEL136:
	inc (ix-2)
__LABEL123:
	ld a, (ix-2)
	push af
	ld hl, 0
	push hl
	ld a, (ix-1)
	ld l, a
	add a, a
	sbc a, a
	ld h, a
	dec hl
	push hl
	ld hl, _shots
	call __ARRAY
	pop af
	ld (hl), a
	ld a, (ix-3)
	push af
	ld hl, 1
	push hl
	ld a, (ix-1)
	ld l, a
	add a, a
	sbc a, a
	ld h, a
	dec hl
	push hl
	ld hl, _shots
	call __ARRAY
	pop af
	ld (hl), a
	ld hl, 3
	push hl
	ld a, (ix-1)
	ld l, a
	add a, a
	sbc a, a
	ld h, a
	dec hl
	push hl
	ld hl, _shots
	call __ARRAY
	ld a, (hl)
	sub 255
	jp nz, __LABEL115
	ld a, (ix-2)
	and 1
	ld d, a
	ld a, (ix-3)
	and 1
	or d
	jp nz, __LABEL115
	ld a, (ix-3)
	sra a
	dec a
	push af
	ld a, (ix-2)
	sra a
	push af
	ld a, (ix-1)
	push af
	call _CheckShotItems
__LABEL115:
	inc (ix-1)
__LABEL111:
	ld h, (ix-1)
	ld a, 3
	call __LTI8
	or a
	jp z, __LABEL114
_UpdateFire__leave:
	ld sp, ix
	pop ix
	ret
_CheckCursorAction:
	push ix
	ld ix, 0
	add ix, sp
	ld hl, 0
	push hl
	inc sp
	ld a, (_cursorTool)
	or a
	jp nz, _CheckCursorAction__leave
	ld a, (ix+7)
	ld l, a
	dec hl
	push hl
	ld a, (ix+5)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld hl, _activeMap
	call __ARRAY
	ld a, (hl)
	ld (ix-1), a
	or a
	jp z, _CheckCursorAction__leave
	ld a, (ix-1)
	sub 10
	jp nz, __LABEL146
	ld a, (ix+7)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld a, (ix+5)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld hl, _activeMap
	call __ARRAY
	ld (hl), 11
	ld (ix-1), 0
	jp __LABEL145
__LABEL146:
	ld a, (ix-1)
	sub 11
	jp nz, __LABEL148
	ld a, (ix+7)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld a, (ix+5)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld hl, _activeMap
	call __ARRAY
	ld (hl), 13
	ld (ix-1), 0
	jp __LABEL145
__LABEL148:
	ld a, (ix-1)
	sub 13
	jp nz, __LABEL150
	ld a, (ix+7)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld a, (ix+5)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld hl, _activeMap
	call __ARRAY
	ld (hl), 12
	ld (ix-1), 0
	jp __LABEL145
__LABEL150:
	ld a, (ix-1)
	sub 12
	jp nz, __LABEL145
	ld a, (ix+7)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld a, (ix+5)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld hl, _activeMap
	call __ARRAY
	ld (hl), 10
	ld (ix-1), 0
__LABEL145:
	ld a, (ix-1)
	or a
	jp nz, _CheckCursorAction__leave
	ld a, (ix+7)
	inc a
	ld l, a
	ld h, 0
	push hl
	ld a, (ix+5)
	ld l, a
	push hl
	ld a, (_tileColors.__DATA__ + 10)
	ld l, a
	push hl
	ld a, (ix+7)
	ld l, a
	dec hl
	push hl
	ld a, (ix+5)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld hl, _activeMap
	call __ARRAY
	ld a, (hl)
	call _SetTileChecked
_CheckCursorAction__leave:
	ld sp, ix
	pop ix
	exx
	pop hl
	pop bc
	ex (sp), hl
	exx
	ret
_UpdateCursor:
	ld hl, _cursorFrames
	dec (hl)
	ld a, (_cursorMoved)
	sub 1
	sbc a, a
	ld d, a
	ld a, (_cursorFrames)
	sub 1
	sbc a, a
	or d
	jp z, __LABEL156
	xor a
	ld hl, (_cursorX - 1)
	cp h
	jp nc, __LABEL159
	ld hl, 48904
	call _MultiKeys
	or a
	jp z, __LABEL159
	ld hl, _cursorX
	dec (hl)
	ld a, 1
	ld (_cursorMoved), a
	ld (_cursorVisible), a
	ld a, 5
	ld (_cursorFrames), a
	jp __LABEL__CHECKCURSORFRAMES
__LABEL159:
	ld a, (_cursorX)
	cp 19
	jp nc, __LABEL163
	ld hl, 48898
	call _MultiKeys
	or a
	jp z, __LABEL163
	ld hl, _cursorX
	inc (hl)
	ld a, 1
	ld (_cursorMoved), a
	ld (_cursorVisible), a
	ld a, 5
	ld (_cursorFrames), a
	jp __LABEL__CHECKCURSORFRAMES
__LABEL163:
	xor a
	ld hl, (_cursorY - 1)
	cp h
	jp nc, __LABEL167
	ld hl, 57092
	call _MultiKeys
	or a
	jp z, __LABEL167
	ld hl, _cursorY
	dec (hl)
	ld a, 1
	ld (_cursorMoved), a
	ld (_cursorVisible), a
	ld a, 5
	ld (_cursorFrames), a
	jp __LABEL__CHECKCURSORFRAMES
__LABEL167:
	ld a, (_cursorY)
	cp 19
	jp nc, __LABEL171
	ld hl, 48900
	call _MultiKeys
	or a
	jp z, __LABEL171
	ld hl, _cursorY
	inc (hl)
	ld a, 1
	ld (_cursorMoved), a
	ld (_cursorVisible), a
	ld a, 5
	ld (_cursorFrames), a
	jp __LABEL__CHECKCURSORFRAMES
__LABEL171:
	ld hl, 32513
	call _MultiKeys
	or a
	jp z, __LABEL174
	ld a, (_cursorY)
	inc a
	push af
	ld a, (_cursorX)
	inc a
	push af
	call _CheckCursorAction
	ld a, 1
	ld (_cursorMoved), a
	ld (_cursorVisible), a
	ld a, 5
	ld (_cursorFrames), a
	jp __LABEL__CHECKCURSORFRAMES
__LABEL174:
	xor a
	ld (_cursorMoved), a
__LABEL175:
	jp __LABEL__CHECKCURSORFRAMES
__LABEL156:
	call INKEY
	ld de, __LABEL176
	ld a, 1
	call __STREQ
	or a
	jp z, __LABEL__CHECKCURSORFRAMES
	xor a
	ld (_cursorMoved), a
__LABEL__CHECKCURSORFRAMES:
	ld a, (_cursorFrames)
	or a
	jp nz, _UpdateCursor__leave
	ld a, (_cursorVisible)
	sub 1
	sbc a, a
	ld (_cursorVisible), a
	ld a, 10
	ld (_cursorFrames), a
_UpdateCursor__leave:
	ret
_UpdateEnemies:
	push ix
	ld ix, 0
	add ix, sp
	ld hl, -9
	add hl, sp
	ld sp, hl
	ld (hl), 0
	ld bc, 8
	ld d, h
	ld e, l
	inc de
	ldir
	ld a, (_activeEnemies)
	or a
	jp z, _UpdateEnemies__leave
	ld hl, _enemyFrame
	dec (hl)
	ld a, (_enemyFrame)
	or a
	jp nz, _UpdateEnemies__leave
	ld a, 10
	ld (_enemyFrame), a
	ld (ix-1), 1
	jp __LABEL185
__LABEL188:
	ld a, (ix-1)
	ld l, a
	ld h, 0
	ex de, hl
	ld hl, _maskTable.__DATA__
	add hl, de
	dec hl
	ld a, (hl)
	ld (ix-8), a
	ld h, a
	ld a, (_activeEnemies)
	and h
	jp z, __LABEL189
	ld hl, 3
	push hl
	ld a, (ix-1)
	ld l, a
	dec hl
	push hl
	ld hl, _enemies
	call __ARRAY
	ld a, (hl)
	ld (ix-2), a
	sub 255
	jp z, __LABEL192
	inc (ix-2)
	ld a, (ix-2)
	sub 4
	jp nz, __LABEL195
	ld (ix-2), 255
	ld a, (_activeEnemies)
	xor (ix-8)
	ld (_activeEnemies), a
__LABEL195:
	ld a, (ix-2)
	push af
	ld hl, 3
	push hl
	ld a, (ix-1)
	ld l, a
	dec hl
	push hl
	ld hl, _enemies
	call __ARRAY
	pop af
	ld (hl), a
	jp __LABEL189
__LABEL192:
	ld hl, 0
	push hl
	ld a, (ix-1)
	ld l, a
	dec hl
	push hl
	ld hl, _enemies
	call __ARRAY
	ld a, (hl)
	ld (ix-3), a
	ld hl, 1
	push hl
	ld a, (ix-1)
	ld l, a
	dec hl
	push hl
	ld hl, _enemies
	call __ARRAY
	ld a, (hl)
	ld (ix-4), a
	ld hl, 2
	push hl
	ld a, (ix-1)
	ld l, a
	dec hl
	push hl
	ld hl, _enemies
	call __ARRAY
	ld a, (hl)
	ld (ix-5), a
	ld a, (ix-3)
	and 1
	jp z, __LABEL196
	ld a, (ix-3)
	add a, (ix-5)
	ld (ix-3), a
	jp __LABEL__ENDTESTCELL
__LABEL196:
	ld a, (ix-3)
	sra a
	ld (ix-6), a
	ld a, (ix-4)
	sra a
	dec a
	ld (ix-7), a
	ld h, (ix-6)
	ld a, 1
	call __LTI8
	push af
	ld a, (ix-5)
	sub 255
	sub 1
	sbc a, a
	ld h, a
	pop af
	or a
	jr z, __LABEL276
	ld a, h
__LABEL276:
	push af
	ld a, (ix-6)
	ld h, 20
	call __LTI8
	push af
	ld a, (ix-5)
	dec a
	sub 1
	sbc a, a
	ld h, a
	pop af
	or a
	jr z, __LABEL277
	ld a, h
__LABEL277:
	pop de
	or d
	jp z, __LABEL199
	ld a, (ix-7)
	ld l, a
	add a, a
	sbc a, a
	ld h, a
	dec hl
	push hl
	ld a, (ix-6)
	add a, (ix-5)
	ld l, a
	add a, a
	sbc a, a
	ld h, a
	dec hl
	push hl
	ld hl, _activeMap
	call __ARRAY
	ld a, (hl)
	ld (ix-9), a
	or a
	jp nz, __LABEL200
	ld a, (ix-3)
	add a, (ix-5)
	ld (ix-3), a
	jp __LABEL__ENDTESTCELL
__LABEL200:
	ld a, (ix-9)
	sub 54
	jp nz, __LABEL199
	ld a, (ix-7)
	ld l, a
	add a, a
	sbc a, a
	ld h, a
	dec hl
	push hl
	ld a, (ix-6)
	add a, (ix-5)
	ld l, a
	add a, a
	sbc a, a
	ld h, a
	dec hl
	push hl
	ld hl, _activeMap
	call __ARRAY
	ld (hl), 0
	ld a, (ix-7)
	inc a
	ld l, a
	add a, a
	sbc a, a
	ld h, a
	push hl
	ld a, (ix-6)
	add a, (ix-5)
	ld l, a
	add a, a
	sbc a, a
	ld h, a
	push hl
	ld hl, 71
	push hl
	ld a, 5
	call _SetTileChecked
	ld hl, 3
	push hl
	ld a, (ix-1)
	ld l, a
	dec hl
	push hl
	ld hl, _enemies
	call __ARRAY
	ld (hl), 0
	jp __LABEL__ENDTESTCELL
__LABEL199:
	ld a, (ix-7)
	ld h, 20
	call __LTI8
	or a
	jp z, __LABEL205
	ld a, (ix-7)
	inc a
	ld l, a
	add a, a
	sbc a, a
	ld h, a
	dec hl
	push hl
	ld a, (ix-6)
	ld l, a
	add a, a
	sbc a, a
	ld h, a
	dec hl
	push hl
	ld hl, _activeMap
	call __ARRAY
	ld a, (hl)
	ld (ix-9), a
	or a
	jp nz, __LABEL206
	ld a, (ix-5)
	neg
	ld (ix-5), a
	ld a, (ix-4)
	add a, 2
	ld (ix-4), a
	jp __LABEL__ENDTESTCELL
__LABEL206:
	ld a, (ix-9)
	sub 54
	jp nz, __LABEL205
	ld a, (ix-7)
	inc a
	ld l, a
	add a, a
	sbc a, a
	ld h, a
	dec hl
	push hl
	ld a, (ix-6)
	ld l, a
	add a, a
	sbc a, a
	ld h, a
	dec hl
	push hl
	ld hl, _activeMap
	call __ARRAY
	ld (hl), 0
	ld a, (ix-7)
	inc a
	inc a
	ld l, a
	add a, a
	sbc a, a
	ld h, a
	push hl
	ld a, (ix-6)
	ld l, a
	add a, a
	sbc a, a
	ld h, a
	push hl
	ld hl, 71
	push hl
	ld a, 5
	call _SetTileChecked
	ld hl, 3
	push hl
	ld a, (ix-1)
	ld l, a
	dec hl
	push hl
	ld hl, _enemies
	call __ARRAY
	ld (hl), 0
	jp __LABEL__ENDTESTCELL
__LABEL205:
	ld a, (ix-7)
	ld h, 20
	call __LTI8
	push af
	ld h, (ix-6)
	ld a, 1
	call __LTI8
	push af
	ld a, (ix-5)
	dec a
	sub 1
	sbc a, a
	ld h, a
	pop af
	or a
	jr z, __LABEL278
	ld a, h
__LABEL278:
	push af
	ld a, (ix-6)
	ld h, 20
	call __LTI8
	push af
	ld a, (ix-5)
	sub 255
	sub 1
	sbc a, a
	ld h, a
	pop af
	or a
	jr z, __LABEL279
	ld a, h
__LABEL279:
	pop de
	or d
	ld h, a
	pop af
	or a
	jr z, __LABEL280
	ld a, h
__LABEL280:
	or a
	jp z, __LABEL211
	ld a, (ix-7)
	ld l, a
	add a, a
	sbc a, a
	ld h, a
	dec hl
	push hl
	ld a, (ix-6)
	sub (ix-5)
	ld l, a
	add a, a
	sbc a, a
	ld h, a
	dec hl
	push hl
	ld hl, _activeMap
	call __ARRAY
	ld a, (hl)
	ld (ix-9), a
	or a
	jp nz, __LABEL212
	ld a, (ix-5)
	neg
	ld (ix-5), a
	ld a, (ix-3)
	add a, (ix-5)
	ld (ix-3), a
	jp __LABEL__ENDTESTCELL
__LABEL212:
	ld a, (ix-9)
	sub 54
	jp nz, __LABEL211
	ld a, (ix-7)
	ld l, a
	add a, a
	sbc a, a
	ld h, a
	dec hl
	push hl
	ld a, (ix-6)
	sub (ix-5)
	ld l, a
	add a, a
	sbc a, a
	ld h, a
	dec hl
	push hl
	ld hl, _activeMap
	call __ARRAY
	ld (hl), 0
	ld a, (ix-7)
	inc a
	ld l, a
	add a, a
	sbc a, a
	ld h, a
	push hl
	ld a, (ix-6)
	sub (ix-5)
	ld l, a
	add a, a
	sbc a, a
	ld h, a
	push hl
	ld hl, 71
	push hl
	ld a, 5
	call _SetTileChecked
	ld hl, 3
	push hl
	ld a, (ix-1)
	ld l, a
	dec hl
	push hl
	ld hl, _enemies
	call __ARRAY
	ld (hl), 0
	jp __LABEL__ENDTESTCELL
__LABEL211:
	ld hl, 3
	push hl
	ld a, (ix-1)
	ld l, a
	dec hl
	push hl
	ld hl, _enemies
	call __ARRAY
	ld (hl), 0
__LABEL__ENDTESTCELL:
	ld a, (ix-3)
	push af
	ld hl, 0
	push hl
	ld a, (ix-1)
	ld l, a
	dec hl
	push hl
	ld hl, _enemies
	call __ARRAY
	pop af
	ld (hl), a
	ld a, (ix-4)
	push af
	ld hl, 1
	push hl
	ld a, (ix-1)
	ld l, a
	dec hl
	push hl
	ld hl, _enemies
	call __ARRAY
	pop af
	ld (hl), a
	ld a, (ix-5)
	push af
	ld hl, 2
	push hl
	ld a, (ix-1)
	ld l, a
	dec hl
	push hl
	ld hl, _enemies
	call __ARRAY
	pop af
	ld (hl), a
__LABEL189:
	inc (ix-1)
__LABEL185:
	ld a, 4
	cp (ix-1)
	jp nc, __LABEL188
_UpdateEnemies__leave:
	ld sp, ix
	pop ix
	ret
_TestCollisions:
	push ix
	ld ix, 0
	add ix, sp
	ld hl, -13
	add hl, sp
	ld sp, hl
	ld (hl), 0
	ld bc, 12
	ld d, h
	ld e, l
	inc de
	ldir
	ld a, (_activeShots)
	or a
	jp z, __LABEL216
	ld a, (_shots.__DATA__ + 0)
	ld (ix-2), a
	ld a, (_shots.__DATA__ + 1)
	ld (ix-3), a
	ld a, (_activeShots)
	and 1
	ld (ix-8), a
	ld a, (_shots.__DATA__ + 4)
	ld (ix-4), a
	ld a, (_shots.__DATA__ + 5)
	ld (ix-5), a
	ld a, (_activeShots)
	and 2
	ld (ix-9), a
	ld a, (_shots.__DATA__ + 8)
	ld (ix-6), a
	ld a, (_shots.__DATA__ + 9)
	ld (ix-7), a
	ld a, (_activeShots)
	and 4
	ld (ix-10), a
	ld a, (_activeEnemies)
	or a
	jp z, __LABEL219
	ld (ix-1), 1
	jp __LABEL220
__LABEL223:
	ld a, (ix-1)
	ld l, a
	ld h, 0
	ex de, hl
	ld hl, _maskTable.__DATA__
	add hl, de
	dec hl
	ld a, (_activeEnemies)
	and (hl)
	jp z, __LABEL224
	ld hl, 0
	push hl
	ld a, (ix-1)
	ld l, a
	dec hl
	push hl
	ld hl, _enemies
	call __ARRAY
	ld a, (hl)
	ld (ix-11), a
	ld hl, 1
	push hl
	ld a, (ix-1)
	ld l, a
	dec hl
	push hl
	ld hl, _enemies
	call __ARRAY
	ld a, (hl)
	ld (ix-12), a
	ld a, (ix-8)
	or a
	jp z, __LABEL228
	ld a, (ix-11)
	sub (ix-2)
	jp nz, __LABEL228
	ld a, (ix-12)
	sub (ix-3)
	jp nz, __LABEL228
	ld hl, 3
	push hl
	ld a, (ix-1)
	ld l, a
	dec hl
	push hl
	ld hl, _enemies
	call __ARRAY
	ld (hl), 0
	ld a, (_activeShots)
	and 254
	ld (_activeShots), a
	jp __LABEL224
__LABEL228:
	ld a, (ix-9)
	or a
	jp z, __LABEL234
	ld a, (ix-11)
	sub (ix-4)
	jp nz, __LABEL234
	ld a, (ix-12)
	sub (ix-5)
	jp nz, __LABEL234
	ld hl, 3
	push hl
	ld a, (ix-1)
	ld l, a
	dec hl
	push hl
	ld hl, _enemies
	call __ARRAY
	ld (hl), 0
	ld a, (_activeShots)
	and 253
	ld (_activeShots), a
	jp __LABEL224
__LABEL234:
	ld a, (ix-10)
	or a
	jp z, __LABEL224
	ld a, (ix-11)
	sub (ix-6)
	jp nz, __LABEL224
	ld a, (ix-12)
	sub (ix-7)
	jp nz, __LABEL224
	ld hl, 3
	push hl
	ld a, (ix-1)
	ld l, a
	dec hl
	push hl
	ld hl, _enemies
	call __ARRAY
	ld (hl), 0
	ld a, (_activeShots)
	and 251
	ld (_activeShots), a
__LABEL224:
	inc (ix-1)
__LABEL220:
	ld a, 4
	cp (ix-1)
	jp nc, __LABEL223
__LABEL219:
	ld a, (ix-8)
	or a
	jp z, __LABEL246
	ld a, (_playerX)
	sub (ix-2)
	jp nz, __LABEL246
	ld a, 42
	sub (ix-3)
	jp nz, __LABEL246
	ld a, (_activeShots)
	and 254
	ld (_activeShots), a
	jp _TestCollisions__leave
__LABEL246:
	ld a, (ix-9)
	or a
	jp z, __LABEL252
	ld a, (_playerX)
	sub (ix-4)
	jp nz, __LABEL252
	ld a, 42
	sub (ix-5)
	jp nz, __LABEL252
	ld a, (_activeShots)
	and 253
	ld (_activeShots), a
	jp _TestCollisions__leave
__LABEL252:
	ld a, (ix-10)
	or a
	jp z, _TestCollisions__leave
	ld a, (_playerX)
	sub (ix-6)
	jp nz, _TestCollisions__leave
	ld a, 42
	sub (ix-7)
	jp nz, _TestCollisions__leave
	ld a, (_activeShots)
	and 251
	ld (_activeShots), a
	jp _TestCollisions__leave
__LABEL258:
	jp _TestCollisions__leave
__LABEL216:
	ld a, (_activeEnemies)
	or a
	jp z, _TestCollisions__leave
	ld (ix-1), 1
	jp __LABEL265
__LABEL268:
	ld a, (ix-1)
	ld l, a
	ld h, 0
	ex de, hl
	ld hl, _maskTable.__DATA__
	add hl, de
	dec hl
	ld a, (hl)
	ld (ix-13), a
	ld h, a
	ld a, (_activeEnemies)
	and h
	jp z, __LABEL269
	ld hl, 0
	push hl
	ld a, (ix-1)
	ld l, a
	dec hl
	push hl
	ld hl, _enemies
	call __ARRAY
	ld a, (hl)
	ld (ix-11), a
	ld hl, 1
	push hl
	ld a, (ix-1)
	ld l, a
	dec hl
	push hl
	ld hl, _enemies
	call __ARRAY
	ld a, (hl)
	ld (ix-12), a
	sub 42
	jp nz, __LABEL269
	ld a, (ix-11)
	ld hl, (_playerX - 1)
	sub h
	jp nz, __LABEL269
	ld a, (_activeEnemies)
	xor (ix-13)
	ld (_activeEnemies), a
	jp _TestCollisions__leave
__LABEL269:
	inc (ix-1)
__LABEL265:
	ld a, 4
	cp (ix-1)
	jp nc, __LABEL268
_TestCollisions__leave:
	ld sp, ix
	pop ix
	ret
__LABEL56:
	DEFW 0006h
	DEFB 4Ch
	DEFB 45h
	DEFB 56h
	DEFB 45h
	DEFB 4Ch
	DEFB 3Ah
__LABEL57:
	DEFW 0002h
	DEFB 30h
	DEFB 31h
__LABEL58:
	DEFW 0006h
	DEFB 53h
	DEFB 43h
	DEFB 4Fh
	DEFB 52h
	DEFB 45h
	DEFB 3Ah
__LABEL59:
	DEFW 0006h
	DEFB 30h
	DEFB 30h
	DEFB 30h
	DEFB 30h
	DEFB 30h
	DEFB 30h
__LABEL60:
	DEFW 0005h
	DEFB 54h
	DEFB 4Fh
	DEFB 4Fh
	DEFB 4Ch
	DEFB 3Ah
__LABEL61:
	DEFW 0004h
	DEFB 4Eh
	DEFB 4Fh
	DEFB 4Eh
	DEFB 45h
__LABEL176:
	DEFW 0000h
	;; --- end of user code ---
#line 1 "C:/zxbasic/src/arch/zx48k/library-asm/array.asm"
; vim: ts=4:et:sw=4:
	; Copyleft (K) by Jose M. Rodriguez de la Rosa
	;  (a.k.a. Boriel)
;  http://www.boriel.com
	; -------------------------------------------------------------------
	; Simple array Index routine
	; Number of total indexes dimensions - 1 at beginning of memory
	; HL = Start of array memory (First two bytes contains N-1 dimensions)
	; Dimension values on the stack, (top of the stack, highest dimension)
	; E.g. A(2, 4) -> PUSH <4>; PUSH <2>

	; For any array of N dimension A(aN-1, ..., a1, a0)
	; and dimensions D[bN-1, ..., b1, b0], the offset is calculated as
	; O = [a0 + b0 * (a1 + b1 * (a2 + ... bN-2(aN-1)))]
; What I will do here is to calculate the following sequence:
	; ((aN-1 * bN-2) + aN-2) * bN-3 + ...


#line 1 "C:/zxbasic/src/arch/zx48k/library-asm/mul16.asm"
__MUL16:	; Mutiplies HL with the last value stored into de stack
				; Works for both signed and unsigned

			PROC

			LOCAL __MUL16LOOP
	        LOCAL __MUL16NOADD

			ex de, hl
			pop hl		; Return address
			ex (sp), hl ; CALLEE caller convention

__MUL16_FAST:
	        ld b, 16
	        ld a, h
	        ld c, l
	        ld hl, 0

__MUL16LOOP:
	        add hl, hl  ; hl << 1
	        sla c
	        rla         ; a,c << 1
	        jp nc, __MUL16NOADD
	        add hl, de

__MUL16NOADD:
	        djnz __MUL16LOOP

			ret	; Result in hl (16 lower bits)

			ENDP

#line 20 "C:/zxbasic/src/arch/zx48k/library-asm/array.asm"

#line 24 "C:/zxbasic/src/arch/zx48k/library-asm/array.asm"

__ARRAY_PTR:   ;; computes an array offset from a pointer
	    ld c, (hl)
	    inc hl
	    ld h, (hl)
	    ld l, c

__ARRAY:
		PROC

		LOCAL LOOP
		LOCAL ARRAY_END
		LOCAL RET_ADDRESS ; Stores return address
		LOCAL TMP_ARR_PTR ; Stores pointer temporarily

	    ld e, (hl)
	    inc hl
	    ld d, (hl)
	    inc hl
	    ld (TMP_ARR_PTR), hl
	    ex de, hl
		ex (sp), hl	; Return address in HL, array address in the stack
		ld (RET_ADDRESS + 1), hl ; Stores it for later

		exx
		pop hl		; Will use H'L' as the pointer
		ld c, (hl)	; Loads Number of dimensions from (hl)
		inc hl
		ld b, (hl)
		inc hl		; Ready
		exx

		ld hl, 0	; HL = Offset "accumulator"

LOOP:
#line 62 "C:/zxbasic/src/arch/zx48k/library-asm/array.asm"
		pop bc		; Get next index (Ai) from the stack

#line 72 "C:/zxbasic/src/arch/zx48k/library-asm/array.asm"

		add hl, bc	; Adds current index

		exx			; Checks if B'C' = 0
		ld a, b		; Which means we must exit (last element is not multiplied by anything)
		or c
		jr z, ARRAY_END		; if B'Ci == 0 we are done

		ld e, (hl)			; Loads next dimension into D'E'
		inc hl
		ld d, (hl)
		inc hl
		push de
		dec bc				; Decrements loop counter
		exx
		pop de				; DE = Max bound Number (i-th dimension)

	    call __FNMUL
		jp LOOP

ARRAY_END:
		ld a, (hl)
		exx

#line 101 "C:/zxbasic/src/arch/zx48k/library-asm/array.asm"
	    LOCAL ARRAY_SIZE_LOOP

	    ex de, hl
	    ld hl, 0
	    ld b, a
ARRAY_SIZE_LOOP:
	    add hl, de
	    djnz ARRAY_SIZE_LOOP

#line 111 "C:/zxbasic/src/arch/zx48k/library-asm/array.asm"

	    ex de, hl
		ld hl, (TMP_ARR_PTR)
		ld a, (hl)
		inc hl
		ld h, (hl)
		ld l, a
		add hl, de  ; Adds element start

RET_ADDRESS:
		jp 0

	    ;; Performs a faster multiply for little 16bit numbs
	    LOCAL __FNMUL, __FNMUL2

__FNMUL:
	    xor a
	    or h
	    jp nz, __MUL16_FAST
	    or l
	    ret z

	    cp 33
	    jp nc, __MUL16_FAST

	    ld b, l
	    ld l, h  ; HL = 0

__FNMUL2:
	    add hl, de
	    djnz __FNMUL2
	    ret

TMP_ARR_PTR:
	    DW 0  ; temporary storage for pointer to tables

		ENDP

#line 4007 "C:\Users\geniw\source\repos\BattleGrid\BattleGrid\ZxBasicFiles\BattleGrid.zxbas"
#line 1 "C:/zxbasic/src/arch/zx48k/library-asm/border.asm"
	; __FASTCALL__ Routine to change de border
	; Parameter (color) specified in A register

	BORDER EQU 229Bh

	; Nothing to do! (Directly from the ZX Spectrum ROM)

#line 4008 "C:\Users\geniw\source\repos\BattleGrid\BattleGrid\ZxBasicFiles\BattleGrid.zxbas"
#line 1 "C:/zxbasic/src/arch/zx48k/library-asm/bright.asm"
	; Sets bright flag in ATTR_P permanently
; Parameter: Paper color in A register

#line 1 "C:/zxbasic/src/arch/zx48k/library-asm/const.asm"
	; Global constants

	P_FLAG	EQU 23697
	FLAGS2	EQU 23681
	ATTR_P	EQU 23693	; permanet ATTRIBUTES
	ATTR_T	EQU 23695	; temporary ATTRIBUTES
	CHARS	EQU 23606 ; Pointer to ROM/RAM Charset
	UDG	EQU 23675 ; Pointer to UDG Charset
	MEM0	EQU 5C92h ; Temporary memory buffer used by ROM chars

#line 5 "C:/zxbasic/src/arch/zx48k/library-asm/bright.asm"

BRIGHT:
		ld hl, ATTR_P

	    PROC
	    LOCAL IS_TR
	    LOCAL IS_ZERO

__SET_BRIGHT:
		; Another entry. This will set the bright flag at location pointer by DE
		cp 8
		jr z, IS_TR

		; # Convert to 0/1
		or a
		jr z, IS_ZERO
		ld a, 0x40

IS_ZERO:
		ld b, a	; Saves the color
		ld a, (hl)
		and 0BFh ; Clears previous value
		or b
		ld (hl), a
		inc hl
		res 6, (hl)  ;Reset bit 6 to disable transparency
		ret

IS_TR:  ; transparent
		inc hl ; Points DE to MASK_T or MASK_P
	    set 6, (hl)  ;Set bit 6 to enable transparency
		ret

	; Sets the BRIGHT flag passed in A register in the ATTR_T variable
BRIGHT_TMP:
		ld hl, ATTR_T
		jr __SET_BRIGHT
	    ENDP
#line 4009 "C:\Users\geniw\source\repos\BattleGrid\BattleGrid\ZxBasicFiles\BattleGrid.zxbas"
#line 1 "C:/zxbasic/src/arch/zx48k/library-asm/cls.asm"
	; JUMPS directly to spectrum CLS
	; This routine does not clear lower screen

	;CLS	EQU	0DAFh

	; Our faster implementation

#line 1 "C:/zxbasic/src/arch/zx48k/library-asm/sposn.asm"
	; Printing positioning library.
			PROC
			LOCAL ECHO_E

__LOAD_S_POSN:		; Loads into DE current ROW, COL print position from S_POSN mem var.
			ld de, (S_POSN)
			ld hl, (MAXX)
			or a
			sbc hl, de
			ex de, hl
			ret


__SAVE_S_POSN:		; Saves ROW, COL from DE into S_POSN mem var.
			ld hl, (MAXX)
			or a
			sbc hl, de
			ld (S_POSN), hl ; saves it again
			ret


	ECHO_E	EQU 23682
	MAXX	EQU ECHO_E   ; Max X position + 1
	MAXY	EQU MAXX + 1 ; Max Y position + 1

	S_POSN	EQU 23688
	POSX	EQU S_POSN		; Current POS X
	POSY	EQU S_POSN + 1	; Current POS Y

			ENDP

#line 9 "C:/zxbasic/src/arch/zx48k/library-asm/cls.asm"

CLS:
		PROC

		LOCAL COORDS
		LOCAL __CLS_SCR
		LOCAL ATTR_P
		LOCAL SCREEN

		ld hl, 0
		ld (COORDS), hl
	    ld hl, 1821h
		ld (S_POSN), hl
__CLS_SCR:
		ld hl, SCREEN
		ld (hl), 0
		ld d, h
		ld e, l
		inc de
		ld bc, 6144
		ldir

		; Now clear attributes

		ld a, (ATTR_P)
		ld (hl), a
		ld bc, 767
		ldir
		ret

	COORDS	EQU	23677
	SCREEN	EQU 16384 ; Default start of the screen (can be changed)
	ATTR_P	EQU 23693
	;you can poke (SCREEN_SCRADDR) to change CLS, DRAW & PRINTing address

	SCREEN_ADDR EQU (__CLS_SCR + 1) ; Address used by print and other screen routines
								    ; to get the start of the screen
		ENDP

#line 4010 "C:\Users\geniw\source\repos\BattleGrid\BattleGrid\ZxBasicFiles\BattleGrid.zxbas"
#line 1 "C:/zxbasic/src/arch/zx48k/library-asm/copy_attr.asm"

#line 1 "C:/zxbasic/src/arch/zx48k/library-asm/print.asm"
; vim:ts=4:sw=4:et:
; vim:ts=4:sw=4:et:
	; PRINT command routine
	; Does not print attribute. Use PRINT_STR or PRINT_NUM for that



#line 1 "C:/zxbasic/src/arch/zx48k/library-asm/in_screen.asm"

#line 1 "C:/zxbasic/src/arch/zx48k/library-asm/error.asm"
	; Simple error control routines
; vim:ts=4:et:

	ERR_NR    EQU    23610    ; Error code system variable


	; Error code definitions (as in ZX spectrum manual)

; Set error code with:
	;    ld a, ERROR_CODE
	;    ld (ERR_NR), a


	ERROR_Ok                EQU    -1
	ERROR_SubscriptWrong    EQU     2
	ERROR_OutOfMemory       EQU     3
	ERROR_OutOfScreen       EQU     4
	ERROR_NumberTooBig      EQU     5
	ERROR_InvalidArg        EQU     9
	ERROR_IntOutOfRange     EQU    10
	ERROR_NonsenseInBasic   EQU    11
	ERROR_InvalidFileName   EQU    14
	ERROR_InvalidColour     EQU    19
	ERROR_BreakIntoProgram  EQU    20
	ERROR_TapeLoadingErr    EQU    26


	; Raises error using RST #8
__ERROR:
	    ld (__ERROR_CODE), a
	    rst 8
__ERROR_CODE:
	    nop
	    ret

	; Sets the error system variable, but keeps running.
	; Usually this instruction if followed by the END intermediate instruction.
__STOP:
	    ld (ERR_NR), a
	    ret
#line 3 "C:/zxbasic/src/arch/zx48k/library-asm/in_screen.asm"

__IN_SCREEN:
		; Returns NO carry if current coords (D, E)
		; are OUT of the screen limits (MAXX, MAXY)

		PROC
		LOCAL __IN_SCREEN_ERR

		ld hl, MAXX
		ld a, e
		cp (hl)
		jr nc, __IN_SCREEN_ERR	; Do nothing and return if out of range

		ld a, d
		inc hl
		cp (hl)
		;; jr nc, __IN_SCREEN_ERR	; Do nothing and return if out of range
		;; ret
	    ret c                       ; Return if carry (OK)

__IN_SCREEN_ERR:
__OUT_OF_SCREEN_ERR:
		; Jumps here if out of screen
		ld a, ERROR_OutOfScreen
	    jp __STOP   ; Saves error code and exits

		ENDP
#line 9 "C:/zxbasic/src/arch/zx48k/library-asm/print.asm"
#line 1 "C:/zxbasic/src/arch/zx48k/library-asm/table_jump.asm"

JUMP_HL_PLUS_2A: ; Does JP (HL + A*2) Modifies DE. Modifies A
		add a, a

JUMP_HL_PLUS_A:	 ; Does JP (HL + A) Modifies DE
		ld e, a
		ld d, 0

JUMP_HL_PLUS_DE: ; Does JP (HL + DE)
		add hl, de
		ld e, (hl)
		inc hl
		ld d, (hl)
		ex de, hl
CALL_HL:
		jp (hl)

#line 10 "C:/zxbasic/src/arch/zx48k/library-asm/print.asm"
#line 1 "C:/zxbasic/src/arch/zx48k/library-asm/ink.asm"
	; Sets ink color in ATTR_P permanently
; Parameter: Paper color in A register



INK:
		PROC
		LOCAL __SET_INK
		LOCAL __SET_INK2

		ld de, ATTR_P

__SET_INK:
		cp 8
		jr nz, __SET_INK2

		inc de ; Points DE to MASK_T or MASK_P
		ld a, (de)
		or 7 ; Set bits 0,1,2 to enable transparency
		ld (de), a
		ret

__SET_INK2:
		; Another entry. This will set the ink color at location pointer by DE
		and 7	; # Gets color mod 8
		ld b, a	; Saves the color
		ld a, (de)
		and 0F8h ; Clears previous value
		or b
		ld (de), a
		inc de ; Points DE to MASK_T or MASK_P
		ld a, (de)
		and 0F8h ; Reset bits 0,1,2 sign to disable transparency
		ld (de), a ; Store new attr
		ret

	; Sets the INK color passed in A register in the ATTR_T variable
INK_TMP:
		ld de, ATTR_T
		jp __SET_INK

		ENDP

#line 11 "C:/zxbasic/src/arch/zx48k/library-asm/print.asm"
#line 1 "C:/zxbasic/src/arch/zx48k/library-asm/paper.asm"
	; Sets paper color in ATTR_P permanently
; Parameter: Paper color in A register



PAPER:
		PROC
		LOCAL __SET_PAPER
		LOCAL __SET_PAPER2

		ld de, ATTR_P

__SET_PAPER:
		cp 8
		jr nz, __SET_PAPER2
		inc de
		ld a, (de)
		or 038h
		ld (de), a
		ret

		; Another entry. This will set the paper color at location pointer by DE
__SET_PAPER2:
		and 7	; # Remove
		rlca
		rlca
		rlca		; a *= 8

		ld b, a	; Saves the color
		ld a, (de)
		and 0C7h ; Clears previous value
		or b
		ld (de), a
		inc de ; Points to MASK_T or MASK_P accordingly
		ld a, (de)
		and 0C7h  ; Resets bits 3,4,5
		ld (de), a
		ret


	; Sets the PAPER color passed in A register in the ATTR_T variable
PAPER_TMP:
		ld de, ATTR_T
		jp __SET_PAPER
		ENDP

#line 12 "C:/zxbasic/src/arch/zx48k/library-asm/print.asm"
#line 1 "C:/zxbasic/src/arch/zx48k/library-asm/flash.asm"
	; Sets flash flag in ATTR_P permanently
; Parameter: Paper color in A register



FLASH:
		ld hl, ATTR_P

	    PROC
	    LOCAL IS_TR
	    LOCAL IS_ZERO

__SET_FLASH:
		; Another entry. This will set the flash flag at location pointer by DE
		cp 8
		jr z, IS_TR

		; # Convert to 0/1
		or a
		jr z, IS_ZERO
		ld a, 0x80

IS_ZERO:
		ld b, a	; Saves the color
		ld a, (hl)
		and 07Fh ; Clears previous value
		or b
		ld (hl), a
		inc hl
		res 7, (hl)  ;Reset bit 7 to disable transparency
		ret

IS_TR:  ; transparent
		inc hl ; Points DE to MASK_T or MASK_P
		set 7, (hl)  ;Set bit 7 to enable transparency
		ret

	; Sets the FLASH flag passed in A register in the ATTR_T variable
FLASH_TMP:
		ld hl, ATTR_T
		jr __SET_FLASH
	    ENDP

#line 13 "C:/zxbasic/src/arch/zx48k/library-asm/print.asm"

#line 1 "C:/zxbasic/src/arch/zx48k/library-asm/over.asm"
	; Sets OVER flag in P_FLAG permanently
; Parameter: OVER flag in bit 0 of A register



OVER:
		PROC

		ld c, a ; saves it for later
		and 2
		ld hl, FLAGS2
		res 1, (HL)
		or (hl)
		ld (hl), a

		ld a, c	; Recovers previous value
		and 1	; # Convert to 0/1
		add a, a; # Shift left 1 bit for permanent

		ld hl, P_FLAG
		res 1, (hl)
		or (hl)
		ld (hl), a
		ret

	; Sets OVER flag in P_FLAG temporarily
OVER_TMP:
		ld c, a ; saves it for later
		and 2	; gets bit 1; clears carry
		rra
		ld hl, FLAGS2
		res 0, (hl)
		or (hl)
		ld (hl), a

		ld a, c	; Recovers previous value
		and 1
		ld hl, P_FLAG
		res 0, (hl)
	    or (hl)
		ld (hl), a
		jp __SET_ATTR_MODE

		ENDP

#line 15 "C:/zxbasic/src/arch/zx48k/library-asm/print.asm"
#line 1 "C:/zxbasic/src/arch/zx48k/library-asm/inverse.asm"
	; Sets INVERSE flag in P_FLAG permanently
; Parameter: INVERSE flag in bit 0 of A register



INVERSE:
		PROC

		and 1	; # Convert to 0/1
		add a, a; # Shift left 3 bits for permanent
		add a, a
		add a, a
		ld hl, P_FLAG
		res 3, (hl)
		or (hl)
		ld (hl), a
		ret

	; Sets INVERSE flag in P_FLAG temporarily
INVERSE_TMP:
		and 1
		add a, a
		add a, a; # Shift left 2 bits for temporary
		ld hl, P_FLAG
		res 2, (hl)
		or (hl)
		ld (hl), a
		jp __SET_ATTR_MODE

		ENDP

#line 16 "C:/zxbasic/src/arch/zx48k/library-asm/print.asm"
#line 1 "C:/zxbasic/src/arch/zx48k/library-asm/bold.asm"
	; Sets BOLD flag in P_FLAG permanently
; Parameter: BOLD flag in bit 0 of A register


BOLD:
		PROC

		and 1
		rlca
	    rlca
	    rlca
		ld hl, FLAGS2
		res 3, (HL)
		or (hl)
		ld (hl), a
		ret

	; Sets BOLD flag in P_FLAG temporarily
BOLD_TMP:
		and 1
		rlca
		rlca
		ld hl, FLAGS2
		res 2, (hl)
		or (hl)
		ld (hl), a
		ret

		ENDP

#line 17 "C:/zxbasic/src/arch/zx48k/library-asm/print.asm"
#line 1 "C:/zxbasic/src/arch/zx48k/library-asm/italic.asm"
	; Sets ITALIC flag in P_FLAG permanently
; Parameter: ITALIC flag in bit 0 of A register


ITALIC:
		PROC

		and 1
	    rrca
	    rrca
	    rrca
		ld hl, FLAGS2
		res 5, (HL)
		or (hl)
		ld (hl), a
		ret

	; Sets ITALIC flag in P_FLAG temporarily
ITALIC_TMP:
		and 1
		rrca
		rrca
		rrca
		rrca
		ld hl, FLAGS2
		res 4, (hl)
		or (hl)
		ld (hl), a
		ret

		ENDP

#line 18 "C:/zxbasic/src/arch/zx48k/library-asm/print.asm"

#line 1 "C:/zxbasic/src/arch/zx48k/library-asm/attr.asm"
	; Attribute routines
; vim:ts=4:et:sw:







__ATTR_ADDR:
	    ; calc start address in DE (as (32 * d) + e)
    ; Contributed by Santiago Romero at http://www.speccy.org
	    ld h, 0                     ;  7 T-States
	    ld a, d                     ;  4 T-States
	    add a, a     ; a * 2        ;  4 T-States
	    add a, a     ; a * 4        ;  4 T-States
	    ld l, a      ; HL = A * 4   ;  4 T-States

	    add hl, hl   ; HL = A * 8   ; 15 T-States
	    add hl, hl   ; HL = A * 16  ; 15 T-States
	    add hl, hl   ; HL = A * 32  ; 15 T-States

    ld d, 18h ; DE = 6144 + E. Note: 6144 is the screen size (before attr zone)
	    add hl, de

	    ld de, (SCREEN_ADDR)    ; Adds the screen address
	    add hl, de

	    ; Return current screen address in HL
	    ret


	; Sets the attribute at a given screen coordinate (D, E).
	; The attribute is taken from the ATTR_T memory variable
	; Used by PRINT routines
SET_ATTR:

	    ; Checks for valid coords
	    call __IN_SCREEN
	    ret nc

__SET_ATTR:
	    ; Internal __FASTCALL__ Entry used by printing routines
	    PROC

	    call __ATTR_ADDR

__SET_ATTR2:  ; Sets attr from ATTR_T to (HL) which points to the scr address
	    ld de, (ATTR_T)    ; E = ATTR_T, D = MASK_T

	    ld a, d
	    and (hl)
	    ld c, a    ; C = current screen color, masked

	    ld a, d
	    cpl        ; Negate mask
	    and e    ; Mask current attributes
	    or c    ; Mix them
	    ld (hl), a ; Store result in screen

	    ret

	    ENDP


	; Sets the attribute at a given screen pixel address in hl
	; HL contains the address in RAM for a given pixel (not a coordinate)
SET_PIXEL_ADDR_ATTR:
	    ;; gets ATTR position with offset given in SCREEN_ADDR
	    ld a, h
	    rrca
	    rrca
	    rrca
	    and 3
	    or 18h
	    ld h, a
	    ld de, (SCREEN_ADDR)
	    add hl, de  ;; Final screen addr
	    jp __SET_ATTR2
#line 20 "C:/zxbasic/src/arch/zx48k/library-asm/print.asm"

	; Putting a comment starting with @INIT <address>
	; will make the compiler to add a CALL to <address>
	; It is useful for initialization routines.


__PRINT_INIT: ; To be called before program starts (initializes library)
	        PROC

	        ld hl, __PRINT_START
	        ld (PRINT_JUMP_STATE), hl

	        ld hl, 1821h
	        ld (MAXX), hl  ; Sets current maxX and maxY

	        xor a
	        ld (FLAGS2), a

	        ret


__PRINTCHAR: ; Print character store in accumulator (A register)
	             ; Modifies H'L', B'C', A'F', D'E', A

	        LOCAL PO_GR_1

	        LOCAL __PRCHAR
	        LOCAL __PRINT_CONT
	        LOCAL __PRINT_CONT2
	        LOCAL __PRINT_JUMP
	        LOCAL __SRCADDR
	        LOCAL __PRINT_UDG
	        LOCAL __PRGRAPH
	        LOCAL __PRINT_START
	        LOCAL __ROM_SCROLL_SCR
	        LOCAL __TVFLAGS

	        __ROM_SCROLL_SCR EQU 0DFEh
	        __TVFLAGS EQU 5C3Ch

	PRINT_JUMP_STATE EQU __PRINT_JUMP + 1

__PRINT_JUMP:
	        jp __PRINT_START    ; Where to jump. If we print 22 (AT), next two calls jumps to AT1 and AT2 respectively


	        LOCAL __SCROLL
__SCROLL:  ; Scroll?
	        ld hl, __TVFLAGS
	        bit 1, (hl)
	        ret z
	        call __ROM_SCROLL_SCR
	        ld hl, __TVFLAGS
	        res 1, (hl)
	        ret
#line 76 "C:/zxbasic/src/arch/zx48k/library-asm/print.asm"

__PRINT_START:
	        cp ' '
	        jp c, __PRINT_SPECIAL    ; Characters below ' ' are special ones

	        exx               ; Switch to alternative registers
	        ex af, af'        ; Saves a value (char to print) for later


	        call __SCROLL
#line 87 "C:/zxbasic/src/arch/zx48k/library-asm/print.asm"
	        call __LOAD_S_POSN

	; At this point we have the new coord
	        ld hl, (SCREEN_ADDR)

	        ld a, d
	        ld c, a     ; Saves it for later

	        and 0F8h    ; Masks 3 lower bit ; zy
	        ld d, a

	        ld a, c     ; Recovers it
	        and 07h     ; MOD 7 ; y1
	        rrca
	        rrca
	        rrca

	        or e
	        ld e, a
	        add hl, de    ; HL = Screen address + DE
	        ex de, hl     ; DE = Screen address

	        ex af, af'

	        cp 80h    ; Is it an UDG or a ?
	        jp c, __SRCADDR

	        cp 90h
	        jp nc, __PRINT_UDG

	        ; Print a 8 bit pattern (80h to 8Fh)

	        ld b, a
	        call PO_GR_1 ; This ROM routine will generate the bit pattern at MEM0
	        ld hl, MEM0
	        jp __PRGRAPH

	PO_GR_1 EQU 0B38h

__PRINT_UDG:
	        sub 90h ; Sub ASC code
	        ld bc, (UDG)
	        jp __PRGRAPH0

	__SOURCEADDR EQU (__SRCADDR + 1)    ; Address of the pointer to chars source
__SRCADDR:
	        ld bc, (CHARS)

__PRGRAPH0:
        add a, a   ; A = a * 2 (since a < 80h) ; Thanks to Metalbrain at http://foro.speccy.org
	        ld l, a
	        ld h, 0    ; HL = a * 2 (accumulator)
	        add hl, hl
	        add hl, hl ; HL = a * 8
	        add hl, bc ; HL = CHARS address

__PRGRAPH:
	        ex de, hl  ; HL = Write Address, DE = CHARS address
	        bit 2, (iy + $47)
	        call nz, __BOLD
	        bit 4, (iy + $47)
	        call nz, __ITALIC
	        ld b, 8 ; 8 bytes per char
__PRCHAR:
	        ld a, (de) ; DE *must* be ALWAYS source, and HL destiny

PRINT_MODE:     ; Which operation is used to write on the screen
                ; Set it with:
	                ; LD A, <OPERATION>
	                ; LD (PRINT_MODE), A
	                ;
                ; Available opertions:
                ; NORMAL : 0h  --> NOP         ; OVER 0
                ; XOR    : AEh --> XOR (HL)    ; OVER 1
                ; OR     : B6h --> OR (HL)     ; PUTSPRITE
                ; AND    : A6h --> AND (HL)    ; PUTMASK
	        nop     ;

INVERSE_MODE:   ; 00 -> NOP -> INVERSE 0
	        nop     ; 2F -> CPL -> INVERSE 1

	        ld (hl), a

	        inc de
	        inc h     ; Next line
	        djnz __PRCHAR

	        call __LOAD_S_POSN
	        push de
	        call __SET_ATTR
	        pop de
	        inc e            ; COL = COL + 1
	        ld hl, (MAXX)
	        ld a, e
	        dec l            ; l = MAXX
	        cp l             ; Lower than max?
	        jp nc, __PRINT_EOL1

__PRINT_CONT:
	        call __SAVE_S_POSN

__PRINT_CONT2:
	        exx
	        ret

	; ------------- SPECIAL CHARS (< 32) -----------------

__PRINT_SPECIAL:    ; Jumps here if it is a special char
	        exx
	        ld hl, __PRINT_TABLE
	        jp JUMP_HL_PLUS_2A


PRINT_EOL:        ; Called WHENEVER there is no ";" at end of PRINT sentence
	        exx

__PRINT_0Dh:        ; Called WHEN printing CHR$(13)

	        call __SCROLL
#line 207 "C:/zxbasic/src/arch/zx48k/library-asm/print.asm"
	        call __LOAD_S_POSN

__PRINT_EOL1:        ; Another entry called from PRINT when next line required
	        ld e, 0

__PRINT_EOL2:
	        ld a, d
	        inc a

__PRINT_AT1_END:
	        ld hl, (MAXY)
	        cp l
	        jr c, __PRINT_EOL_END    ; Carry if (MAXY) < d

	        ld hl, __TVFLAGS
	        set 1, (hl)
	        dec a
#line 227 "C:/zxbasic/src/arch/zx48k/library-asm/print.asm"

__PRINT_EOL_END:
	        ld d, a

__PRINT_AT2_END:
	        call __SAVE_S_POSN
	        exx
	        ret

__PRINT_COM:
	        exx
	        push hl
	        push de
	        push bc
	        call PRINT_COMMA
	        pop bc
	        pop de
	        pop hl
	        ret

__PRINT_TAB:
	        ld hl, __PRINT_TAB1
	        jr __PRINT_SET_STATE

__PRINT_TAB1:
	        ld (MEM0), a
	        exx
	        ld hl, __PRINT_TAB2
	        jr __PRINT_SET_STATE

__PRINT_TAB2:
	        ld a, (MEM0)        ; Load tab code (ignore the current one)
	        push hl
	        push de
	        push bc
	        ld hl, __PRINT_START
	        ld (PRINT_JUMP_STATE), hl
	        call PRINT_TAB
	        pop bc
	        pop de
	        pop hl
	        ret

__PRINT_NOP:
__PRINT_RESTART:
	        ld hl, __PRINT_START
	        jr __PRINT_SET_STATE

__PRINT_AT:
	        ld hl, __PRINT_AT1

__PRINT_SET_STATE:
	        ld (PRINT_JUMP_STATE), hl    ; Saves next entry call
	        exx
	        ret

__PRINT_AT1:    ; Jumps here if waiting for 1st parameter
	        exx
	        ld hl, __PRINT_AT2
	        ld (PRINT_JUMP_STATE), hl    ; Saves next entry call
	        call __LOAD_S_POSN
	        jr __PRINT_AT1_END

__PRINT_AT2:
	        exx
	        ld hl, __PRINT_START
	        ld (PRINT_JUMP_STATE), hl    ; Saves next entry call
	        call __LOAD_S_POSN
	        ld e, a
	        ld hl, (MAXX)
	        cp l
	        jr c, __PRINT_AT2_END
	        jr __PRINT_EOL1

__PRINT_DEL:
	        call __LOAD_S_POSN        ; Gets current screen position
	        dec e
	        ld a, -1
	        cp e
	        jp nz, __PRINT_AT2_END
	        ld hl, (MAXX)
	        ld e, l
	        dec e
	        dec e
	        dec d
	        cp d
	        jp nz, __PRINT_AT2_END
	        ld d, h
	        dec d
	        jp __PRINT_AT2_END

__PRINT_INK:
	        ld hl, __PRINT_INK2
	        jp __PRINT_SET_STATE

__PRINT_INK2:
	        exx
	        call INK_TMP
	        jp __PRINT_RESTART

__PRINT_PAP:
	        ld hl, __PRINT_PAP2
	        jp __PRINT_SET_STATE

__PRINT_PAP2:
	        exx
	        call PAPER_TMP
	        jp __PRINT_RESTART

__PRINT_FLA:
	        ld hl, __PRINT_FLA2
	        jp __PRINT_SET_STATE

__PRINT_FLA2:
	        exx
	        call FLASH_TMP
	        jp __PRINT_RESTART

__PRINT_BRI:
	        ld hl, __PRINT_BRI2
	        jp __PRINT_SET_STATE

__PRINT_BRI2:
	        exx
	        call BRIGHT_TMP
	        jp __PRINT_RESTART

__PRINT_INV:
	        ld hl, __PRINT_INV2
	        jp __PRINT_SET_STATE

__PRINT_INV2:
	        exx
	        call INVERSE_TMP
	        jp __PRINT_RESTART

__PRINT_OVR:
	        ld hl, __PRINT_OVR2
	        jp __PRINT_SET_STATE

__PRINT_OVR2:
	        exx
	        call OVER_TMP
	        jp __PRINT_RESTART

__PRINT_BOLD:
	        ld hl, __PRINT_BOLD2
	        jp __PRINT_SET_STATE

__PRINT_BOLD2:
	        exx
	        call BOLD_TMP
	        jp __PRINT_RESTART

__PRINT_ITA:
	        ld hl, __PRINT_ITA2
	        jp __PRINT_SET_STATE

__PRINT_ITA2:
	        exx
	        call ITALIC_TMP
	        jp __PRINT_RESTART


__BOLD:
	        push hl
	        ld hl, MEM0
	        ld b, 8
__BOLD_LOOP:
	        ld a, (de)
	        ld c, a
	        rlca
	        or c
	        ld (hl), a
	        inc hl
	        inc de
	        djnz __BOLD_LOOP
	        pop hl
	        ld de, MEM0
	        ret


__ITALIC:
	        push hl
	        ld hl, MEM0
	        ex de, hl
	        ld bc, 8
	        ldir
	        ld hl, MEM0
	        srl (hl)
	        inc hl
	        srl (hl)
	        inc hl
	        srl (hl)
	        inc hl
	        inc hl
	        inc hl
	        sla (hl)
	        inc hl
	        sla (hl)
	        inc hl
	        sla (hl)
	        pop hl
	        ld de, MEM0
	        ret

PRINT_COMMA:
	        call __LOAD_S_POSN
	        ld a, e
	        and 16
	        add a, 16

PRINT_TAB:
	        PROC
	        LOCAL LOOP, CONTINUE

	        inc a
	        call __LOAD_S_POSN ; e = current row
	        ld d, a
	        ld a, e
	        cp 21h
	        jr nz, CONTINUE
	        ld e, -1
CONTINUE:
	        ld a, d
	        inc e
	        sub e  ; A = A - E
	        and 31 ;
	        ret z  ; Already at position E
	        ld b, a
LOOP:
	        ld a, ' '
	        push bc
	        exx
	        call __PRINTCHAR
	        exx
	        pop bc
	        djnz LOOP
	        ret
	        ENDP

PRINT_AT: ; Changes cursor to ROW, COL
	         ; COL in A register
	         ; ROW in stack

	        pop hl    ; Ret address
	        ex (sp), hl ; callee H = ROW
	        ld l, a
	        ex de, hl

	        call __IN_SCREEN
	        ret nc    ; Return if out of screen

	        ld hl, __TVFLAGS
	        res 1, (hl)
#line 483 "C:/zxbasic/src/arch/zx48k/library-asm/print.asm"
	        jp __SAVE_S_POSN

	        LOCAL __PRINT_COM
	        LOCAL __BOLD
	        LOCAL __BOLD_LOOP
	        LOCAL __ITALIC
	        LOCAL __PRINT_EOL1
	        LOCAL __PRINT_EOL2
	        LOCAL __PRINT_AT1
	        LOCAL __PRINT_AT2
	        LOCAL __PRINT_AT2_END
	        LOCAL __PRINT_BOLD
	        LOCAL __PRINT_BOLD2
	        LOCAL __PRINT_ITA
	        LOCAL __PRINT_ITA2
	        LOCAL __PRINT_INK
	        LOCAL __PRINT_PAP
	        LOCAL __PRINT_SET_STATE
	        LOCAL __PRINT_TABLE
	        LOCAL __PRINT_TAB, __PRINT_TAB1, __PRINT_TAB2

__PRINT_TABLE:    ; Jump table for 0 .. 22 codes

	        DW __PRINT_NOP    ;  0
	        DW __PRINT_NOP    ;  1
	        DW __PRINT_NOP    ;  2
	        DW __PRINT_NOP    ;  3
	        DW __PRINT_NOP    ;  4
	        DW __PRINT_NOP    ;  5
	        DW __PRINT_COM    ;  6 COMMA
	        DW __PRINT_NOP    ;  7
	        DW __PRINT_DEL    ;  8 DEL
	        DW __PRINT_NOP    ;  9
	        DW __PRINT_NOP    ; 10
	        DW __PRINT_NOP    ; 11
	        DW __PRINT_NOP    ; 12
	        DW __PRINT_0Dh    ; 13
	        DW __PRINT_BOLD   ; 14
	        DW __PRINT_ITA    ; 15
	        DW __PRINT_INK    ; 16
	        DW __PRINT_PAP    ; 17
	        DW __PRINT_FLA    ; 18
	        DW __PRINT_BRI    ; 19
	        DW __PRINT_INV    ; 20
	        DW __PRINT_OVR    ; 21
	        DW __PRINT_AT     ; 22 AT
	        DW __PRINT_TAB    ; 23 TAB

	        ENDP


#line 3 "C:/zxbasic/src/arch/zx48k/library-asm/copy_attr.asm"
#line 4 "C:/zxbasic/src/arch/zx48k/library-asm/copy_attr.asm"



COPY_ATTR:
		; Just copies current permanent attribs into temporal attribs
		; and sets print mode
		PROC

		LOCAL INVERSE1
		LOCAL __REFRESH_TMP

	INVERSE1 EQU 02Fh

		ld hl, (ATTR_P)
		ld (ATTR_T), hl

		ld hl, FLAGS2
		call __REFRESH_TMP

		ld hl, P_FLAG
		call __REFRESH_TMP


__SET_ATTR_MODE:		; Another entry to set print modes. A contains (P_FLAG)


		LOCAL TABLE
		LOCAL CONT2

		rra					; Over bit to carry
		ld a, (FLAGS2)
		rla					; Over bit in bit 1, Over2 bit in bit 2
		and 3				; Only bit 0 and 1 (OVER flag)

		ld c, a
		ld b, 0

		ld hl, TABLE
		add hl, bc
		ld a, (hl)
		ld (PRINT_MODE), a

		ld hl, (P_FLAG)
		xor a			; NOP -> INVERSE0
		bit 2, l
		jr z, CONT2
		ld a, INVERSE1 	; CPL -> INVERSE1

CONT2:
		ld (INVERSE_MODE), a
		ret

TABLE:
		nop				; NORMAL MODE
		xor (hl)		; OVER 1 MODE
		and (hl)		; OVER 2 MODE
		or  (hl)		; OVER 3 MODE

#line 65 "C:/zxbasic/src/arch/zx48k/library-asm/copy_attr.asm"

__REFRESH_TMP:
		ld a, (hl)
		and 10101010b
		ld c, a
		rra
		or c
		ld (hl), a
		ret

		ENDP

#line 4011 "C:\Users\geniw\source\repos\BattleGrid\BattleGrid\ZxBasicFiles\BattleGrid.zxbas"

#line 1 "C:/zxbasic/src/arch/zx48k/library-asm/inkey.asm"
	; INKEY Function
	; Returns a string allocated in dynamic memory
	; containing the string.
	; An empty string otherwise.

#line 1 "C:/zxbasic/src/arch/zx48k/library-asm/alloc.asm"
; vim: ts=4:et:sw=4:
	; Copyleft (K) by Jose M. Rodriguez de la Rosa
	;  (a.k.a. Boriel)
;  http://www.boriel.com
	;
	; This ASM library is licensed under the MIT license
	; you can use it for any purpose (even for commercial
	; closed source programs).
	;
	; Please read the MIT license on the internet

	; ----- IMPLEMENTATION NOTES ------
	; The heap is implemented as a linked list of free blocks.

; Each free block contains this info:
	;
	; +----------------+ <-- HEAP START
	; | Size (2 bytes) |
	; |        0       | <-- Size = 0 => DUMMY HEADER BLOCK
	; +----------------+
	; | Next (2 bytes) |---+
	; +----------------+ <-+
	; | Size (2 bytes) |
	; +----------------+
	; | Next (2 bytes) |---+
	; +----------------+   |
	; | <free bytes...>|   | <-- If Size > 4, then this contains (size - 4) bytes
	; | (0 if Size = 4)|   |
	; +----------------+ <-+
	; | Size (2 bytes) |
	; +----------------+
	; | Next (2 bytes) |---+
	; +----------------+   |
	; | <free bytes...>|   |
	; | (0 if Size = 4)|   |
	; +----------------+   |
	;   <Allocated>        | <-- This zone is in use (Already allocated)
	; +----------------+ <-+
	; | Size (2 bytes) |
	; +----------------+
	; | Next (2 bytes) |---+
	; +----------------+   |
	; | <free bytes...>|   |
	; | (0 if Size = 4)|   |
	; +----------------+ <-+
	; | Next (2 bytes) |--> NULL => END OF LIST
	; |    0 = NULL    |
	; +----------------+
	; | <free bytes...>|
	; | (0 if Size = 4)|
	; +----------------+


	; When a block is FREED, the previous and next pointers are examined to see
	; if we can defragment the heap. If the block to be freed is just next to the
	; previous, or to the next (or both) they will be converted into a single
	; block (so defragmented).


	;   MEMORY MANAGER
	;
	; This library must be initialized calling __MEM_INIT with
	; HL = BLOCK Start & DE = Length.

	; An init directive is useful for initialization routines.
	; They will be added automatically if needed.


#line 1 "C:/zxbasic/src/arch/zx48k/library-asm/heapinit.asm"
; vim: ts=4:et:sw=4:
	; Copyleft (K) by Jose M. Rodriguez de la Rosa
	;  (a.k.a. Boriel)
;  http://www.boriel.com
	;
	; This ASM library is licensed under the BSD license
	; you can use it for any purpose (even for commercial
	; closed source programs).
	;
	; Please read the BSD license on the internet

	; ----- IMPLEMENTATION NOTES ------
	; The heap is implemented as a linked list of free blocks.

; Each free block contains this info:
	;
	; +----------------+ <-- HEAP START
	; | Size (2 bytes) |
	; |        0       | <-- Size = 0 => DUMMY HEADER BLOCK
	; +----------------+
	; | Next (2 bytes) |---+
	; +----------------+ <-+
	; | Size (2 bytes) |
	; +----------------+
	; | Next (2 bytes) |---+
	; +----------------+   |
	; | <free bytes...>|   | <-- If Size > 4, then this contains (size - 4) bytes
	; | (0 if Size = 4)|   |
	; +----------------+ <-+
	; | Size (2 bytes) |
	; +----------------+
	; | Next (2 bytes) |---+
	; +----------------+   |
	; | <free bytes...>|   |
	; | (0 if Size = 4)|   |
	; +----------------+   |
	;   <Allocated>        | <-- This zone is in use (Already allocated)
	; +----------------+ <-+
	; | Size (2 bytes) |
	; +----------------+
	; | Next (2 bytes) |---+
	; +----------------+   |
	; | <free bytes...>|   |
	; | (0 if Size = 4)|   |
	; +----------------+ <-+
	; | Next (2 bytes) |--> NULL => END OF LIST
	; |    0 = NULL    |
	; +----------------+
	; | <free bytes...>|
	; | (0 if Size = 4)|
	; +----------------+


	; When a block is FREED, the previous and next pointers are examined to see
	; if we can defragment the heap. If the block to be breed is just next to the
	; previous, or to the next (or both) they will be converted into a single
	; block (so defragmented).


	;   MEMORY MANAGER
	;
	; This library must be initialized calling __MEM_INIT with
	; HL = BLOCK Start & DE = Length.

	; An init directive is useful for initialization routines.
	; They will be added automatically if needed.




	; ---------------------------------------------------------------------
	;  __MEM_INIT must be called to initalize this library with the
	; standard parameters
	; ---------------------------------------------------------------------
__MEM_INIT: ; Initializes the library using (RAMTOP) as start, and
	        ld hl, ZXBASIC_MEM_HEAP  ; Change this with other address of heap start
	        ld de, ZXBASIC_HEAP_SIZE ; Change this with your size

	; ---------------------------------------------------------------------
	;  __MEM_INIT2 initalizes this library
; Parameters:
;   HL : Memory address of 1st byte of the memory heap
;   DE : Length in bytes of the Memory Heap
	; ---------------------------------------------------------------------
__MEM_INIT2:
	        ; HL as TOP
	        PROC

	        dec de
	        dec de
	        dec de
	        dec de        ; DE = length - 4; HL = start
	        ; This is done, because we require 4 bytes for the empty dummy-header block

	        xor a
	        ld (hl), a
	        inc hl
        ld (hl), a ; First "free" block is a header: size=0, Pointer=&(Block) + 4
	        inc hl

	        ld b, h
	        ld c, l
	        inc bc
	        inc bc      ; BC = starts of next block

	        ld (hl), c
	        inc hl
	        ld (hl), b
	        inc hl      ; Pointer to next block

	        ld (hl), e
	        inc hl
	        ld (hl), d
	        inc hl      ; Block size (should be length - 4 at start); This block contains all the available memory

	        ld (hl), a ; NULL (0000h) ; No more blocks (a list with a single block)
	        inc hl
	        ld (hl), a

	        ld a, 201
	        ld (__MEM_INIT), a; "Pokes" with a RET so ensure this routine is not called again
	        ret

	        ENDP

#line 70 "C:/zxbasic/src/arch/zx48k/library-asm/alloc.asm"


	; ---------------------------------------------------------------------
	; MEM_ALLOC
	;  Allocates a block of memory in the heap.
	;
	; Parameters
	;  BC = Length of requested memory block
	;
; Returns:
	;  HL = Pointer to the allocated block in memory. Returns 0 (NULL)
	;       if the block could not be allocated (out of memory)
	; ---------------------------------------------------------------------

MEM_ALLOC:
__MEM_ALLOC: ; Returns the 1st free block found of the given length (in BC)
	        PROC

	        LOCAL __MEM_LOOP
	        LOCAL __MEM_DONE
	        LOCAL __MEM_SUBTRACT
	        LOCAL __MEM_START
	        LOCAL TEMP, TEMP0

	TEMP EQU TEMP0 + 1

	        ld hl, 0
	        ld (TEMP), hl

__MEM_START:
	        ld hl, ZXBASIC_MEM_HEAP  ; This label point to the heap start
	        inc bc
	        inc bc  ; BC = BC + 2 ; block size needs 2 extra bytes for hidden pointer

__MEM_LOOP:  ; Loads lengh at (HL, HL+). If Lenght >= BC, jump to __MEM_DONE
	        ld a, h ;  HL = NULL (No memory available?)
	        or l
#line 111 "C:/zxbasic/src/arch/zx48k/library-asm/alloc.asm"
	        ret z ; NULL
#line 113 "C:/zxbasic/src/arch/zx48k/library-asm/alloc.asm"
	        ; HL = Pointer to Free block
	        ld e, (hl)
	        inc hl
	        ld d, (hl)
	        inc hl          ; DE = Block Length

	        push hl         ; HL = *pointer to -> next block
	        ex de, hl
	        or a            ; CF = 0
	        sbc hl, bc      ; FREE >= BC (Length)  (HL = BlockLength - Length)
	        jp nc, __MEM_DONE
	        pop hl
	        ld (TEMP), hl

	        ex de, hl
	        ld e, (hl)
	        inc hl
	        ld d, (hl)
	        ex de, hl
	        jp __MEM_LOOP

__MEM_DONE:  ; A free block has been found.
	             ; Check if at least 4 bytes remains free (HL >= 4)
	        push hl
	        exx  ; exx to preserve bc
	        pop hl
	        ld bc, 4
	        or a
	        sbc hl, bc
	        exx
	        jp nc, __MEM_SUBTRACT
	        ; At this point...
	        ; less than 4 bytes remains free. So we return this block entirely
	        ; We must link the previous block with the next to this one
	        ; (DE) => Pointer to next block
	        ; (TEMP) => &(previous->next)
	        pop hl     ; Discard current block pointer
	        push de
	        ex de, hl  ; DE = Previous block pointer; (HL) = Next block pointer
	        ld a, (hl)
	        inc hl
	        ld h, (hl)
	        ld l, a    ; HL = (HL)
	        ex de, hl  ; HL = Previous block pointer; DE = Next block pointer
TEMP0:
	        ld hl, 0   ; Pre-previous block pointer

	        ld (hl), e
	        inc hl
	        ld (hl), d ; LINKED
	        pop hl ; Returning block.

	        ret

__MEM_SUBTRACT:
	        ; At this point we have to store HL value (Length - BC) into (DE - 2)
	        ex de, hl
	        dec hl
	        ld (hl), d
	        dec hl
	        ld (hl), e ; Store new block length

	        add hl, de ; New length + DE => free-block start
	        pop de     ; Remove previous HL off the stack

	        ld (hl), c ; Store length on its 1st word
	        inc hl
	        ld (hl), b
	        inc hl     ; Return hl
	        ret

	        ENDP

#line 7 "C:/zxbasic/src/arch/zx48k/library-asm/inkey.asm"

INKEY:
		PROC
		LOCAL __EMPTY_INKEY
		LOCAL KEY_SCAN
		LOCAL KEY_TEST
		LOCAL KEY_CODE

		ld bc, 3	; 1 char length string
		call __MEM_ALLOC

		ld a, h
		or l
		ret z	; Return if NULL (No memory)

		push hl ; Saves memory pointer

		call KEY_SCAN
		jp nz, __EMPTY_INKEY

		call KEY_TEST
		jp nc, __EMPTY_INKEY

		dec d	; D is expected to be FLAGS so set bit 3 $FF
				; 'L' Mode so no keywords.
		ld e, a	; main key to A
				; C is MODE 0 'KLC' from above still.
		call KEY_CODE ; routine K-DECODE
		pop hl

		ld (hl), 1
		inc hl
		ld (hl), 0
		inc hl
		ld (hl), a
		dec hl
		dec hl	; HL Points to string result
		ret

__EMPTY_INKEY:
		pop hl
		xor a
		ld (hl), a
		inc hl
		ld (hl), a
		dec hl
		ret

	KEY_SCAN	EQU 028Eh
	KEY_TEST	EQU 031Eh
	KEY_CODE	EQU 0333h

		ENDP

#line 4013 "C:\Users\geniw\source\repos\BattleGrid\BattleGrid\ZxBasicFiles\BattleGrid.zxbas"
#line 1 "C:/zxbasic/src/arch/zx48k/library-asm/lei8.asm"
__LEI8: ; Signed <= comparison for 8bit int
	        ; A <= H (registers)
	    PROC
	    LOCAL checkParity
	    sub h
	    jr nz, __LTI
	    inc a
	    ret

__LTI8:  ; Test 8 bit values A < H
	    sub h

__LTI:   ; Generic signed comparison
	    jp po, checkParity
	    xor 0x80
checkParity:
	    ld a, 0     ; False
	    ret p
	    inc a       ; True
	    ret
	    ENDP
#line 4014 "C:\Users\geniw\source\repos\BattleGrid\BattleGrid\ZxBasicFiles\BattleGrid.zxbas"
#line 1 "C:/zxbasic/src/arch/zx48k/library-asm/lti8.asm"

#line 4015 "C:\Users\geniw\source\repos\BattleGrid\BattleGrid\ZxBasicFiles\BattleGrid.zxbas"


#line 1 "C:/zxbasic/src/arch/zx48k/library-asm/printstr.asm"



#line 1 "C:/zxbasic/src/arch/zx48k/library-asm/free.asm"
; vim: ts=4:et:sw=4:
	; Copyleft (K) by Jose M. Rodriguez de la Rosa
	;  (a.k.a. Boriel)
;  http://www.boriel.com
	;
	; This ASM library is licensed under the BSD license
	; you can use it for any purpose (even for commercial
	; closed source programs).
	;
	; Please read the BSD license on the internet

	; ----- IMPLEMENTATION NOTES ------
	; The heap is implemented as a linked list of free blocks.

; Each free block contains this info:
	;
	; +----------------+ <-- HEAP START
	; | Size (2 bytes) |
	; |        0       | <-- Size = 0 => DUMMY HEADER BLOCK
	; +----------------+
	; | Next (2 bytes) |---+
	; +----------------+ <-+
	; | Size (2 bytes) |
	; +----------------+
	; | Next (2 bytes) |---+
	; +----------------+   |
	; | <free bytes...>|   | <-- If Size > 4, then this contains (size - 4) bytes
	; | (0 if Size = 4)|   |
	; +----------------+ <-+
	; | Size (2 bytes) |
	; +----------------+
	; | Next (2 bytes) |---+
	; +----------------+   |
	; | <free bytes...>|   |
	; | (0 if Size = 4)|   |
	; +----------------+   |
	;   <Allocated>        | <-- This zone is in use (Already allocated)
	; +----------------+ <-+
	; | Size (2 bytes) |
	; +----------------+
	; | Next (2 bytes) |---+
	; +----------------+   |
	; | <free bytes...>|   |
	; | (0 if Size = 4)|   |
	; +----------------+ <-+
	; | Next (2 bytes) |--> NULL => END OF LIST
	; |    0 = NULL    |
	; +----------------+
	; | <free bytes...>|
	; | (0 if Size = 4)|
	; +----------------+


	; When a block is FREED, the previous and next pointers are examined to see
	; if we can defragment the heap. If the block to be breed is just next to the
	; previous, or to the next (or both) they will be converted into a single
	; block (so defragmented).


	;   MEMORY MANAGER
	;
	; This library must be initialized calling __MEM_INIT with
	; HL = BLOCK Start & DE = Length.

	; An init directive is useful for initialization routines.
	; They will be added automatically if needed.



	; ---------------------------------------------------------------------
	; MEM_FREE
	;  Frees a block of memory
	;
; Parameters:
	;  HL = Pointer to the block to be freed. If HL is NULL (0) nothing
	;  is done
	; ---------------------------------------------------------------------

MEM_FREE:
__MEM_FREE: ; Frees the block pointed by HL
	            ; HL DE BC & AF modified
	        PROC

	        LOCAL __MEM_LOOP2
	        LOCAL __MEM_LINK_PREV
	        LOCAL __MEM_JOIN_TEST
	        LOCAL __MEM_BLOCK_JOIN

	        ld a, h
	        or l
	        ret z       ; Return if NULL pointer

	        dec hl
	        dec hl
	        ld b, h
	        ld c, l    ; BC = Block pointer

	        ld hl, ZXBASIC_MEM_HEAP  ; This label point to the heap start

__MEM_LOOP2:
	        inc hl
	        inc hl     ; Next block ptr

	        ld e, (hl)
	        inc hl
	        ld d, (hl) ; Block next ptr
	        ex de, hl  ; DE = &(block->next); HL = block->next

	        ld a, h    ; HL == NULL?
	        or l
	        jp z, __MEM_LINK_PREV; if so, link with previous

	        or a       ; Clear carry flag
	        sbc hl, bc ; Carry if BC > HL => This block if before
	        add hl, bc ; Restores HL, preserving Carry flag
	        jp c, __MEM_LOOP2 ; This block is before. Keep searching PASS the block

	;------ At this point current HL is PAST BC, so we must link (DE) with BC, and HL in BC->next

__MEM_LINK_PREV:    ; Link (DE) with BC, and BC->next with HL
	        ex de, hl
	        push hl
	        dec hl

	        ld (hl), c
	        inc hl
	        ld (hl), b ; (DE) <- BC

	        ld h, b    ; HL <- BC (Free block ptr)
	        ld l, c
	        inc hl     ; Skip block length (2 bytes)
	        inc hl
	        ld (hl), e ; Block->next = DE
	        inc hl
	        ld (hl), d
	        ; --- LINKED ; HL = &(BC->next) + 2

	        call __MEM_JOIN_TEST
	        pop hl

__MEM_JOIN_TEST:   ; Checks for fragmented contiguous blocks and joins them
	                   ; hl = Ptr to current block + 2
	        ld d, (hl)
	        dec hl
	        ld e, (hl)
	        dec hl
	        ld b, (hl) ; Loads block length into BC
	        dec hl
	        ld c, (hl) ;

	        push hl    ; Saves it for later
	        add hl, bc ; Adds its length. If HL == DE now, it must be joined
	        or a
	        sbc hl, de ; If Z, then HL == DE => We must join
	        pop hl
	        ret nz

__MEM_BLOCK_JOIN:  ; Joins current block (pointed by HL) with next one (pointed by DE). HL->length already in BC
	        push hl    ; Saves it for later
	        ex de, hl

	        ld e, (hl) ; DE -> block->next->length
	        inc hl
	        ld d, (hl)
	        inc hl

	        ex de, hl  ; DE = &(block->next)
	        add hl, bc ; HL = Total Length

	        ld b, h
	        ld c, l    ; BC = Total Length

	        ex de, hl
	        ld e, (hl)
	        inc hl
	        ld d, (hl) ; DE = block->next

	        pop hl     ; Recovers Pointer to block
	        ld (hl), c
	        inc hl
	        ld (hl), b ; Length Saved
	        inc hl
	        ld (hl), e
	        inc hl
	        ld (hl), d ; Next saved
	        ret

	        ENDP

#line 5 "C:/zxbasic/src/arch/zx48k/library-asm/printstr.asm"

	; PRINT command routine
	; Prints string pointed by HL

PRINT_STR:
__PRINTSTR:		; __FASTCALL__ Entry to print_string
			PROC
			LOCAL __PRINT_STR_LOOP
	        LOCAL __PRINT_STR_END

	        ld d, a ; Saves A reg (Flag) for later

			ld a, h
			or l
			ret z	; Return if the pointer is NULL

	        push hl

			ld c, (hl)
			inc hl
			ld b, (hl)
			inc hl	; BC = LEN(a$); HL = &a$

__PRINT_STR_LOOP:
			ld a, b
			or c
			jr z, __PRINT_STR_END 	; END if BC (counter = 0)

			ld a, (hl)
			call __PRINTCHAR
			inc hl
			dec bc
			jp __PRINT_STR_LOOP

__PRINT_STR_END:
	        pop hl
	        ld a, d ; Recovers A flag
	        or a   ; If not 0 this is a temporary string. Free it
	        ret z
	        jp __MEM_FREE ; Frees str from heap and return from there

__PRINT_STR:
	        ; Fastcall Entry
	        ; It ONLY prints strings
	        ; HL = String start
	        ; BC = String length (Number of chars)
	        push hl ; Push str address for later
	        ld d, a ; Saves a FLAG
	        jp __PRINT_STR_LOOP

			ENDP

#line 4018 "C:\Users\geniw\source\repos\BattleGrid\BattleGrid\ZxBasicFiles\BattleGrid.zxbas"
#line 1 "C:/zxbasic/src/arch/zx48k/library-asm/string.asm"
	; String library



__STR_ISNULL:	; Returns A = FF if HL is 0, 0 otherwise
			ld a, h
			or l
			sub 1		; Only CARRY if HL is NULL
			sbc a, a	; Only FF if HL is NULL (0 otherwise)
			ret


__STRCMP:	; Compares strings at HL, DE: Returns 0 if EQual, -1 if HL < DE, +1 if HL > DE
				; A register is preserved and returned in A'
			PROC ; __FASTCALL__

			LOCAL __STRCMPZERO
			LOCAL __STRCMPEXIT
			LOCAL __STRCMPLOOP
			LOCAL __NOPRESERVEBC
			LOCAL __EQULEN
			LOCAL __EQULEN1
			LOCAL __HLZERO

			ex af, af'	; Saves current A register in A' (it's used by STRXX comparison functions)

			ld a, h
			or l
			jr z, __HLZERO

			ld a, d
			or e
			ld a, 1
			ret z		; Returns +1 if HL is not NULL and DE is NULL

			ld c, (hl)
			inc hl
			ld b, (hl)
			inc hl		; BC = LEN(a$)
			push hl		; HL = &a$, saves it

			ex de, hl
			ld e, (hl)
			inc hl
			ld d, (hl)
			inc hl
			ex de, hl	; HL = LEN(b$), de = &b$

			; At this point Carry is cleared, and A reg. = 1
			sbc hl, bc	; Carry if len(b$) > len(a$)
			jr z, __EQULEN	; Jump if they have the same length so A reg. = 0
			jr c, __EQULEN1 ; Jump if len(b$) > len(a$) so A reg. = 1
__NOPRESERVEBC:
			add hl, bc	; Restore HL (original length)
			ld b, h		; len(b$) <= len(a$)
			ld c, l		; so BC = hl
			dec a		; At this point A register = 0, it must be -1 since len(a$) > len(b$)
__EQULEN:
			dec a		; A = 0 if len(a$) = len(b$), -1 otherwise
__EQULEN1:
			pop hl		; Recovers A$ pointer
			push af		; Saves A for later (Value to return if strings reach the end)
	        ld a, b
	        or c
	        jr z, __STRCMPZERO ; empty string being compared

		; At this point: BC = lesser length, DE and HL points to b$ and a$ chars respectively
__STRCMPLOOP:
			ld a, (de)
			cpi
			jr nz, __STRCMPEXIT ; (HL) != (DE). Examine carry
			jp po, __STRCMPZERO ; END of string (both are equal)
			inc de
			jp __STRCMPLOOP

__STRCMPZERO:
			pop af		; This is -1 if len(a$) < len(b$), +1 if len(b$) > len(a$), 0 otherwise
			ret

__STRCMPEXIT:		; Sets A with the following value
			dec hl		; Get back to the last char
			cp (hl)
			sbc a, a	; A = -1 if carry => (DE) < (HL); 0 otherwise (DE) > (HL)
			cpl			; A = -1 if (HL) < (DE), 0 otherwise
			add a, a    ; A = A * 2 (thus -2 or 0)
			inc a		; A = A + 1 (thus -1 or 1)

			pop bc		; Discard top of the stack
			ret

__HLZERO:
			or d
			or e
			ret z		; Returns 0 (EQ) if HL == DE == NULL
			ld a, -1
			ret			; Returns -1 if HL is NULL and DE is not NULL

			ENDP

			; The following routines perform string comparison operations (<, >, ==, etc...)
			; On return, A will contain 0 for False, other value for True
			; Register A' will determine whether the incoming strings (HL, DE) will be freed
		; from dynamic memory on exit:
			;		Bit 0 => 1 means HL will be freed.
			;		Bit 1 => 1 means DE will be freed.

__STREQ:	; Compares a$ == b$ (HL = ptr a$, DE = ptr b$). Returns FF (True) or 0 (False)
			push hl
			push de
			call __STRCMP
			pop de
			pop hl

			;inc a		; If A == -1, return 0
			;jp z, __FREE_STR

			;dec a		;
			;dec a		; Return -1 if a = 0 (True), returns 0 if A == 1 (False)
	        sub 1
	        sbc a, a
			jp __FREE_STR


__STRNE:	; Compares a$ != b$ (HL = ptr a$, DE = ptr b$). Returns FF (True) or 0 (False)
			push hl
			push de
			call __STRCMP
			pop de
			pop hl

			;jp z, __FREE_STR

			;ld a, 0FFh	; Returns 0xFFh (True)
			jp __FREE_STR


__STRLT:	; Compares a$ < b$ (HL = ptr a$, DE = ptr b$). Returns FF (True) or 0 (False)
			push hl
			push de
			call __STRCMP
			pop de
			pop hl

			jp z, __FREE_STR ; Returns 0 if A == B

			dec a		; Returns 0 if A == 1 => a$ > b$
			;jp z, __FREE_STR

			;inc a		; A = FE now (-2). Set it to FF and return
			jp __FREE_STR


__STRLE:	; Compares a$ <= b$ (HL = ptr a$, DE = ptr b$). Returns FF (True) or 0 (False)
			push hl
			push de
			call __STRCMP
			pop de
			pop hl

			dec a		; Returns 0 if A == 1 => a$ < b$
			;jp z, __FREE_STR

			;ld a, 0FFh	; A = FE now (-2). Set it to FF and return
			jp __FREE_STR


__STRGT:	; Compares a$ > b$ (HL = ptr a$, DE = ptr b$). Returns FF (True) or 0 (False)
			push hl
			push de
			call __STRCMP
			pop de
			pop hl

			jp z, __FREE_STR		; Returns 0 if A == B

			inc a		; Returns 0 if A == -1 => a$ < b$
			;jp z, __FREE_STR		; Returns 0 if A == B

			;ld a, 0FFh	; A = FE now (-2). Set it to FF and return
			jp __FREE_STR


__STRGE:	; Compares a$ >= b$ (HL = ptr a$, DE = ptr b$). Returns FF (True) or 0 (False)
			push hl
			push de
			call __STRCMP
			pop de
			pop hl

			inc a		; Returns 0 if A == -1 => a$ < b$
			;jr z, __FREE_STR

			;ld a, 0FFh	; A = FE now (-2). Set it to FF and return

__FREE_STR: ; This exit point will test A' for bits 0 and 1
				; If bit 0 is 1 => Free memory from HL pointer
				; If bit 1 is 1 => Free memory from DE pointer
				; Finally recovers A, to return the result
			PROC

			LOCAL __FREE_STR2
			LOCAL __FREE_END

			ex af, af'
			bit 0, a
			jr z, __FREE_STR2

			push af
			push de
			call __MEM_FREE
			pop de
			pop af

__FREE_STR2:
			bit 1, a
			jr z, __FREE_END

			ex de, hl
			call __MEM_FREE

__FREE_END:
			ex af, af'
			ret

			ENDP

#line 4019 "C:\Users\geniw\source\repos\BattleGrid\BattleGrid\ZxBasicFiles\BattleGrid.zxbas"

	END
